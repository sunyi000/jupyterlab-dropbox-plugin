{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../../../apputils/src/toolbar.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ReactElementWidget } from './vdom';\n\nimport { IIterator, find, map, some } from '@phosphor/algorithm';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport { Message, MessageLoop } from '@phosphor/messaging';\n\nimport { AttachedProperty } from '@phosphor/properties';\n\nimport { PanelLayout, Widget } from '@phosphor/widgets';\n\nimport { IClientSession } from './clientsession';\n\nimport * as React from 'react';\n\n/**\n * The class name added to toolbars.\n */\nconst TOOLBAR_CLASS = 'jp-Toolbar';\n\n/**\n * The class name added to toolbar items.\n */\nconst TOOLBAR_ITEM_CLASS = 'jp-Toolbar-item';\n\n/**\n * The class name added to toolbar kernel name text.\n */\nconst TOOLBAR_KERNEL_NAME_CLASS = 'jp-Toolbar-kernelName';\n\n/**\n * The class name added to toolbar spacer.\n */\nconst TOOLBAR_SPACER_CLASS = 'jp-Toolbar-spacer';\n\n/**\n * The class name added to toolbar kernel status icon.\n */\nconst TOOLBAR_KERNEL_STATUS_CLASS = 'jp-Toolbar-kernelStatus';\n\n/**\n * The class name added to a busy kernel indicator.\n */\nconst TOOLBAR_BUSY_CLASS = 'jp-FilledCircleIcon';\n\nconst TOOLBAR_IDLE_CLASS = 'jp-CircleIcon';\n\n/**\n * A layout for toolbars.\n *\n * #### Notes\n * This layout automatically collapses its height if there are no visible\n * toolbar widgets, and expands to the standard toolbar height if there are\n * visible toolbar widgets.\n */\nclass ToolbarLayout extends PanelLayout {\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   *\n   * If any child widget is visible, expand the toolbar height to the normal\n   * toolbar height.\n   */\n  protected onFitRequest(msg: Message): void {\n    super.onFitRequest(msg);\n    if (this.parent!.isAttached) {\n      // If there are any widgets not explicitly hidden, expand the toolbar to\n      // accommodate them.\n      if (some(this.widgets, w => !w.isHidden)) {\n        this.parent!.node.style.minHeight = 'var(--jp-private-toolbar-height)';\n      } else {\n        this.parent!.node.style.minHeight = '';\n      }\n    }\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    super.onUpdateRequest(msg);\n    if (this.parent!.isVisible) {\n      this._dirty = false;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    super.onChildShown(msg);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    super.onChildHidden(msg);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    super.attachWidget(index, widget);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    super.detachWidget(index, widget);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  private _dirty = false;\n}\n\n/**\n * A class which provides a toolbar widget.\n */\nexport class Toolbar<T extends Widget = Widget> extends Widget {\n  /**\n   * Construct a new toolbar widget.\n   */\n  constructor() {\n    super();\n    this.addClass(TOOLBAR_CLASS);\n    this.layout = new ToolbarLayout();\n  }\n\n  /**\n   * Get an iterator over the ordered toolbar item names.\n   *\n   * @returns An iterator over the toolbar item names.\n   */\n  names(): IIterator<string> {\n    let layout = this.layout as ToolbarLayout;\n    return map(layout.widgets, widget => {\n      return Private.nameProperty.get(widget);\n    });\n  }\n\n  /**\n   * Add an item to the end of the toolbar.\n   *\n   * @param name - The name of the widget to add to the toolbar.\n   *\n   * @param widget - The widget to add to the toolbar.\n   *\n   * @param index - The optional name of the item to insert after.\n   *\n   * @returns Whether the item was added to toolbar.  Returns false if\n   *   an item of the same name is already in the toolbar.\n   *\n   * #### Notes\n   * The item can be removed from the toolbar by setting its parent to `null`.\n   */\n  addItem(name: string, widget: T): boolean {\n    let layout = this.layout as ToolbarLayout;\n    return this.insertItem(layout.widgets.length, name, widget);\n  }\n\n  /**\n   * Insert an item into the toolbar at the specified index.\n   *\n   * @param index - The index at which to insert the item.\n   *\n   * @param name - The name of the item.\n   *\n   * @param widget - The widget to add.\n   *\n   * @returns Whether the item was added to the toolbar. Returns false if\n   *   an item of the same name is already in the toolbar.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the items.\n   * The item can be removed from the toolbar by setting its parent to `null`.\n   */\n  insertItem(index: number, name: string, widget: T): boolean {\n    let existing = find(this.names(), value => value === name);\n    if (existing) {\n      return false;\n    }\n    widget.addClass(TOOLBAR_ITEM_CLASS);\n    let layout = this.layout as ToolbarLayout;\n    layout.insertWidget(index, widget);\n    Private.nameProperty.set(widget, name);\n    return true;\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the dock panel's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'click':\n        if (!this.node.contains(document.activeElement) && this.parent) {\n          this.parent.activate();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle `after-attach` messages for the widget.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this.node.removeEventListener('click', this);\n  }\n}\n\n/**\n * The namespace for Toolbar class statics.\n */\nexport namespace Toolbar {\n  /**\n   * Create an interrupt toolbar item.\n   */\n  export function createInterruptButton(\n    session: IClientSession\n  ): ToolbarButton {\n    return new ToolbarButton({\n      iconClassName: 'jp-StopIcon jp-Icon jp-Icon-16',\n      onClick: () => {\n        if (session.kernel) {\n          session.kernel.interrupt();\n        }\n      },\n      tooltip: 'Interrupt the kernel'\n    });\n  }\n\n  /**\n   * Create a restart toolbar item.\n   */\n  export function createRestartButton(session: IClientSession): ToolbarButton {\n    return new ToolbarButton({\n      iconClassName: 'jp-RefreshIcon jp-Icon jp-Icon-16',\n      onClick: () => {\n        session.restart();\n      },\n      tooltip: 'Restart the kernel'\n    });\n  }\n\n  /**\n   * Create a toolbar spacer item.\n   *\n   * #### Notes\n   * It is a flex spacer that separates the left toolbar items\n   * from the right toolbar items.\n   */\n  export function createSpacerItem(): Widget {\n    return new Private.Spacer();\n  }\n\n  /**\n   * Create a kernel name indicator item.\n   *\n   * #### Notes\n   * It will display the `'display_name`' of the current kernel,\n   * or `'No Kernel!'` if there is no kernel.\n   * It can handle a change in context or kernel.\n   */\n  export function createKernelNameItem(session: IClientSession): ToolbarButton {\n    return new Private.KernelName({ session });\n  }\n\n  /**\n   * Create a kernel status indicator item.\n   *\n   * #### Notes\n   * It show display a busy status if the kernel status is\n   * not idle.\n   * It will show the current status in the node title.\n   * It can handle a change to the context or the kernel.\n   */\n  export function createKernelStatusItem(session: IClientSession): Widget {\n    return new Private.KernelStatus(session);\n  }\n}\n\n/**\n * Namespace for ToolbarButtonComponent.\n */\nexport namespace ToolbarButtonComponent {\n  /**\n   * Interface for ToolbarButttonComponent props.\n   */\n  export interface IProps {\n    className?: string;\n    label?: string;\n    iconClassName?: string;\n    iconLabel?: string;\n    tooltip?: string;\n    onClick?: () => void;\n  }\n}\n\n/**\n * React component for a toolbar button.\n *\n * @param props - The props for ToolbarButtonComponent.\n */\nexport function ToolbarButtonComponent(props: ToolbarButtonComponent.IProps) {\n  return (\n    <button\n      className={\n        props.className\n          ? props.className + ' jp-ToolbarButtonComponent'\n          : 'jp-ToolbarButtonComponent'\n      }\n      onClick={props.onClick}\n      title={props.tooltip || props.iconLabel}\n    >\n      {props.iconClassName && (\n        <span\n          className={props.iconClassName + ' jp-ToolbarButtonComponent-icon'}\n        />\n      )}\n      {props.label && (\n        <span className=\"jp-ToolbarButtonComponent-label\">{props.label}</span>\n      )}\n    </button>\n  );\n}\n\n/**\n * Phosphor Widget version of ToolbarButtonComponent.\n */\nexport class ToolbarButton extends ReactElementWidget {\n  /**\n   * Create a ToolbarButton.\n   *\n   * @param props - Props for ToolbarButtonComponent.\n   */\n  constructor(props: ToolbarButtonComponent.IProps = {}) {\n    super(<ToolbarButtonComponent {...props} />);\n    this.addClass('jp-ToolbarButton');\n  }\n}\n\n/**\n * Namespace for CommandToolbarButtonComponent.\n */\nexport namespace CommandToolbarButtonComponent {\n  /**\n   * Interface for CommandToolbarButtonComponent props.\n   */\n  export interface IProps {\n    commands: CommandRegistry;\n    id: string;\n  }\n}\n\n/**\n * React component for a toolbar button that wraps a command.\n *\n * This wraps the ToolbarButtonComponent and watches the command registry\n * for changes to the command.\n */\nexport class CommandToolbarButtonComponent extends React.Component<\n  CommandToolbarButtonComponent.IProps\n> {\n  constructor(props: CommandToolbarButtonComponent.IProps) {\n    super(props);\n    props.commands.commandChanged.connect(this._onChange, this);\n    this._childProps = Private.propsFromCommand(this.props);\n  }\n\n  public render() {\n    return <ToolbarButtonComponent {...this._childProps} />;\n  }\n\n  private _onChange(\n    sender: CommandRegistry,\n    args: CommandRegistry.ICommandChangedArgs\n  ) {\n    if (args.id !== this.props.id) {\n      return; // Not our command\n    }\n\n    if (args.type !== 'changed') {\n      return; // Not a change\n    }\n\n    this._childProps = Private.propsFromCommand(this.props);\n    this.forceUpdate();\n  }\n\n  private _childProps: ToolbarButtonComponent.IProps;\n}\n\n/**\n * Phosphor Widget version of ToolbarButtonComponent.\n */\nexport class CommandToolbarButton extends ReactElementWidget {\n  constructor(props: CommandToolbarButtonComponent.IProps) {\n    super(<CommandToolbarButtonComponent {...props} />);\n    this.addClass('jp-CommandToolbarButton');\n  }\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  export function propsFromCommand(\n    options: CommandToolbarButtonComponent.IProps\n  ): ToolbarButtonComponent.IProps {\n    let { commands, id } = options;\n    const iconClassName = commands.iconClass(id);\n    const iconLabel = commands.iconLabel(id);\n    const label = commands.label(id);\n    let className = commands.className(id);\n    // Add the boolean state classes.\n    if (commands.isToggled(id)) {\n      className += ' p-mod-toggled';\n    }\n    if (!commands.isVisible(id)) {\n      className += ' p-mod-hidden';\n    }\n    const tooltip = commands.caption(id) || label || iconLabel;\n    const onClick = () => {\n      commands.execute(id);\n    };\n    return { className, iconClassName, tooltip, onClick };\n  }\n\n  /**\n   * An attached property for the name of a toolbar item.\n   */\n  export const nameProperty = new AttachedProperty<Widget, string>({\n    name: 'name',\n    create: () => ''\n  });\n\n  /**\n   * A no-op function.\n   */\n  export function noOp() {\n    /* no-op */\n  }\n\n  /**\n   * A spacer widget.\n   */\n  export class Spacer extends Widget {\n    /**\n     * Construct a new spacer widget.\n     */\n    constructor() {\n      super();\n      this.addClass(TOOLBAR_SPACER_CLASS);\n    }\n  }\n\n  /**\n   * Namespace for KernelNameComponent.\n   */\n  export namespace KernelNameComponent {\n    /**\n     * Interface for KernelNameComponent props.\n     */\n    export interface IProps {\n      session: IClientSession;\n    }\n  }\n\n  /**\n   * React component for a kernel name button.\n   *\n   * This wraps the ToolbarButtonComponent and watches the kernel\n   * session for changes.\n   */\n  export class KernelNameComponent extends React.Component<\n    KernelNameComponent.IProps\n  > {\n    constructor(props: KernelNameComponent.IProps) {\n      super(props);\n      props.session.kernelChanged.connect(this._onKernelChanged, this);\n      this._childProps = {\n        className: TOOLBAR_KERNEL_NAME_CLASS,\n        onClick: () => {\n          this.props.session.selectKernel();\n        },\n        tooltip: 'Switch kernel',\n        label: props.session.kernelDisplayName\n      };\n    }\n\n    public render() {\n      return <ToolbarButtonComponent {...this._childProps} />;\n    }\n\n    /**\n     * Update the text of the kernel name item.\n     */\n    private _onKernelChanged(session: IClientSession): void {\n      this._childProps.label = session.kernelDisplayName;\n      this.forceUpdate();\n    }\n\n    private _childProps: ToolbarButtonComponent.IProps;\n  }\n\n  /**\n   * Phosphor Widget version of ToolbarButtonComponent.\n   */\n  export class KernelName extends ReactElementWidget {\n    constructor(props: KernelNameComponent.IProps) {\n      super(<KernelNameComponent {...props} />);\n      this.addClass('jp-KernelName');\n    }\n  }\n\n  /**\n   * A toolbar item that displays kernel status.\n   */\n  export class KernelStatus extends Widget {\n    /**\n     * Construct a new kernel status widget.\n     */\n    constructor(session: IClientSession) {\n      super();\n      this.addClass(TOOLBAR_KERNEL_STATUS_CLASS);\n      this._onStatusChanged(session);\n      session.statusChanged.connect(this._onStatusChanged, this);\n    }\n\n    /**\n     * Handle a status on a kernel.\n     */\n    private _onStatusChanged(session: IClientSession) {\n      if (this.isDisposed) {\n        return;\n      }\n      let status = session.status;\n      this.toggleClass(TOOLBAR_IDLE_CLASS, status === 'idle');\n      this.toggleClass(TOOLBAR_BUSY_CLASS, status !== 'idle');\n      let title = 'Kernel ' + status[0].toUpperCase() + status.slice(1);\n      this.node.title = title;\n    }\n  }\n}\n"]}