{"version":3,"file":"commandlinker.js","sourceRoot":"","sources":["../../../../apputils/src/commandlinker.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { JSONExt, JSONObject } from '@phosphor/coreutils';\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport { ElementDataset } from '@phosphor/virtualdom';\n\n/**\n * The command data attribute added to nodes that are connected.\n */\nconst COMMAND_ATTR = 'commandlinker-command';\n\n/**\n * The args data attribute added to nodes that are connected.\n */\nconst ARGS_ATTR = 'commandlinker-args';\n\n/**\n * A static class that provides helper methods to generate clickable nodes that\n * execute registered commands with pre-populated arguments.\n */\nexport class CommandLinker implements IDisposable {\n  /**\n   * Instantiate a new command linker.\n   */\n  constructor(options: CommandLinker.IOptions) {\n    this._commands = options.commands;\n    document.body.addEventListener('click', this);\n  }\n\n  /**\n   * Test whether the linker is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the linker.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    document.body.removeEventListener('click', this);\n  }\n\n  /**\n   * Connect a command/argument pair to a given node so that when it is clicked,\n   * the command will execute.\n   *\n   * @param node - The node being connected.\n   *\n   * @param command - The command ID to execute upon click.\n   *\n   * @param args - The arguments with which to invoke the command.\n   *\n   * @returns The same node that was passed in, after it has been connected.\n   *\n   * #### Notes\n   * Only `click` events will execute the command on a connected node. So, there\n   * are two considerations that are relevant:\n   * 1. If a node is connected, the default click action will be prevented.\n   * 2. The `HTMLElement` passed in should be clickable.\n   */\n  connectNode(\n    node: HTMLElement,\n    command: string,\n    args?: JSONObject\n  ): HTMLElement {\n    node.setAttribute(`data-${COMMAND_ATTR}`, command);\n    if (args !== void 0) {\n      node.setAttribute(`data-${ARGS_ATTR}`, JSON.stringify(args));\n    }\n    return node;\n  }\n\n  /**\n   * Disconnect a node that has been connected to execute a command on click.\n   *\n   * @param node - The node being disconnected.\n   *\n   * @returns The same node that was passed in, after it has been disconnected.\n   *\n   * #### Notes\n   * This method is safe to call multiple times and is safe to call on nodes\n   * that were never connected.\n   *\n   * This method can be called on rendered virtual DOM nodes that were populated\n   * using the `populateVNodeDataset` method in order to disconnect them from\n   * executing their command/argument pair.\n   */\n  disconnectNode(node: HTMLElement): HTMLElement {\n    node.removeAttribute(`data-${COMMAND_ATTR}`);\n    node.removeAttribute(`data-${ARGS_ATTR}`);\n    return node;\n  }\n\n  /**\n   * Handle the DOM events for the command linker helper class.\n   *\n   * @param event - The DOM event sent to the class.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'click':\n        this._evtClick(event as MouseEvent);\n        break;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Populate the `dataset` attribute within the collection of attributes used\n   * to instantiate a virtual DOM node with the values necessary for its\n   * rendered DOM node to respond to clicks by executing a command/argument\n   * pair.\n   *\n   * @param command - The command ID to execute upon click.\n   *\n   * @param args - The arguments with which to invoke the command.\n   *\n   * @returns A `dataset` collection for use within virtual node attributes.\n   *\n   * #### Notes\n   * The return value can be used on its own as the value for the `dataset`\n   * attribute of a virtual element, or it can be added to an existing `dataset`\n   * as in the example below.\n   *\n   * #### Example\n   * ```typescript\n   * let command = 'some:command-id';\n   * let args = { alpha: 'beta' };\n   * let anchor = h.a({\n   *   className: 'some-class',\n   *   dataset: {\n   *     foo: '1',\n   *     bar: '2',\n   *     ../...linker.populateVNodeDataset(command, args)\n   *   }\n   * }, 'some text');\n   * ```\n   */\n  populateVNodeDataset(command: string, args?: JSONObject): ElementDataset {\n    let dataset: ElementDataset;\n    if (args !== void 0) {\n      dataset = { [ARGS_ATTR]: JSON.stringify(args), [COMMAND_ATTR]: command };\n    } else {\n      dataset = { [COMMAND_ATTR]: command };\n    }\n    return dataset;\n  }\n\n  /**\n   * The global click handler that deploys commands/argument pairs that are\n   * attached to the node being clicked.\n   */\n  private _evtClick(event: MouseEvent): void {\n    let target = event.target as HTMLElement;\n    while (target && target.parentElement) {\n      if (target.hasAttribute(`data-${COMMAND_ATTR}`)) {\n        event.preventDefault();\n        let command = target.getAttribute(`data-${COMMAND_ATTR}`);\n        if (!command) {\n          return;\n        }\n        let argsValue = target.getAttribute(`data-${ARGS_ATTR}`);\n        let args = JSONExt.emptyObject;\n        if (argsValue) {\n          args = JSON.parse(argsValue);\n        }\n        this._commands.execute(command, args);\n        return;\n      }\n      target = target.parentElement;\n    }\n  }\n\n  private _commands: CommandRegistry;\n  private _isDisposed = false;\n}\n\n/**\n * A namespace for command linker statics.\n */\nexport namespace CommandLinker {\n  /**\n   * The instantiation options for a command linker.\n   */\n  export interface IOptions {\n    /**\n     * The command registry instance that all linked commands will use.\n     */\n    commands: CommandRegistry;\n  }\n}\n"]}