"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
const sanitize_html_1 = __importDefault(require("sanitize-html"));
/**
 * A class to sanitize HTML strings.
 */
class Sanitizer {
    constructor() {
        this._options = {
            allowedTags: sanitize_html_1.default.defaults.allowedTags.concat('h1', 'h2', 'img', 'span', 'audio', 'video', 'del', 'kbd', 'sup', 'sub', 'colspan', 'rowspan', 'input'),
            allowedAttributes: {
                // Allow the "rel" attribute for <a> tags.
                a: sanitize_html_1.default.defaults.allowedAttributes['a'].concat('rel'),
                // Allow the "src" attribute for <img> tags.
                img: ['src', 'height', 'width', 'alt'],
                // Allow "type", "disabled", and "checked" attributes for <input> tags.
                input: ['type', 'disabled', 'checked'],
                // Allow "class" attribute for <code> tags.
                code: ['class'],
                // Allow "class" attribute for <span> tags.
                span: ['class'],
                // Allow "class" attribute for <div> tags.
                div: ['class'],
                // Allow "class" attribute for <p> tags.
                p: ['class'],
                // Allow "class" attribute for <pre> tags.
                pre: ['class'],
                // Allow the "src" attribute for <audio> tags.
                audio: ['src', 'autoplay', 'loop', 'muted', 'controls'],
                // Allow the "src" attribute for <video> tags.
                video: ['src', 'height', 'width', 'autoplay', 'loop', 'muted', 'controls']
            },
            transformTags: {
                // Set the "rel" attribute for <a> tags to "nofollow".
                a: sanitize_html_1.default.simpleTransform('a', { rel: 'nofollow' }),
                // Set the "disabled" attribute for <input> tags.
                input: sanitize_html_1.default.simpleTransform('input', { disabled: 'disabled' })
            },
            allowedSchemesByTag: {
                // Allow 'attachment:' img src (used for markdown cell attachments).
                img: sanitize_html_1.default.defaults.allowedSchemes.concat(['attachment'])
            }
        };
    }
    /**
     * Sanitize an HTML string.
     *
     * @param dirty - The dirty text.
     *
     * @param options - The optional sanitization options.
     *
     * @returns The sanitized string.
     */
    sanitize(dirty, options) {
        return sanitize_html_1.default(dirty, Object.assign({}, this._options, (options || {})));
    }
}
/**
 * The default instance of an `ISanitizer` meant for use by user code.
 */
exports.defaultSanitizer = new Sanitizer();
