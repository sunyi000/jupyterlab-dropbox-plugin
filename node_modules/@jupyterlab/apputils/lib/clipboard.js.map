{"version":3,"file":"clipboard.js","sourceRoot":"","sources":["../../../../apputils/src/clipboard.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAA+C;AAE/C;;GAEG;AACH,IAAiB,SAAS,CA2EzB;AA3ED,WAAiB,SAAS;IACxB;;OAEG;IACH;QACE,OAAO,OAAO,CAAC,QAAQ,CAAC;IAC1B,CAAC;IAFe,qBAAW,cAE1B,CAAA;IAED;;OAEG;IACH,qBAA4B,KAAe;QACzC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC3B,CAAC;IAFe,qBAAW,cAE1B,CAAA;IAED;;;;;OAKG;IACH,sBAA6B,IAAY;QACvC,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QACzB,IAAI,OAAO,GAAG,CAAC,KAAqB,EAAE,EAAE;YACtC,IAAI,IAAI,GAAG,KAAK,CAAC,aAAa,IAAK,MAAc,CAAC,aAAa,CAAC;YAChE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC3B,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACvC,aAAa,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAVe,sBAAY,eAU3B,CAAA;IAED;;;;;;;;;;OAUG;IACH,uBACE,IAAiB,EACjB,OAAuB,MAAM;QAE7B,qCAAqC;QAErC,0BAA0B;QAC1B,IAAI,GAAG,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QAEhC,8BAA8B;QAC9B,IAAI,WAAW,GAAU,EAAE,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;YAClD,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;SACjD;QAED,2BAA2B;QAC3B,IAAI,KAAK,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACnC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC/B,GAAG,CAAC,eAAe,EAAE,CAAC;QACtB,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEpB,uBAAuB;QACvB,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAE3B,kCAAkC;QAClC,GAAG,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QAC5B,GAAG,CAAC,eAAe,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;YACtD,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9B;IACH,CAAC;IA9Be,uBAAa,gBA8B5B,CAAA;AACH,CAAC,EA3EgB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QA2EzB;AAED;;GAEG;AACH,IAAU,OAAO,CAKhB;AALD,WAAU,OAAO;IACf;;OAEG;IACQ,gBAAQ,GAAG,IAAI,oBAAQ,EAAE,CAAC;AACvC,CAAC,EALS,OAAO,KAAP,OAAO,QAKhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { MimeData } from '@phosphor/coreutils';\n\n/**\n * The clipboard interface.\n */\nexport namespace Clipboard {\n  /**\n   * Get the application clipboard instance.\n   */\n  export function getInstance(): MimeData {\n    return Private.instance;\n  }\n\n  /**\n   * Set the application clipboard instance.\n   */\n  export function setInstance(value: MimeData): void {\n    Private.instance = value;\n  }\n\n  /**\n   * Copy text to the system clipboard.\n   *\n   * #### Notes\n   * This can only be called in response to a user input event.\n   */\n  export function copyToSystem(text: string): void {\n    let node = document.body;\n    let handler = (event: ClipboardEvent) => {\n      let data = event.clipboardData || (window as any).clipboardData;\n      data.setData('text', text);\n      event.preventDefault();\n      node.removeEventListener('copy', handler);\n    };\n    node.addEventListener('copy', handler);\n    generateEvent(node);\n  }\n\n  /**\n   * Generate a clipboard event on a node.\n   *\n   * @param node - The element on which to generate the event.\n   *\n   * @param type - The type of event to generate.\n   *   `'paste'` events cannot be programmatically generated.\n   *\n   * #### Notes\n   * This can only be called in response to a user input event.\n   */\n  export function generateEvent(\n    node: HTMLElement,\n    type: 'copy' | 'cut' = 'copy'\n  ): void {\n    // http://stackoverflow.com/a/5210367\n\n    // Identify selected text.\n    let sel = window.getSelection();\n\n    // Save the current selection.\n    let savedRanges: any[] = [];\n    for (let i = 0, len = sel.rangeCount; i < len; ++i) {\n      savedRanges[i] = sel.getRangeAt(i).cloneRange();\n    }\n\n    // Select the node content.\n    let range = document.createRange();\n    range.selectNodeContents(node);\n    sel.removeAllRanges();\n    sel.addRange(range);\n\n    // Execute the command.\n    document.execCommand(type);\n\n    // Restore the previous selection.\n    sel = window.getSelection();\n    sel.removeAllRanges();\n    for (let i = 0, len = savedRanges.length; i < len; ++i) {\n      sel.addRange(savedRanges[i]);\n    }\n  }\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * The application clipboard instance.\n   */\n  export let instance = new MimeData();\n}\n"]}