{"version":3,"file":"thememanager.js","sourceRoot":"","sources":["../../../../apputils/src/thememanager.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,qDAA+E;AAE/E,mDAA2C;AAE3C,mDAA4C;AAE5C,qDAAuE;AAIvE,mDAAsD;AAEtD,qCAA8C;AAI9C,oBAAoB;AACpB;;GAEG;AACU,QAAA,aAAa,GAAG,IAAI,iBAAK,CACpC,oCAAoC,CACrC,CAAC;AAQF;;GAEG;AACH,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAE5B;;GAEG;AACH,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAE7B;;GAEG;AACH;IACE;;OAEG;IACH,YAAY,OAA8B;QA0NlC,aAAQ,GAAkB,IAAI,CAAC;QAE/B,WAAM,GAAsB,EAAE,CAAC;QAC/B,iBAAY,GAAyB,IAAI,CAAC;QAC1C,aAAQ,GAAG,CAAC,CAAC;QACb,cAAS,GAAgC,EAAE,CAAC;QAG5C,YAAO,GAA2C,EAAE,CAAC;QACrD,kBAAa,GAAG,IAAI,kBAAM,CAA6B,IAAI,CAAC,CAAC;QAlOnE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;QAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAElC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACjC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YACzD,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,IAAY;QAClB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,MAAM,IAAI,GAAG,kBAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAE1B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAE5C,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACtC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE;gBACjC,OAAO,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;gBAClC,MAAM,CAAC,8BAA8B,IAAI,EAAE,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAChC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,QAAQ,CAAC,KAA0B;QACjC,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;QACvB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAE5B,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,gCAAgC,IAAI,EAAE,CAAC,CAAC;SACzD;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAErB,OAAO,IAAI,+BAAkB,CAAC,GAAG,EAAE;YACjC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAY;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;IACpC,CAAC;IAED;;OAEG;IACK,aAAa;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAEhC,4CAA4C;QAC5C,IAAI,OAAO,EAAE;YACX,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAC7B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;SACnB;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAW,CAAC;QAEpD,mEAAmE;QACnE,uEAAuE;QACvE,8DAA8D;QAC9D,IAAI,WAAW,EAAE;YACf,WAAW;iBACR,IAAI,CAAC,GAAG,EAAE;gBACT,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC,CAAC;iBACD,KAAK,CAAC,GAAG,EAAE;gBACV,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;YACL,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,OAAO;SACR;QAED,iCAAiC;QACjC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5D,2CAA2C;QAC3C,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC3C,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;YACvB,OAAO;SACR;QAED,8CAA8C;QAC9C,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,iBAAiB,EAAE;YACvC,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAW,CAAC;YAErD,6CAA6C;YAC7C,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBACrB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,KAAK,gBAAgB,QAAQ,UAAU,CAAC,CAAC;gBACxE,OAAO;aACR;YAED,OAAO,CAAC,IAAI,CAAC,wBAAwB,KAAK,mBAAmB,QAAQ,GAAG,CAAC,CAAC;YAC1E,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC9C,OAAO;SACR;QAED,2DAA2D;QAC3D,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YACrC,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACK,UAAU,CAAC,KAAa;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAEnC,8CAA8C;QAC9C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAEjB,sCAAsC;QACtC,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAEnE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;aAC5C,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,MAAM,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBACtB,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,OAAO;gBACjB,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,MAAM,CAAC,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACtB,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACK,QAAQ,CAAC,MAAW;QAC1B,mBAAU,CAAC;YACT,KAAK,EAAE,qBAAqB;YAC5B,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC;YACpB,OAAO,EAAE,CAAC,eAAM,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SAC5C,CAAC,CAAC;IACL,CAAC;CAaF;AAxOD,oCAwOC;AAoED;;GAEG;AACH,IAAU,OAAO,CAQhB;AARD,WAAU,OAAO;IACf;;OAEG;IACH,gBAAuB,MAAc;QACnC,gBAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAC;QAChC,MAAM,CAAC,GAAG,EAAE,CAAC;IACf,CAAC;IAHe,cAAM,SAGrB,CAAA;AACH,CAAC,EARS,OAAO,KAAP,OAAO,QAQhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IChangedArgs, ISettingRegistry, URLExt } from '@jupyterlab/coreutils';\n\nimport { each } from '@phosphor/algorithm';\n\nimport { Token } from '@phosphor/coreutils';\n\nimport { DisposableDelegate, IDisposable } from '@phosphor/disposable';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Dialog, showDialog } from './dialog';\n\nimport { ISplashScreen } from './splash';\n\n/* tslint:disable */\n/**\n * The theme manager token.\n */\nexport const IThemeManager = new Token<IThemeManager>(\n  '@jupyterlab/apputils:IThemeManager'\n);\n/* tslint:enable */\n\n/**\n * An interface for a theme manager.\n */\nexport interface IThemeManager extends ThemeManager {}\n\n/**\n * The number of milliseconds between theme loading attempts.\n */\nconst REQUEST_INTERVAL = 75;\n\n/**\n * The number of times to attempt to load a theme before giving up.\n */\nconst REQUEST_THRESHOLD = 20;\n\n/**\n * A class that provides theme management.\n */\nexport class ThemeManager {\n  /**\n   * Construct a new theme manager.\n   */\n  constructor(options: ThemeManager.IOptions) {\n    const { host, key, splash, url } = options;\n    const registry = options.settings;\n\n    this._base = url;\n    this._host = host;\n    this._splash = splash;\n\n    registry.load(key).then(settings => {\n      this._settings = settings;\n      this._settings.changed.connect(this._loadSettings, this);\n      this._loadSettings();\n    });\n  }\n\n  /**\n   * Get the name of the current theme.\n   */\n  get theme(): string | null {\n    return this._current;\n  }\n\n  /**\n   * The names of the registered themes.\n   */\n  get themes(): ReadonlyArray<string> {\n    return Object.keys(this._themes);\n  }\n\n  /**\n   * A signal fired when the application theme changes.\n   */\n  get themeChanged(): ISignal<this, IChangedArgs<string>> {\n    return this._themeChanged;\n  }\n\n  /**\n   * Load a theme CSS file by path.\n   *\n   * @param path - The path of the file to load.\n   */\n  loadCSS(path: string): Promise<void> {\n    const base = this._base;\n    const href = URLExt.isLocal(path) ? URLExt.join(base, path) : path;\n    const links = this._links;\n\n    return new Promise((resolve, reject) => {\n      const link = document.createElement('link');\n\n      link.setAttribute('rel', 'stylesheet');\n      link.setAttribute('type', 'text/css');\n      link.setAttribute('href', href);\n      link.addEventListener('load', () => {\n        resolve(undefined);\n      });\n      link.addEventListener('error', () => {\n        reject(`Stylesheet failed to load: ${href}`);\n      });\n\n      document.body.appendChild(link);\n      links.push(link);\n    });\n  }\n\n  /**\n   * Register a theme with the theme manager.\n   *\n   * @param theme - The theme to register.\n   *\n   * @returns A disposable that can be used to unregister the theme.\n   */\n  register(theme: ThemeManager.ITheme): IDisposable {\n    const { name } = theme;\n    const themes = this._themes;\n\n    if (themes[name]) {\n      throw new Error(`Theme already registered for ${name}`);\n    }\n\n    themes[name] = theme;\n\n    return new DisposableDelegate(() => {\n      delete themes[name];\n    });\n  }\n\n  /**\n   * Set the current theme.\n   */\n  setTheme(name: string): Promise<void> {\n    return this._settings.set('theme', name);\n  }\n\n  /**\n   * Test whether a given theme is light.\n   */\n  isLight(name: string): boolean {\n    return this._themes[name].isLight;\n  }\n\n  /**\n   * Handle the current settings.\n   */\n  private _loadSettings(): void {\n    const outstanding = this._outstanding;\n    const pending = this._pending;\n    const requests = this._requests;\n\n    // If another request is pending, cancel it.\n    if (pending) {\n      window.clearTimeout(pending);\n      this._pending = 0;\n    }\n\n    const settings = this._settings;\n    const themes = this._themes;\n    const theme = settings.composite['theme'] as string;\n\n    // If another promise is outstanding, wait until it finishes before\n    // attempting to load the settings. Because outstanding promises cannot\n    // be aborted, the order in which they occur must be enforced.\n    if (outstanding) {\n      outstanding\n        .then(() => {\n          this._loadSettings();\n        })\n        .catch(() => {\n          this._loadSettings();\n        });\n      this._outstanding = null;\n      return;\n    }\n\n    // Increment the request counter.\n    requests[theme] = requests[theme] ? requests[theme] + 1 : 1;\n\n    // If the theme exists, load it right away.\n    if (themes[theme]) {\n      this._outstanding = this._loadTheme(theme);\n      delete requests[theme];\n      return;\n    }\n\n    // If the request has taken too long, give up.\n    if (requests[theme] > REQUEST_THRESHOLD) {\n      const fallback = settings.default('theme') as string;\n\n      // Stop tracking the requests for this theme.\n      delete requests[theme];\n\n      if (!themes[fallback]) {\n        this._onError(`Neither theme ${theme} nor default ${fallback} loaded.`);\n        return;\n      }\n\n      console.warn(`Could not load theme ${theme}, using default ${fallback}.`);\n      this._outstanding = this._loadTheme(fallback);\n      return;\n    }\n\n    // If the theme does not yet exist, attempt to wait for it.\n    this._pending = window.setTimeout(() => {\n      this._loadSettings();\n    }, REQUEST_INTERVAL);\n  }\n\n  /**\n   * Load the theme.\n   *\n   * #### Notes\n   * This method assumes that the `theme` exists.\n   */\n  private _loadTheme(theme: string): Promise<void> {\n    const current = this._current;\n    const links = this._links;\n    const themes = this._themes;\n    const splash = this._splash.show();\n\n    // Unload any CSS files that have been loaded.\n    links.forEach(link => {\n      if (link.parentElement) {\n        link.parentElement.removeChild(link);\n      }\n    });\n    links.length = 0;\n\n    // Unload the previously loaded theme.\n    const old = current ? themes[current].unload() : Promise.resolve();\n\n    return Promise.all([old, themes[theme].load()])\n      .then(() => {\n        this._current = theme;\n        Private.fitAll(this._host);\n        splash.dispose();\n        this._themeChanged.emit({\n          name: 'theme',\n          oldValue: current,\n          newValue: theme\n        });\n      })\n      .catch(reason => {\n        this._onError(reason);\n        splash.dispose();\n      });\n  }\n\n  /**\n   * Handle a theme error.\n   */\n  private _onError(reason: any): void {\n    showDialog({\n      title: 'Error Loading Theme',\n      body: String(reason),\n      buttons: [Dialog.okButton({ label: 'OK' })]\n    });\n  }\n\n  private _base: string;\n  private _current: string | null = null;\n  private _host: Widget;\n  private _links: HTMLLinkElement[] = [];\n  private _outstanding: Promise<void> | null = null;\n  private _pending = 0;\n  private _requests: { [theme: string]: number } = {};\n  private _settings: ISettingRegistry.ISettings;\n  private _splash: ISplashScreen;\n  private _themes: { [key: string]: ThemeManager.ITheme } = {};\n  private _themeChanged = new Signal<this, IChangedArgs<string>>(this);\n}\n\n/**\n * A namespace for `ThemeManager` statics.\n */\nexport namespace ThemeManager {\n  /**\n   * The options used to create a theme manager.\n   */\n  export interface IOptions {\n    /**\n     * The host widget for the theme manager.\n     */\n    host: Widget;\n\n    /**\n     * The setting registry key that holds theme setting data.\n     */\n    key: string;\n\n    /**\n     * The settings registry.\n     */\n    settings: ISettingRegistry;\n\n    /**\n     * The splash screen to show when loading themes.\n     */\n    splash: ISplashScreen;\n\n    /**\n     * The url for local theme loading.\n     */\n    url: string;\n  }\n\n  /**\n   * An interface for a theme.\n   */\n  export interface ITheme {\n    /**\n     * The display name of the theme.\n     */\n    name: string;\n\n    /**\n     * Whether the theme is light or dark. Downstream authors\n     * of extensions can use this information to customize their\n     * UI depending upon the current theme.\n     */\n    isLight: boolean;\n\n    /**\n     * Load the theme.\n     *\n     * @returns A promise that resolves when the theme has loaded.\n     */\n    load(): Promise<void>;\n\n    /**\n     * Unload the theme.\n     *\n     * @returns A promise that resolves when the theme has unloaded.\n     */\n    unload(): Promise<void>;\n  }\n}\n\n/**\n * A namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Fit a widget and all of its children, recursively.\n   */\n  export function fitAll(widget: Widget): void {\n    each(widget.children(), fitAll);\n    widget.fit();\n  }\n}\n"]}