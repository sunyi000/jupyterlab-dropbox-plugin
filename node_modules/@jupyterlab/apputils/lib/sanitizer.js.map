{"version":3,"file":"sanitizer.js","sourceRoot":"","sources":["../../../../apputils/src/sanitizer.ts"],"names":[],"mappings":";;;;;AAAA,0CAA0C;AAC1C,2DAA2D;AAC3D,kEAAqC;AAmCrC;;GAEG;AACH;IAAA;QAcU,aAAQ,GAAsB;YACpC,WAAW,EAAE,uBAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC/C,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,MAAM,EACN,OAAO,EACP,OAAO,EACP,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,SAAS,EACT,SAAS,EACT,OAAO,CACR;YACD,iBAAiB,EAAE;gBACjB,0CAA0C;gBAC1C,CAAC,EAAE,uBAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;gBACzD,4CAA4C;gBAC5C,GAAG,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;gBACtC,uEAAuE;gBACvE,KAAK,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC;gBACtC,2CAA2C;gBAC3C,IAAI,EAAE,CAAC,OAAO,CAAC;gBACf,2CAA2C;gBAC3C,IAAI,EAAE,CAAC,OAAO,CAAC;gBACf,0CAA0C;gBAC1C,GAAG,EAAE,CAAC,OAAO,CAAC;gBACd,wCAAwC;gBACxC,CAAC,EAAE,CAAC,OAAO,CAAC;gBACZ,0CAA0C;gBAC1C,GAAG,EAAE,CAAC,OAAO,CAAC;gBACd,8CAA8C;gBAC9C,KAAK,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC;gBACvD,8CAA8C;gBAC9C,KAAK,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC;aAC3E;YACD,aAAa,EAAE;gBACb,sDAAsD;gBACtD,CAAC,EAAE,uBAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;gBACrD,iDAAiD;gBACjD,KAAK,EAAE,uBAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;aACnE;YACD,mBAAmB,EAAE;gBACnB,oEAAoE;gBACpE,GAAG,EAAE,uBAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC;aAC7D;SACF,CAAC;IACJ,CAAC;IA9DC;;;;;;;;OAQG;IACH,QAAQ,CAAC,KAAa,EAAE,OAA6B;QACnD,OAAO,uBAAQ,CAAC,KAAK,oBAAO,IAAI,CAAC,QAAQ,EAAK,CAAC,OAAO,IAAI,EAAE,CAAC,EAAG,CAAC;IACnE,CAAC;CAmDF;AAED;;GAEG;AACU,QAAA,gBAAgB,GAAe,IAAI,SAAS,EAAE,CAAC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport sanitize from 'sanitize-html';\n\nexport interface ISanitizer {\n  /**\n   * Sanitize an HTML string.\n   *\n   * @param dirty - The dirty text.\n   *\n   * @param options - The optional sanitization options.\n   *\n   * @returns The sanitized string.\n   */\n  sanitize(dirty: string, options?: ISanitizer.IOptions): string;\n}\n\n/**\n * The namespace for `ISanitizer` related interfaces.\n */\nexport namespace ISanitizer {\n  /**\n   * The options used to sanitize.\n   */\n  export interface IOptions {\n    /**\n     * The allowed tags.\n     */\n    allowedTags?: string[];\n\n    /**\n     * The allowed attributes for a given tag.\n     */\n    allowedAttributes?: { [key: string]: string[] };\n  }\n}\n\n/**\n * A class to sanitize HTML strings.\n */\nclass Sanitizer implements ISanitizer {\n  /**\n   * Sanitize an HTML string.\n   *\n   * @param dirty - The dirty text.\n   *\n   * @param options - The optional sanitization options.\n   *\n   * @returns The sanitized string.\n   */\n  sanitize(dirty: string, options?: ISanitizer.IOptions): string {\n    return sanitize(dirty, { ...this._options, ...(options || {}) });\n  }\n\n  private _options: sanitize.IOptions = {\n    allowedTags: sanitize.defaults.allowedTags.concat(\n      'h1',\n      'h2',\n      'img',\n      'span',\n      'audio',\n      'video',\n      'del',\n      'kbd',\n      'sup',\n      'sub',\n      'colspan',\n      'rowspan',\n      'input'\n    ),\n    allowedAttributes: {\n      // Allow the \"rel\" attribute for <a> tags.\n      a: sanitize.defaults.allowedAttributes['a'].concat('rel'),\n      // Allow the \"src\" attribute for <img> tags.\n      img: ['src', 'height', 'width', 'alt'],\n      // Allow \"type\", \"disabled\", and \"checked\" attributes for <input> tags.\n      input: ['type', 'disabled', 'checked'],\n      // Allow \"class\" attribute for <code> tags.\n      code: ['class'],\n      // Allow \"class\" attribute for <span> tags.\n      span: ['class'],\n      // Allow \"class\" attribute for <div> tags.\n      div: ['class'],\n      // Allow \"class\" attribute for <p> tags.\n      p: ['class'],\n      // Allow \"class\" attribute for <pre> tags.\n      pre: ['class'],\n      // Allow the \"src\" attribute for <audio> tags.\n      audio: ['src', 'autoplay', 'loop', 'muted', 'controls'],\n      // Allow the \"src\" attribute for <video> tags.\n      video: ['src', 'height', 'width', 'autoplay', 'loop', 'muted', 'controls']\n    },\n    transformTags: {\n      // Set the \"rel\" attribute for <a> tags to \"nofollow\".\n      a: sanitize.simpleTransform('a', { rel: 'nofollow' }),\n      // Set the \"disabled\" attribute for <input> tags.\n      input: sanitize.simpleTransform('input', { disabled: 'disabled' })\n    },\n    allowedSchemesByTag: {\n      // Allow 'attachment:' img src (used for markdown cell attachments).\n      img: sanitize.defaults.allowedSchemes.concat(['attachment'])\n    }\n  };\n}\n\n/**\n * The default instance of an `ISanitizer` meant for use by user code.\n */\nexport const defaultSanitizer: ISanitizer = new Sanitizer();\n"]}