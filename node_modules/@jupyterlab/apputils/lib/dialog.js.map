{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../../../apputils/src/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ArrayExt, each, map, toArray } from '@phosphor/algorithm';\n\nimport { PromiseDelegate } from '@phosphor/coreutils';\n\nimport { Message, MessageLoop } from '@phosphor/messaging';\n\nimport { PanelLayout, Panel, Widget } from '@phosphor/widgets';\n\nimport * as React from 'react';\n\nimport { ReactElementWidget } from './vdom';\n\nimport { Styling } from './styling';\n\n/**\n * Create and show a dialog.\n *\n * @param options - The dialog setup options.\n *\n * @returns A promise that resolves with whether the dialog was accepted.\n */\nexport function showDialog<T>(\n  options: Partial<Dialog.IOptions<T>> = {}\n): Promise<Dialog.IResult<T>> {\n  let dialog = new Dialog(options);\n  return dialog.launch();\n}\n\n/**\n * Show an error message dialog.\n *\n * @param title - The title of the dialog box.\n *\n * @param error - the error to show in the dialog body (either a string\n *   or an object with a string `message` property).\n */\nexport function showErrorMessage(title: string, error: any): Promise<void> {\n  console.warn('Showing error:', error);\n\n  return showDialog({\n    title: title,\n    body: error.message || title,\n    buttons: [Dialog.okButton({ label: 'DISMISS' })]\n  }).then(() => {\n    /* no-op */\n  });\n}\n\n/**\n * A modal dialog widget.\n */\nexport class Dialog<T> extends Widget {\n  /**\n   * Create a dialog panel instance.\n   *\n   * @param options - The dialog setup options.\n   */\n  constructor(options: Partial<Dialog.IOptions<T>> = {}) {\n    super();\n    this.addClass('jp-Dialog');\n    let normalized = Private.handleOptions(options);\n    let renderer = normalized.renderer;\n\n    this._host = normalized.host;\n    this._defaultButton = normalized.defaultButton;\n    this._buttons = normalized.buttons;\n    this._buttonNodes = toArray(\n      map(this._buttons, button => {\n        return renderer.createButtonNode(button);\n      })\n    );\n\n    let layout = (this.layout = new PanelLayout());\n    let content = new Panel();\n    content.addClass('jp-Dialog-content');\n    layout.addWidget(content);\n\n    this._body = normalized.body;\n\n    let header = renderer.createHeader(normalized.title);\n    let body = renderer.createBody(normalized.body);\n    let footer = renderer.createFooter(this._buttonNodes);\n    content.addWidget(header);\n    content.addWidget(body);\n    content.addWidget(footer);\n\n    this._primary = this._buttonNodes[this._defaultButton];\n    this._focusNodeSelector = options.focusNodeSelector;\n  }\n\n  /**\n   * Dispose of the resources used by the dialog.\n   */\n  dispose(): void {\n    const promise = this._promise;\n    if (promise) {\n      this._promise = null;\n      promise.reject(void 0);\n      ArrayExt.removeFirstOf(Private.launchQueue, promise.promise);\n    }\n    super.dispose();\n  }\n\n  /**\n   * Launch the dialog as a modal window.\n   *\n   * @returns a promise that resolves with the result of the dialog.\n   */\n  launch(): Promise<Dialog.IResult<T>> {\n    // Return the existing dialog if already open.\n    if (this._promise) {\n      return this._promise.promise;\n    }\n    const promise = (this._promise = new PromiseDelegate<Dialog.IResult<T>>());\n    let promises = Promise.all(Private.launchQueue);\n    Private.launchQueue.push(this._promise.promise);\n    return promises.then(() => {\n      Widget.attach(this, this._host);\n      return promise.promise;\n    });\n  }\n\n  /**\n   * Resolve the current dialog.\n   *\n   * @param index - An optional index to the button to resolve.\n   *\n   * #### Notes\n   * Will default to the defaultIndex.\n   * Will resolve the current `show()` with the button value.\n   * Will be a no-op if the dialog is not shown.\n   */\n  resolve(index?: number): void {\n    if (!this._promise) {\n      return;\n    }\n    if (index === undefined) {\n      index = this._defaultButton;\n    }\n    this._resolve(this._buttons[index]);\n  }\n\n  /**\n   * Reject the current dialog with a default reject value.\n   *\n   * #### Notes\n   * Will be a no-op if the dialog is not shown.\n   */\n  reject(): void {\n    if (!this._promise) {\n      return;\n    }\n    this._resolve(Dialog.cancelButton());\n  }\n\n  /**\n   * Handle the DOM events for the directory listing.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'keydown':\n        this._evtKeydown(event as KeyboardEvent);\n        break;\n      case 'click':\n        this._evtClick(event as MouseEvent);\n        break;\n      case 'focus':\n        this._evtFocus(event as FocusEvent);\n        break;\n      case 'contextmenu':\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   *  A message handler invoked on an `'after-attach'` message.\n   */\n  protected onAfterAttach(msg: Message): void {\n    let node = this.node;\n    node.addEventListener('keydown', this, true);\n    node.addEventListener('contextmenu', this, true);\n    node.addEventListener('click', this, true);\n    document.addEventListener('focus', this, true);\n    this._first = Private.findFirstFocusable(this.node);\n    this._original = document.activeElement as HTMLElement;\n    if (this._focusNodeSelector) {\n      let body = this.node.querySelector('.jp-Dialog-body');\n      let el = body.querySelector(this._focusNodeSelector);\n\n      if (el) {\n        this._primary = el as HTMLElement;\n      }\n    }\n    this._primary.focus();\n  }\n\n  /**\n   *  A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    let node = this.node;\n    node.removeEventListener('keydown', this, true);\n    node.removeEventListener('contextmenu', this, true);\n    node.removeEventListener('click', this, true);\n    document.removeEventListener('focus', this, true);\n    this._original.focus();\n  }\n\n  /**\n   * A message handler invoked on a `'close-request'` message.\n   */\n  protected onCloseRequest(msg: Message): void {\n    if (this._promise) {\n      this.reject();\n    }\n    super.onCloseRequest(msg);\n  }\n\n  /**\n   * Handle the `'click'` event for a dialog button.\n   *\n   * @param event - The DOM event sent to the widget\n   */\n  protected _evtClick(event: MouseEvent): void {\n    let content = this.node.getElementsByClassName(\n      'jp-Dialog-content'\n    )[0] as HTMLElement;\n    if (!content.contains(event.target as HTMLElement)) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n    for (let buttonNode of this._buttonNodes) {\n      if (buttonNode.contains(event.target as HTMLElement)) {\n        let index = this._buttonNodes.indexOf(buttonNode);\n        this.resolve(index);\n      }\n    }\n  }\n\n  /**\n   * Handle the `'keydown'` event for the widget.\n   *\n   * @param event - The DOM event sent to the widget\n   */\n  protected _evtKeydown(event: KeyboardEvent): void {\n    // Check for escape key\n    switch (event.keyCode) {\n      case 27: // Escape.\n        event.stopPropagation();\n        event.preventDefault();\n        this.reject();\n        break;\n      case 9: // Tab.\n        // Handle a tab on the last button.\n        let node = this._buttonNodes[this._buttons.length - 1];\n        if (document.activeElement === node && !event.shiftKey) {\n          event.stopPropagation();\n          event.preventDefault();\n          this._first.focus();\n        }\n        break;\n      case 13: // Enter.\n        event.stopPropagation();\n        event.preventDefault();\n        this.resolve();\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle the `'focus'` event for the widget.\n   *\n   * @param event - The DOM event sent to the widget\n   */\n  protected _evtFocus(event: FocusEvent): void {\n    let target = event.target as HTMLElement;\n    if (!this.node.contains(target as HTMLElement)) {\n      event.stopPropagation();\n      this._buttonNodes[this._defaultButton].focus();\n    }\n  }\n\n  /**\n   * Resolve a button item.\n   */\n  private _resolve(button: Dialog.IButton): void {\n    // Prevent loopback.\n    const promise = this._promise;\n    if (!promise) {\n      this.dispose();\n      return;\n    }\n    this._promise = null;\n    ArrayExt.removeFirstOf(Private.launchQueue, promise.promise);\n    let body = this._body;\n    let value: T | null = null;\n    if (\n      button.accept &&\n      body instanceof Widget &&\n      typeof body.getValue === 'function'\n    ) {\n      value = body.getValue();\n    }\n    this.dispose();\n    promise.resolve({ button, value });\n  }\n\n  private _buttonNodes: ReadonlyArray<HTMLElement>;\n  private _buttons: ReadonlyArray<Dialog.IButton>;\n  private _original: HTMLElement;\n  private _first: HTMLElement;\n  private _primary: HTMLElement;\n  private _promise: PromiseDelegate<Dialog.IResult<T>> | null;\n  private _defaultButton: number;\n  private _host: HTMLElement;\n  private _body: Dialog.BodyType<T>;\n  private _focusNodeSelector = '';\n}\n\n/**\n * The namespace for Dialog class statics.\n */\nexport namespace Dialog {\n  /**\n   * The options used to create a dialog.\n   */\n  export interface IOptions<T> {\n    /**\n     * The top level text for the dialog.  Defaults to an empty string.\n     */\n    title: HeaderType;\n\n    /**\n     * The main body element for the dialog or a message to display.\n     * Defaults to an empty string.\n     *\n     * #### Notes\n     * If a widget is given as the body, it will be disposed after the\n     * dialog is resolved.  If the widget has a `getValue()` method,\n     * the method will be called prior to disposal and the value\n     * will be provided as part of the dialog result.\n     * A string argument will be used as raw `textContent`.\n     * All `input` and `select` nodes will be wrapped and styled.\n     */\n    body: BodyType<T>;\n\n    /**\n     * The host element for the dialog. Defaults to `document.body`.\n     */\n    host: HTMLElement;\n\n    /**\n     * The to buttons to display. Defaults to cancel and accept buttons.\n     */\n    buttons: ReadonlyArray<IButton>;\n\n    /**\n     * The index of the default button.  Defaults to the last button.\n     */\n    defaultButton: number;\n\n    /**\n     * A selector for the primary element that should take focus in the dialog.\n     * Defaults to an empty string, causing the [[defaultButton]] to take\n     * focus.\n     */\n    focusNodeSelector: string;\n\n    /**\n     * An optional renderer for dialog items.  Defaults to a shared\n     * default renderer.\n     */\n    renderer: IRenderer;\n  }\n\n  /**\n   * The options used to make a button item.\n   */\n  export interface IButton {\n    /**\n     * The label for the button.\n     */\n    label: string;\n\n    /**\n     * The icon class for the button.\n     */\n    iconClass: string;\n\n    /**\n     * The icon label for the button.\n     */\n    iconLabel: string;\n\n    /**\n     * The caption for the button.\n     */\n    caption: string;\n\n    /**\n     * The extra class name for the button.\n     */\n    className: string;\n\n    /**\n     * The dialog action to perform when the button is clicked.\n     */\n    accept: boolean;\n\n    /**\n     * The button display type.\n     */\n    displayType: 'default' | 'warn';\n  }\n\n  /**\n   * The options used to create a button.\n   */\n  export type ButtonOptions = Partial<IButton>;\n\n  /**\n   * The header input types.\n   */\n  export type HeaderType = React.ReactElement<any> | string;\n\n  /**\n   * The result of a dialog.\n   */\n  export interface IResult<T> {\n    /**\n     * The button that was pressed.\n     */\n    button: IButton;\n\n    /**\n     * The value retrieved from `.getValue()` if given on the widget.\n     */\n    value: T | null;\n  }\n\n  /**\n   * A widget used as a dialog body.\n   */\n  export interface IBodyWidget<T = string> extends Widget {\n    /**\n     * Get the serialized value of the widget.\n     */\n    getValue?(): T;\n  }\n\n  /**\n   * The body input types.\n   */\n  export type BodyType<T> = IBodyWidget<T> | React.ReactElement<any> | string;\n\n  /**\n   * Create an accept button.\n   */\n  export function okButton(options: ButtonOptions = {}): Readonly<IButton> {\n    options.accept = true;\n    return createButton(options);\n  }\n\n  /**\n   * Create a reject button.\n   */\n  export function cancelButton(options: ButtonOptions = {}): Readonly<IButton> {\n    options.accept = false;\n    return createButton(options);\n  }\n\n  /**\n   * Create a warn button.\n   */\n  export function warnButton(options: ButtonOptions = {}): Readonly<IButton> {\n    options.displayType = 'warn';\n    return createButton(options);\n  }\n\n  /**\n   * Create a button item.\n   */\n  export function createButton(value: Dialog.ButtonOptions): Readonly<IButton> {\n    value.accept = value.accept !== false;\n    let defaultLabel = value.accept ? 'OK' : 'CANCEL';\n    return {\n      label: value.label || defaultLabel,\n      iconClass: value.iconClass || '',\n      iconLabel: value.iconLabel || '',\n      caption: value.caption || '',\n      className: value.className || '',\n      accept: value.accept,\n      displayType: value.displayType || 'default'\n    };\n  }\n\n  /**\n   * A dialog renderer.\n   */\n  export interface IRenderer {\n    /**\n     * Create the header of the dialog.\n     *\n     * @param title - The title of the dialog.\n     *\n     * @returns A widget for the dialog header.\n     */\n    createHeader(title: HeaderType): Widget;\n\n    /**\n     * Create the body of the dialog.\n     *\n     * @param value - The input value for the body.\n     *\n     * @returns A widget for the body.\n     */\n    createBody(body: BodyType<any>): Widget;\n\n    /**\n     * Create the footer of the dialog.\n     *\n     * @param buttons - The button nodes to add to the footer.\n     *\n     * @returns A widget for the footer.\n     */\n    createFooter(buttons: ReadonlyArray<HTMLElement>): Widget;\n\n    /**\n     * Create a button node for the dialog.\n     *\n     * @param button - The button data.\n     *\n     * @returns A node for the button.\n     */\n    createButtonNode(button: IButton): HTMLElement;\n  }\n\n  /**\n   * The default implementation of a dialog renderer.\n   */\n  export class Renderer {\n    /**\n     * Create the header of the dialog.\n     *\n     * @param title - The title of the dialog.\n     *\n     * @returns A widget for the dialog header.\n     */\n    createHeader(title: HeaderType): Widget {\n      let header: Widget;\n      if (typeof title === 'string') {\n        header = new Widget({ node: document.createElement('span') });\n        header.node.textContent = title;\n      } else {\n        header = new ReactElementWidget(title);\n      }\n      header.addClass('jp-Dialog-header');\n      Styling.styleNode(header.node);\n      return header;\n    }\n\n    /**\n     * Create the body of the dialog.\n     *\n     * @param value - The input value for the body.\n     *\n     * @returns A widget for the body.\n     */\n    createBody(value: BodyType<any>): Widget {\n      let body: Widget;\n      if (typeof value === 'string') {\n        body = new Widget({ node: document.createElement('span') });\n        body.node.textContent = value;\n      } else if (value instanceof Widget) {\n        body = value;\n      } else {\n        body = new ReactElementWidget(value);\n        // Immediately update the body even though it has not yet attached in\n        // order to trigger a render of the DOM nodes from the React element.\n        MessageLoop.sendMessage(body, Widget.Msg.UpdateRequest);\n      }\n      body.addClass('jp-Dialog-body');\n      Styling.styleNode(body.node);\n      return body;\n    }\n\n    /**\n     * Create the footer of the dialog.\n     *\n     * @param buttonNodes - The buttons nodes to add to the footer.\n     *\n     * @returns A widget for the footer.\n     */\n    createFooter(buttons: ReadonlyArray<HTMLElement>): Widget {\n      let footer = new Widget();\n      footer.addClass('jp-Dialog-footer');\n      each(buttons, button => {\n        footer.node.appendChild(button);\n      });\n      Styling.styleNode(footer.node);\n      return footer;\n    }\n\n    /**\n     * Create a button node for the dialog.\n     *\n     * @param button - The button data.\n     *\n     * @returns A node for the button.\n     */\n    createButtonNode(button: IButton): HTMLElement {\n      const e = document.createElement('button');\n      e.className = this.createItemClass(button);\n      e.appendChild(this.renderIcon(button));\n      e.appendChild(this.renderLabel(button));\n      return e;\n    }\n\n    /**\n     * Create the class name for the button.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the button.\n     */\n    createItemClass(data: IButton): string {\n      // Setup the initial class name.\n      let name = 'jp-Dialog-button';\n\n      // Add the other state classes.\n      if (data.accept) {\n        name += ' jp-mod-accept';\n      } else {\n        name += ' jp-mod-reject';\n      }\n      if (data.displayType === 'warn') {\n        name += ' jp-mod-warn';\n      }\n\n      // Add the extra class.\n      let extra = data.className;\n      if (extra) {\n        name += ` ${extra}`;\n      }\n\n      // Return the complete class name.\n      return name;\n    }\n\n    /**\n     * Render an icon element for a dialog item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns An HTML element representing the icon.\n     */\n    renderIcon(data: IButton): HTMLElement {\n      const e = document.createElement('div');\n      e.className = this.createIconClass(data);\n      e.appendChild(document.createTextNode(data.iconLabel));\n      return e;\n    }\n\n    /**\n     * Create the class name for the button icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IButton): string {\n      let name = 'jp-Dialog-buttonIcon';\n      let extra = data.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    /**\n     * Render the label element for a button.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns An HTML element representing the item label.\n     */\n    renderLabel(data: IButton): HTMLElement {\n      const e = document.createElement('div');\n      e.className = 'jp-Dialog-buttonLabel';\n      e.title = data.caption;\n      e.appendChild(document.createTextNode(data.label));\n      return e;\n    }\n  }\n\n  /**\n   * The default renderer instance.\n   */\n  export const defaultRenderer = new Renderer();\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * The queue for launching dialogs.\n   */\n  export let launchQueue: Promise<Dialog.IResult<any>>[] = [];\n\n  /**\n   * Handle the input options for a dialog.\n   *\n   * @param options - The input options.\n   *\n   * @returns A new options object with defaults applied.\n   */\n  export function handleOptions<T>(\n    options: Partial<Dialog.IOptions<T>> = {}\n  ): Dialog.IOptions<T> {\n    let buttons = options.buttons || [Dialog.cancelButton(), Dialog.okButton()];\n    let defaultButton = buttons.length - 1;\n    if (options.defaultButton !== undefined) {\n      defaultButton = options.defaultButton;\n    }\n    return {\n      title: options.title || '',\n      body: options.body || '',\n      host: options.host || document.body,\n      buttons,\n      defaultButton,\n      renderer: options.renderer || Dialog.defaultRenderer,\n      focusNodeSelector: options.focusNodeSelector || ''\n    };\n  }\n\n  /**\n   *  Find the first focusable item in the dialog.\n   */\n  export function findFirstFocusable(node: HTMLElement): HTMLElement {\n    let candidateSelectors = [\n      'input',\n      'select',\n      'a[href]',\n      'textarea',\n      'button',\n      '[tabindex]'\n    ].join(',');\n    return node.querySelectorAll(candidateSelectors)[0] as HTMLElement;\n  }\n}\n"]}