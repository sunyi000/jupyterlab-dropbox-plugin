{"version":3,"file":"clientsession.js","sourceRoot":"","sources":["../../../../apputils/src/clientsession.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { PathExt } from '@jupyterlab/coreutils';\n\nimport { UUID } from '@phosphor/coreutils';\n\nimport {\n  Kernel,\n  KernelMessage,\n  ServerConnection,\n  Session\n} from '@jupyterlab/services';\n\nimport { IterableOrArrayLike, each, find } from '@phosphor/algorithm';\n\nimport { PromiseDelegate } from '@phosphor/coreutils';\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport * as React from 'react';\n\nimport { showDialog, Dialog } from './dialog';\n\n/**\n * The interface of client session object.\n *\n * The client session represents the link between\n * a path and its kernel for the duration of the lifetime\n * of the session object.  The session can have no current\n * kernel, and can start a new kernel at any time.\n */\nexport interface IClientSession extends IDisposable {\n  /**\n   * A signal emitted when the session is shut down.\n   */\n  readonly terminated: ISignal<this, void>;\n\n  /**\n   * A signal emitted when the kernel changes.\n   */\n  readonly kernelChanged: ISignal<this, Session.IKernelChangedArgs>;\n\n  /**\n   * A signal emitted when the kernel status changes.\n   */\n  readonly statusChanged: ISignal<this, Kernel.Status>;\n\n  /**\n   * A signal emitted for a kernel messages.\n   */\n  readonly iopubMessage: ISignal<this, KernelMessage.IMessage>;\n\n  /**\n   * A signal emitted for an unhandled kernel message.\n   */\n  readonly unhandledMessage: ISignal<this, KernelMessage.IMessage>;\n\n  /**\n   * A signal emitted when a session property changes.\n   */\n  readonly propertyChanged: ISignal<this, 'path' | 'name' | 'type'>;\n\n  /**\n   * The current kernel associated with the document.\n   */\n  readonly kernel: Kernel.IKernelConnection | null;\n\n  /**\n   * The current path associated with the client session.\n   */\n  readonly path: string;\n\n  /**\n   * The current name associated with the client session.\n   */\n  readonly name: string;\n\n  /**\n   * The type of the client session.\n   */\n  readonly type: string;\n\n  /**\n   * The current status of the client session.\n   */\n  readonly status: Kernel.Status;\n\n  /**\n   * Whether the session is ready.\n   */\n  readonly isReady: boolean;\n\n  /**\n   * A promise that is fulfilled when the session is ready.\n   */\n  readonly ready: Promise<void>;\n\n  /**\n   * The kernel preference.\n   */\n  kernelPreference: IClientSession.IKernelPreference;\n\n  /**\n   * The display name of the kernel.\n   */\n  readonly kernelDisplayName: string;\n\n  /**\n   * Change the current kernel associated with the document.\n   */\n  changeKernel(\n    options: Partial<Kernel.IModel>\n  ): Promise<Kernel.IKernelConnection>;\n\n  /**\n   * Kill the kernel and shutdown the session.\n   *\n   * @returns A promise that resolves when the session is shut down.\n   */\n  shutdown(): Promise<void>;\n\n  /**\n   * Select a kernel for the session.\n   */\n  selectKernel(): Promise<void>;\n\n  /**\n   * Restart the session.\n   *\n   * @returns A promise that resolves with whether the kernel has restarted.\n   *\n   * #### Notes\n   * If there is a running kernel, present a dialog.\n   * If there is no kernel, we start a kernel with the last run\n   * kernel name and resolves with `true`. If no kernel has been started,\n   * this is a no-op, and resolves with `false`.\n   */\n  restart(): Promise<boolean>;\n\n  /**\n   * Change the session path.\n   *\n   * @param path - The new session path.\n   *\n   * @returns A promise that resolves when the session has renamed.\n   *\n   * #### Notes\n   * This uses the Jupyter REST API, and the response is validated.\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  setPath(path: string): Promise<void>;\n\n  /**\n   * Change the session name.\n   */\n  setName(name: string): Promise<void>;\n\n  /**\n   * Change the session type.\n   */\n  setType(type: string): Promise<void>;\n}\n\n/**\n * The namespace for Client Session related interfaces.\n */\nexport namespace IClientSession {\n  /**\n   * A kernel preference.\n   */\n  export interface IKernelPreference {\n    /**\n     * The name of the kernel.\n     */\n    readonly name?: string;\n\n    /**\n     * The preferred kernel language.\n     */\n    readonly language?: string;\n\n    /**\n     * The id of an existing kernel.\n     */\n    readonly id?: string;\n\n    /**\n     * Whether to prefer starting a kernel.\n     */\n    readonly shouldStart?: boolean;\n\n    /**\n     * Whether a kernel can be started.\n     */\n    readonly canStart?: boolean;\n\n    /**\n     * Whether to auto-start the default kernel if no matching kernel is found.\n     */\n    readonly autoStartDefault?: boolean;\n  }\n}\n\n/**\n * The default implementation of client session object.\n */\nexport class ClientSession implements IClientSession {\n  /**\n   * Construct a new client session.\n   */\n  constructor(options: ClientSession.IOptions) {\n    this.manager = options.manager;\n    this._path = options.path || UUID.uuid4();\n    this._type = options.type || '';\n    this._name = options.name || '';\n    this._setBusy = options.setBusy;\n    this._kernelPreference = options.kernelPreference || {};\n  }\n\n  /**\n   * A signal emitted when the session is shut down.\n   */\n  get terminated(): ISignal<this, void> {\n    return this._terminated;\n  }\n\n  /**\n   * A signal emitted when the kernel changes.\n   */\n  get kernelChanged(): ISignal<this, Session.IKernelChangedArgs> {\n    return this._kernelChanged;\n  }\n\n  /**\n   * A signal emitted when the status changes.\n   */\n  get statusChanged(): ISignal<this, Kernel.Status> {\n    return this._statusChanged;\n  }\n\n  /**\n   * A signal emitted for iopub kernel messages.\n   */\n  get iopubMessage(): ISignal<this, KernelMessage.IMessage> {\n    return this._iopubMessage;\n  }\n\n  /**\n   * A signal emitted for an unhandled kernel message.\n   */\n  get unhandledMessage(): ISignal<this, KernelMessage.IMessage> {\n    return this._unhandledMessage;\n  }\n\n  /**\n   * A signal emitted when a session property changes.\n   */\n  get propertyChanged(): ISignal<this, 'path' | 'name' | 'type'> {\n    return this._propertyChanged;\n  }\n\n  /**\n   * The current kernel of the session.\n   */\n  get kernel(): Kernel.IKernelConnection | null {\n    return this._session ? this._session.kernel : null;\n  }\n\n  /**\n   * The current path of the session.\n   */\n  get path(): string {\n    return this._path;\n  }\n\n  /**\n   * The current name of the session.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * The type of the client session.\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * The kernel preference of the session.\n   */\n  get kernelPreference(): IClientSession.IKernelPreference {\n    return this._kernelPreference;\n  }\n  set kernelPreference(value: IClientSession.IKernelPreference) {\n    this._kernelPreference = value;\n  }\n\n  /**\n   * The session manager used by the session.\n   */\n  readonly manager: Session.IManager;\n\n  /**\n   * The current status of the session.\n   */\n  get status(): Kernel.Status {\n    if (!this.isReady) {\n      return 'starting';\n    }\n    return this._session ? this._session.status : 'dead';\n  }\n\n  /**\n   * Whether the session is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that is fulfilled when the session is ready.\n   */\n  get ready(): Promise<void> {\n    return this._ready.promise;\n  }\n\n  /**\n   * The display name of the current kernel.\n   */\n  get kernelDisplayName(): string {\n    let kernel = this.kernel;\n    if (!kernel) {\n      return 'No Kernel!';\n    }\n    let specs = this.manager.specs;\n    if (!specs) {\n      return 'Unknown!';\n    }\n    let spec = specs.kernelspecs[kernel.name];\n    return spec ? spec.display_name : kernel.name;\n  }\n\n  /**\n   * Test whether the context is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the context.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    if (this._session) {\n      this._session = null;\n    }\n    if (this._dialog) {\n      this._dialog.dispose();\n    }\n    Signal.clearData(this);\n  }\n\n  /**\n   * Change the current kernel associated with the document.\n   */\n  changeKernel(\n    options: Partial<Kernel.IModel>\n  ): Promise<Kernel.IKernelConnection> {\n    return this.initialize().then(() => {\n      if (this.isDisposed) {\n        return Promise.reject('Disposed');\n      }\n      return this._changeKernel(options);\n    });\n  }\n\n  /**\n   * Select a kernel for the session.\n   */\n  selectKernel(): Promise<void> {\n    return this.initialize().then(() => {\n      if (this.isDisposed) {\n        return Promise.reject('Disposed');\n      }\n      return this._selectKernel(true);\n    });\n  }\n\n  /**\n   * Kill the kernel and shutdown the session.\n   *\n   * @returns A promise that resolves when the session is shut down.\n   */\n  shutdown(): Promise<void> {\n    const session = this._session;\n    if (this.isDisposed || !session) {\n      return Promise.resolve();\n    }\n    this._session = null;\n    return session.shutdown();\n  }\n\n  /**\n   * Restart the session.\n   *\n   * @returns A promise that resolves with whether the kernel has restarted.\n   *\n   * #### Notes\n   * If there is a running kernel, present a dialog.\n   * If there is no kernel, we start a kernel with the last run\n   * kernel name and resolves with `true`.\n   */\n  restart(): Promise<boolean> {\n    return this.initialize().then(() => {\n      if (this.isDisposed) {\n        return Promise.reject('session already disposed');\n      }\n      let kernel = this.kernel;\n      if (!kernel) {\n        if (this._prevKernelName) {\n          return this.changeKernel({ name: this._prevKernelName }).then(\n            () => true\n          );\n        }\n        // Bail if there is no previous kernel to start.\n        return Promise.reject('No kernel to restart');\n      }\n      return ClientSession.restartKernel(kernel);\n    });\n  }\n\n  /**\n   * Change the session path.\n   *\n   * @param path - The new session path.\n   *\n   * @returns A promise that resolves when the session has renamed.\n   *\n   * #### Notes\n   * This uses the Jupyter REST API, and the response is validated.\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  setPath(path: string): Promise<void> {\n    if (this.isDisposed || this._path === path) {\n      return Promise.resolve();\n    }\n    this._path = path;\n    if (this._session) {\n      return this._session.setPath(path);\n    }\n    this._propertyChanged.emit('path');\n    return Promise.resolve();\n  }\n\n  /**\n   * Change the session name.\n   */\n  setName(name: string): Promise<void> {\n    if (this.isDisposed || this._name === name) {\n      return Promise.resolve();\n    }\n    this._name = name;\n    if (this._session) {\n      return this._session.setName(name);\n    }\n    this._propertyChanged.emit('name');\n    return Promise.resolve();\n  }\n\n  /**\n   * Change the session type.\n   */\n  setType(type: string): Promise<void> {\n    if (this.isDisposed || this._type === type) {\n      return Promise.resolve();\n    }\n    this._type = type;\n    if (this._session) {\n      return this._session.setType(name);\n    }\n    this._propertyChanged.emit('type');\n    return Promise.resolve();\n  }\n\n  /**\n   * Initialize the session.\n   *\n   * #### Notes\n   * If a server session exists on the current path, we will connect to it.\n   * If preferences include disabling `canStart` or `shouldStart`, no\n   * server session will be started.\n   * If a kernel id is given, we attempt to start a session with that id.\n   * If a default kernel is available, we connect to it.\n   * Otherwise we ask the user to select a kernel.\n   */\n  async initialize(): Promise<void> {\n    if (this._initializing || this._isReady) {\n      return this._ready.promise;\n    }\n    this._initializing = true;\n    let manager = this.manager;\n    await manager.ready;\n    let model = find(manager.running(), item => {\n      return item.path === this._path;\n    });\n    if (model) {\n      try {\n        let session = manager.connectTo(model);\n        this._handleNewSession(session);\n      } catch (err) {\n        this._handleSessionError(err);\n      }\n    }\n    await this._startIfNecessary();\n    this._isReady = true;\n    this._ready.resolve(undefined);\n  }\n\n  /**\n   * Start the session if necessary.\n   */\n  private _startIfNecessary(): Promise<void> {\n    let preference = this.kernelPreference;\n    if (\n      this.isDisposed ||\n      this.kernel ||\n      preference.shouldStart === false ||\n      preference.canStart === false\n    ) {\n      return Promise.resolve();\n    }\n    // Try to use an existing kernel.\n    if (preference.id) {\n      return this._changeKernel({ id: preference.id })\n        .then(() => undefined)\n        .catch(() => this._selectKernel(false));\n    }\n    let name = ClientSession.getDefaultKernel({\n      specs: this.manager.specs,\n      sessions: this.manager.running(),\n      preference\n    });\n    if (name) {\n      return this._changeKernel({ name })\n        .then(() => undefined)\n        .catch(() => this._selectKernel(false));\n    }\n    return this._selectKernel(false);\n  }\n\n  /**\n   * Change the kernel.\n   */\n  private _changeKernel(\n    options: Partial<Kernel.IModel>\n  ): Promise<Kernel.IKernelConnection> {\n    if (this.isDisposed) {\n      return Promise.reject('Disposed');\n    }\n    let session = this._session;\n    if (session) {\n      return session.changeKernel(options);\n    } else {\n      return this._startSession(options);\n    }\n  }\n\n  /**\n   * Select a kernel.\n   *\n   * @param cancelable: whether the dialog should have a cancel button.\n   */\n  private _selectKernel(cancelable: boolean): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.resolve();\n    }\n    const buttons = cancelable\n      ? [Dialog.cancelButton(), Dialog.okButton({ label: 'SELECT' })]\n      : [Dialog.okButton({ label: 'SELECT' })];\n\n    let dialog = (this._dialog = new Dialog({\n      title: 'Select Kernel',\n      body: new Private.KernelSelector(this),\n      buttons\n    }));\n\n    return dialog\n      .launch()\n      .then(result => {\n        if (this.isDisposed || !result.button.accept) {\n          return;\n        }\n        let model = result.value;\n        if (model === null && this._session) {\n          return this.shutdown().then(() => {\n            this._kernelChanged.emit({ oldValue: null, newValue: null });\n          });\n        }\n        if (model) {\n          return this._changeKernel(model).then(() => undefined);\n        }\n      })\n      .then(() => {\n        this._dialog = null;\n      });\n  }\n\n  /**\n   * Start a session and set up its signals.\n   */\n  private _startSession(\n    model: Partial<Kernel.IModel>\n  ): Promise<Kernel.IKernelConnection> {\n    if (this.isDisposed) {\n      return Promise.reject('Session is disposed.');\n    }\n    return this.manager\n      .startNew({\n        path: this._path,\n        type: this._type,\n        name: this._name,\n        kernelName: model ? model.name : undefined,\n        kernelId: model ? model.id : undefined\n      })\n      .then(session => {\n        return this._handleNewSession(session);\n      })\n      .catch(err => {\n        this._handleSessionError(err);\n        return Promise.reject(err);\n      });\n  }\n\n  /**\n   * Handle a new session object.\n   */\n  private _handleNewSession(\n    session: Session.ISession\n  ): Kernel.IKernelConnection {\n    if (this.isDisposed) {\n      throw Error('Disposed');\n    }\n    if (this._session) {\n      this._session.dispose();\n    }\n    this._session = session;\n    if (session.path !== this._path) {\n      this._path = session.path;\n      this._propertyChanged.emit('path');\n    }\n    if (session.name !== this._name) {\n      this._name = session.name;\n      this._propertyChanged.emit('name');\n    }\n    if (session.type !== this._type) {\n      this._type = session.type;\n      this._propertyChanged.emit('type');\n    }\n\n    session.terminated.connect(this._onTerminated, this);\n    session.propertyChanged.connect(this._onPropertyChanged, this);\n    session.kernelChanged.connect(this._onKernelChanged, this);\n    session.statusChanged.connect(this._onStatusChanged, this);\n    session.iopubMessage.connect(this._onIopubMessage, this);\n    session.unhandledMessage.connect(this._onUnhandledMessage, this);\n    this._prevKernelName = session.kernel.name;\n\n    // The session kernel was disposed above when the session was disposed, so\n    // the oldValue should be null.\n    this._kernelChanged.emit({ oldValue: null, newValue: session.kernel });\n    return session.kernel;\n  }\n\n  /**\n   * Handle an error in session startup.\n   */\n  private _handleSessionError(\n    err: ServerConnection.ResponseError\n  ): Promise<void> {\n    return err.response\n      .text()\n      .then(text => {\n        let message = err.message;\n        try {\n          message = JSON.parse(text)['traceback'];\n        } catch (err) {\n          // no-op\n        }\n        let dialog = (this._dialog = new Dialog({\n          title: 'Error Starting Kernel',\n          body: <pre>{message}</pre>,\n          buttons: [Dialog.okButton()]\n        }));\n        return dialog.launch();\n      })\n      .then(() => {\n        this._dialog = null;\n      });\n  }\n\n  /**\n   * Handle a session termination.\n   */\n  private _onTerminated(): void {\n    let kernel = this.kernel;\n    if (this._session) {\n      this._session.dispose();\n    }\n    this._session = null;\n    this._terminated.emit(undefined);\n    if (kernel) {\n      this._kernelChanged.emit({ oldValue: null, newValue: null });\n    }\n  }\n\n  /**\n   * Handle a change to a session property.\n   */\n  private _onPropertyChanged(\n    sender: Session.ISession,\n    property: 'path' | 'name' | 'type'\n  ) {\n    switch (property) {\n      case 'path':\n        this._path = sender.path;\n        break;\n      case 'name':\n        this._name = sender.name;\n        break;\n      default:\n        this._type = sender.type;\n        break;\n    }\n    this._propertyChanged.emit(property);\n  }\n\n  /**\n   * Handle a change to the kernel.\n   */\n  private _onKernelChanged(\n    sender: Session.ISession,\n    args: Session.IKernelChangedArgs\n  ): void {\n    this._kernelChanged.emit(args);\n  }\n\n  /**\n   * Handle a change to the session status.\n   */\n  private _onStatusChanged(): void {\n    // Set that this kernel is busy, if we haven't already\n    // If we have already, and now we aren't busy, dispose\n    // of the busy disposable.\n    if (this._setBusy) {\n      if (this.status === 'busy') {\n        if (!this._busyDisposable) {\n          this._busyDisposable = this._setBusy();\n        }\n      } else {\n        if (this._busyDisposable) {\n          this._busyDisposable.dispose();\n          this._busyDisposable = null;\n        }\n      }\n    }\n\n    this._statusChanged.emit(this.status);\n  }\n\n  /**\n   * Handle an iopub message.\n   */\n  private _onIopubMessage(\n    sender: Session.ISession,\n    message: KernelMessage.IIOPubMessage\n  ): void {\n    this._iopubMessage.emit(message);\n  }\n\n  /**\n   * Handle an unhandled message.\n   */\n  private _onUnhandledMessage(\n    sender: Session.ISession,\n    message: KernelMessage.IMessage\n  ): void {\n    this._unhandledMessage.emit(message);\n  }\n\n  private _path = '';\n  private _name = '';\n  private _type = '';\n  private _prevKernelName = '';\n  private _kernelPreference: IClientSession.IKernelPreference;\n  private _isDisposed = false;\n  private _session: Session.ISession | null = null;\n  private _ready = new PromiseDelegate<void>();\n  private _initializing = false;\n  private _isReady = false;\n  private _terminated = new Signal<this, void>(this);\n  private _kernelChanged = new Signal<this, Session.IKernelChangedArgs>(this);\n  private _statusChanged = new Signal<this, Kernel.Status>(this);\n  private _iopubMessage = new Signal<this, KernelMessage.IMessage>(this);\n  private _unhandledMessage = new Signal<this, KernelMessage.IMessage>(this);\n  private _propertyChanged = new Signal<this, 'path' | 'name' | 'type'>(this);\n  private _dialog: Dialog<any> | null = null;\n  private _setBusy: () => IDisposable | undefined;\n  private _busyDisposable: IDisposable | null = null;\n}\n\n/**\n * A namespace for `ClientSession` statics.\n */\nexport namespace ClientSession {\n  /**\n   * The options used to initialize a context.\n   */\n  export interface IOptions {\n    /**\n     * A session manager instance.\n     */\n    manager: Session.IManager;\n\n    /**\n     * The initial path of the file.\n     */\n    path?: string;\n\n    /**\n     * The name of the session.\n     */\n    name?: string;\n\n    /**\n     * The type of the session.\n     */\n    type?: string;\n\n    /**\n     * A kernel preference.\n     */\n    kernelPreference?: IClientSession.IKernelPreference;\n\n    /**\n     * A function to call when the session becomes busy.\n     */\n    setBusy?: () => IDisposable;\n  }\n\n  /**\n   * Restart a kernel if the user accepts the risk.\n   *\n   * Returns a promise resolving with whether the kernel was restarted.\n   */\n  export function restartKernel(\n    kernel: Kernel.IKernelConnection\n  ): Promise<boolean> {\n    let restartBtn = Dialog.warnButton({ label: 'RESTART ' });\n    return showDialog({\n      title: 'Restart Kernel?',\n      body:\n        'Do you want to restart the current kernel? All variables will be lost.',\n      buttons: [Dialog.cancelButton(), restartBtn]\n    }).then(result => {\n      if (kernel.isDisposed) {\n        return Promise.resolve(false);\n      }\n      if (result.button.accept) {\n        return kernel.restart().then(() => {\n          return true;\n        });\n      }\n      return false;\n    });\n  }\n\n  /**\n   * An interface for populating a kernel selector.\n   */\n  export interface IKernelSearch {\n    /**\n     * The Kernel specs.\n     */\n    specs: Kernel.ISpecModels | null;\n\n    /**\n     * The kernel preference.\n     */\n    preference: IClientSession.IKernelPreference;\n\n    /**\n     * The current running sessions.\n     */\n    sessions?: IterableOrArrayLike<Session.IModel>;\n  }\n\n  /**\n   * Get the default kernel name given select options.\n   */\n  export function getDefaultKernel(options: IKernelSearch): string | null {\n    return Private.getDefaultKernel(options);\n  }\n\n  /**\n   * Populate a kernel dropdown list.\n   *\n   * @param node - The node to populate.\n   *\n   * @param options - The options used to populate the kernels.\n   *\n   * #### Notes\n   * Populates the list with separated sections:\n   *   - Kernels matching the preferred language (display names).\n   *   - \"None\" signifying no kernel.\n   *   - The remaining kernels.\n   *   - Sessions matching the preferred language (file names).\n   *   - The remaining sessions.\n   * If no preferred language is given or no kernels are found using\n   * the preferred language, the default kernel is used in the first\n   * section.  Kernels are sorted by display name.  Sessions display the\n   * base name of the file with an ellipsis overflow and a tooltip with\n   * the explicit session information.\n   */\n  export function populateKernelSelect(\n    node: HTMLSelectElement,\n    options: IKernelSearch\n  ): void {\n    return Private.populateKernelSelect(node, options);\n  }\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * A widget that provides a kernel selection.\n   */\n  export class KernelSelector extends Widget {\n    /**\n     * Create a new kernel selector widget.\n     */\n    constructor(session: ClientSession) {\n      super({ node: createSelectorNode(session) });\n    }\n\n    /**\n     * Get the value of the kernel selector widget.\n     */\n    getValue(): Kernel.IModel {\n      let selector = this.node.querySelector('select') as HTMLSelectElement;\n      return JSON.parse(selector.value) as Kernel.IModel;\n    }\n  }\n\n  /**\n   * Create a node for a kernel selector widget.\n   */\n  function createSelectorNode(session: ClientSession) {\n    // Create the dialog body.\n    let body = document.createElement('div');\n    let text = document.createElement('label');\n    text.innerHTML = `Select kernel for: \"${session.name}\"`;\n    body.appendChild(text);\n\n    let options = getKernelSearch(session);\n    let selector = document.createElement('select');\n    ClientSession.populateKernelSelect(selector, options);\n    body.appendChild(selector);\n    return body;\n  }\n\n  /**\n   * Get the default kernel name given select options.\n   */\n  export function getDefaultKernel(\n    options: ClientSession.IKernelSearch\n  ): string | null {\n    let { specs, preference } = options;\n    let {\n      name,\n      language,\n      shouldStart,\n      canStart,\n      autoStartDefault\n    } = preference;\n\n    if (!specs || shouldStart === false || canStart === false) {\n      return null;\n    }\n\n    let defaultName = autoStartDefault ? specs.default : null;\n\n    if (!name && !language) {\n      return defaultName;\n    }\n\n    // Look for an exact match of a spec name.\n    for (let specName in specs.kernelspecs) {\n      if (specName === name) {\n        return name;\n      }\n    }\n\n    // Bail if there is no language.\n    if (!language) {\n      return defaultName;\n    }\n\n    // Check for a single kernel matching the language.\n    let matches: string[] = [];\n    for (let specName in specs.kernelspecs) {\n      let kernelLanguage = specs.kernelspecs[specName].language;\n      if (language === kernelLanguage) {\n        matches.push(specName);\n      }\n    }\n\n    if (matches.length === 1) {\n      let specName = matches[0];\n      console.log(\n        'No exact match found for ' +\n          specName +\n          ', using kernel ' +\n          specName +\n          ' that matches ' +\n          'language=' +\n          language\n      );\n      return specName;\n    }\n\n    // No matches found.\n    return defaultName;\n  }\n\n  /**\n   * Populate a kernel select node for the session.\n   */\n  export function populateKernelSelect(\n    node: HTMLSelectElement,\n    options: ClientSession.IKernelSearch\n  ): void {\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n    let maxLength = 10;\n\n    let { preference, sessions, specs } = options;\n    let { name, id, language, canStart, shouldStart } = preference;\n\n    if (!specs || canStart === false) {\n      node.appendChild(optionForNone());\n      node.value = 'null';\n      node.disabled = true;\n      return;\n    }\n\n    node.disabled = false;\n\n    // Create mappings of display names and languages for kernel name.\n    let displayNames: { [key: string]: string } = Object.create(null);\n    let languages: { [key: string]: string } = Object.create(null);\n    for (let name in specs.kernelspecs) {\n      let spec = specs.kernelspecs[name];\n      displayNames[name] = spec.display_name;\n      maxLength = Math.max(maxLength, displayNames[name].length);\n      languages[name] = spec.language;\n    }\n\n    // Handle a kernel by name.\n    let names: string[] = [];\n    if (name && name in specs.kernelspecs) {\n      names.push(name);\n    }\n\n    // Then look by language.\n    if (language) {\n      for (let specName in specs.kernelspecs) {\n        if (name !== specName && languages[specName] === language) {\n          names.push(specName);\n        }\n      }\n    }\n\n    // Use the default kernel if no kernels were found.\n    if (!names.length) {\n      names.push(specs.default);\n    }\n\n    // Handle a preferred kernels in order of display name.\n    let preferred = document.createElement('optgroup');\n    preferred.label = 'Start Preferred Kernel';\n\n    names.sort((a, b) => displayNames[a].localeCompare(displayNames[b]));\n    for (let name of names) {\n      preferred.appendChild(optionForName(name, displayNames[name]));\n    }\n\n    if (preferred.firstChild) {\n      node.appendChild(preferred);\n    }\n\n    // Add an option for no kernel\n    node.appendChild(optionForNone());\n\n    let other = document.createElement('optgroup');\n    other.label = 'Start Other Kernel';\n\n    // Add the rest of the kernel names in alphabetical order.\n    let otherNames: string[] = [];\n    for (let specName in specs.kernelspecs) {\n      if (names.indexOf(specName) !== -1) {\n        continue;\n      }\n      otherNames.push(specName);\n    }\n    otherNames.sort((a, b) => displayNames[a].localeCompare(displayNames[b]));\n    for (let otherName of otherNames) {\n      other.appendChild(optionForName(otherName, displayNames[otherName]));\n    }\n    // Add a separator option if there were any other names.\n    if (otherNames.length) {\n      node.appendChild(other);\n    }\n\n    // Handle the default value.\n    if (shouldStart === false) {\n      node.value = 'null';\n    } else {\n      node.selectedIndex = 0;\n    }\n\n    // Bail if there are no sessions.\n    if (!sessions) {\n      return;\n    }\n\n    // Add the sessions using the preferred language first.\n    let matchingSessions: Session.IModel[] = [];\n    let otherSessions: Session.IModel[] = [];\n\n    each(sessions, session => {\n      if (\n        language &&\n        languages[session.kernel.name] === language &&\n        session.kernel.id !== id\n      ) {\n        matchingSessions.push(session);\n      } else if (session.kernel.id !== id) {\n        otherSessions.push(session);\n      }\n    });\n\n    let matching = document.createElement('optgroup');\n    matching.label = 'Use Kernel from Preferred Session';\n    node.appendChild(matching);\n\n    if (matchingSessions.length) {\n      matchingSessions.sort((a, b) => {\n        return a.path.localeCompare(b.path);\n      });\n\n      each(matchingSessions, session => {\n        let name = displayNames[session.kernel.name];\n        matching.appendChild(optionForSession(session, name, maxLength));\n      });\n    }\n\n    let otherSessionsNode = document.createElement('optgroup');\n    otherSessionsNode.label = 'Use Kernel from Other Session';\n    node.appendChild(otherSessionsNode);\n\n    if (otherSessions.length) {\n      otherSessions.sort((a, b) => {\n        return a.path.localeCompare(b.path);\n      });\n\n      each(otherSessions, session => {\n        let name = displayNames[session.kernel.name] || session.kernel.name;\n        otherSessionsNode.appendChild(\n          optionForSession(session, name, maxLength)\n        );\n      });\n    }\n  }\n\n  /**\n   * Get the kernel search options given a client session and sesion manager.\n   */\n  function getKernelSearch(\n    session: ClientSession\n  ): ClientSession.IKernelSearch {\n    return {\n      specs: session.manager.specs,\n      sessions: session.manager.running(),\n      preference: session.kernelPreference\n    };\n  }\n\n  /**\n   * Create an option element for a kernel name.\n   */\n  function optionForName(name: string, displayName: string): HTMLOptionElement {\n    let option = document.createElement('option');\n    option.text = displayName;\n    option.value = JSON.stringify({ name });\n    return option;\n  }\n\n  /**\n   * Create an option for no kernel.\n   */\n  function optionForNone(): HTMLOptGroupElement {\n    let group = document.createElement('optgroup');\n    group.label = 'Use No Kernel';\n    let option = document.createElement('option');\n    option.text = 'No Kernel';\n    option.value = 'null';\n    group.appendChild(option);\n    return group;\n  }\n\n  /**\n   * Create an option element for a session.\n   */\n  function optionForSession(\n    session: Session.IModel,\n    displayName: string,\n    maxLength: number\n  ): HTMLOptionElement {\n    let option = document.createElement('option');\n    let sessionName = session.name || PathExt.basename(session.path);\n    if (sessionName.length > maxLength) {\n      sessionName = sessionName.slice(0, maxLength - 3) + '...';\n    }\n    option.text = sessionName;\n    option.value = JSON.stringify({ id: session.kernel.id });\n    option.title =\n      `Path: ${session.path}\\n` +\n      `Name: ${sessionName}\\n` +\n      `Kernel Name: ${displayName}\\n` +\n      `Kernel Id: ${session.kernel.id}`;\n    return option;\n  }\n}\n"]}