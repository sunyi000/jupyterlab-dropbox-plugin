{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/builder/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '../serverconnection';\n\n/**\n * The url for the lab build service.\n */\nconst BUILD_SETTINGS_URL = 'lab/api/build';\n\n/**\n * The static namespace for `BuildManager`.\n */\nexport class BuildManager {\n  /**\n   * Create a new setting manager.\n   */\n  constructor(options: BuildManager.IOptions = {}) {\n    this.serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n  }\n\n  /**\n   * The server settings used to make API requests.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the build service is available.\n   */\n  get isAvailable(): boolean {\n    return PageConfig.getOption('buildAvailable').toLowerCase() === 'true';\n  }\n\n  /**\n   * Test whether to check build status automatically.\n   */\n  get shouldCheck(): boolean {\n    return PageConfig.getOption('buildCheck').toLowerCase() === 'true';\n  }\n\n  /**\n   * Get whether the application should be built.\n   */\n  getStatus(): Promise<BuildManager.IStatus> {\n    const base = this.serverSettings.baseUrl;\n    const url = URLExt.join(base, BUILD_SETTINGS_URL);\n    const { serverSettings } = this;\n    const promise = ServerConnection.makeRequest(url, {}, serverSettings);\n\n    return promise\n      .then(response => {\n        if (response.status !== 200) {\n          throw new ServerConnection.ResponseError(response);\n        }\n\n        return response.json();\n      })\n      .then(data => {\n        if (typeof data.status !== 'string') {\n          throw new Error('Invalid data');\n        }\n        if (typeof data.message !== 'string') {\n          throw new Error('Invalid data');\n        }\n        return data;\n      });\n  }\n\n  /**\n   * Build the application.\n   */\n  build(): Promise<void> {\n    const base = this.serverSettings.baseUrl;\n    const url = URLExt.join(base, BUILD_SETTINGS_URL);\n    const { serverSettings } = this;\n    const init = { method: 'POST' };\n    const promise = ServerConnection.makeRequest(url, init, serverSettings);\n\n    return promise.then(response => {\n      if (response.status === 400) {\n        throw new ServerConnection.ResponseError(response, 'Build aborted');\n      }\n      if (response.status !== 200) {\n        let message = `Build failed with ${\n          response.status\n        }, please run 'jupyter lab build' on the server for full output`;\n        throw new ServerConnection.ResponseError(response, message);\n      }\n    });\n  }\n\n  /**\n   * Cancel an active build.\n   */\n  cancel(): Promise<void> {\n    const base = this.serverSettings.baseUrl;\n    const url = URLExt.join(base, BUILD_SETTINGS_URL);\n    const { serverSettings } = this;\n    const init = { method: 'DELETE' };\n    const promise = ServerConnection.makeRequest(url, init, serverSettings);\n\n    return promise.then(response => {\n      if (response.status !== 204) {\n        throw new ServerConnection.ResponseError(response);\n      }\n    });\n  }\n}\n\n/**\n * A namespace for `BuildManager` statics.\n */\nexport namespace BuildManager {\n  /**\n   * The instantiation options for a setting manager.\n   */\n  export interface IOptions {\n    /**\n     * The server settings used to make API requests.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n\n  /**\n   * The build status response from the server.\n   */\n  export interface IStatus {\n    /**\n     * Whether a build is needed.\n     */\n    readonly status: 'stable' | 'needed' | 'building';\n\n    /**\n     * The message associated with the build status.\n     */\n    readonly message: string;\n  }\n}\n\n/**\n * A namespace for builder API interfaces.\n */\nexport namespace Builder {\n  /**\n   * The interface for the build manager.\n   */\n  export interface IManager extends BuildManager {}\n}\n"]}