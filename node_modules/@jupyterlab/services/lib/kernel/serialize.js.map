{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../../../../services/src/kernel/serialize.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { KernelMessage } from './messages';\n\n/**\n * Deserialize and return the unpacked message.\n *\n * #### Notes\n * Handles JSON blob strings and binary messages.\n */\nexport function deserialize(\n  data: ArrayBuffer | string\n): KernelMessage.IMessage {\n  let value: KernelMessage.IMessage;\n  if (typeof data === 'string') {\n    value = JSON.parse(data);\n  } else {\n    value = deserializeBinary(data);\n  }\n  return value;\n}\n\n/**\n * Serialize a kernel message for transport.\n *\n * #### Notes\n * If there is binary content, an `ArrayBuffer` is returned,\n * otherwise the message is converted to a JSON string.\n */\nexport function serialize(msg: KernelMessage.IMessage): string | ArrayBuffer {\n  let value: string | ArrayBuffer;\n  if (msg.buffers && msg.buffers.length) {\n    value = serializeBinary(msg);\n  } else {\n    value = JSON.stringify(msg);\n  }\n  return value;\n}\n\n/**\n * Deserialize a binary message to a Kernel Message.\n */\nfunction deserializeBinary(buf: ArrayBuffer): KernelMessage.IMessage {\n  let data = new DataView(buf);\n  // read the header: 1 + nbufs 32b integers\n  let nbufs = data.getUint32(0);\n  let offsets: number[] = [];\n  if (nbufs < 2) {\n    throw new Error('Invalid incoming Kernel Message');\n  }\n  for (let i = 1; i <= nbufs; i++) {\n    offsets.push(data.getUint32(i * 4));\n  }\n  let jsonBytes = new Uint8Array(buf.slice(offsets[0], offsets[1]));\n  let msg = JSON.parse(new TextDecoder('utf8').decode(jsonBytes));\n  // the remaining chunks are stored as DataViews in msg.buffers\n  msg.buffers = [];\n  for (let i = 1; i < nbufs; i++) {\n    let start = offsets[i];\n    let stop = offsets[i + 1] || buf.byteLength;\n    msg.buffers.push(new DataView(buf.slice(start, stop)));\n  }\n  return msg;\n}\n\n/**\n * Implement the binary serialization protocol.\n *\n * Serialize Kernel message to ArrayBuffer.\n */\nfunction serializeBinary(msg: KernelMessage.IMessage): ArrayBuffer {\n  let offsets: number[] = [];\n  let buffers: ArrayBuffer[] = [];\n  let encoder = new TextEncoder();\n  let origBuffers: (ArrayBuffer | ArrayBufferView)[] = [];\n  if (msg.buffers !== undefined) {\n    origBuffers = msg.buffers;\n    delete msg['buffers'];\n  }\n  let jsonUtf8 = encoder.encode(JSON.stringify(msg));\n  buffers.push(jsonUtf8.buffer);\n  for (let i = 0; i < origBuffers.length; i++) {\n    // msg.buffers elements could be either views or ArrayBuffers\n    // buffers elements are ArrayBuffers\n    let b: any = origBuffers[i];\n    buffers.push(b instanceof ArrayBuffer ? b : b.buffer);\n  }\n  let nbufs = buffers.length;\n  offsets.push(4 * (nbufs + 1));\n  for (let i = 0; i + 1 < buffers.length; i++) {\n    offsets.push(offsets[offsets.length - 1] + buffers[i].byteLength);\n  }\n  let msgBuf = new Uint8Array(\n    offsets[offsets.length - 1] + buffers[buffers.length - 1].byteLength\n  );\n  // use DataView.setUint32 for network byte-order\n  let view = new DataView(msgBuf.buffer);\n  // write nbufs to first 4 bytes\n  view.setUint32(0, nbufs);\n  // write offsets to next 4 * nbufs bytes\n  for (let i = 0; i < offsets.length; i++) {\n    view.setUint32(4 * (i + 1), offsets[i]);\n  }\n  // write all the buffers at their respective offsets\n  for (let i = 0; i < buffers.length; i++) {\n    msgBuf.set(new Uint8Array(buffers[i]), offsets[i]);\n  }\n  return msgBuf.buffer;\n}\n"]}