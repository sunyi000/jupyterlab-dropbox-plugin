{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../../../services/src/kernel/messages.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { UUID } from '@phosphor/coreutils';\n\nimport { JSONObject, JSONValue } from '@phosphor/coreutils';\n\nimport { Kernel } from './kernel';\n\n/**\n * A namespace for kernel messages.\n */\nexport namespace KernelMessage {\n  /**\n   * Create a well-formed kernel message.\n   */\n  export function createMessage(\n    options: IOptions,\n    content: JSONObject = {},\n    metadata: JSONObject = {},\n    buffers: (ArrayBuffer | ArrayBufferView)[] = []\n  ): IMessage {\n    return {\n      header: {\n        username: options.username || '',\n        version: '5.2',\n        session: options.session,\n        msg_id: options.msgId || UUID.uuid4(),\n        msg_type: options.msgType\n      },\n      parent_header: {},\n      channel: options.channel,\n      content,\n      metadata,\n      buffers\n    };\n  }\n\n  /**\n   * Create a well-formed kernel shell message.\n   */\n  export function createShellMessage(\n    options: IOptions,\n    content: JSONObject = {},\n    metadata: JSONObject = {},\n    buffers: (ArrayBuffer | ArrayBufferView)[] = []\n  ): IShellMessage {\n    let msg = createMessage(options, content, metadata, buffers);\n    return msg as IShellMessage;\n  }\n\n  /**\n   * Kernel message header content.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#general-message-format).\n   *\n   * **See also:** [[IMessage]]\n   */\n  export interface IHeader extends JSONObject {\n    username: string;\n    version: string;\n    session: string;\n    msg_id: string;\n    msg_type: string;\n  }\n\n  /**\n   * Kernel message specification.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#general-message-format).\n   */\n  export interface IMessage {\n    header: IHeader;\n    parent_header: IHeader | {};\n    metadata: JSONObject;\n    content: JSONObject;\n    channel: Channel;\n    buffers?: (ArrayBuffer | ArrayBufferView)[];\n  }\n\n  /**\n   * The valid channel names.\n   */\n  export type Channel = 'shell' | 'iopub' | 'stdin';\n\n  /**\n   * A kernel message on the `'shell'` channel.\n   */\n  export interface IShellMessage extends IMessage {\n    channel: 'shell';\n  }\n\n  /**\n   * A kernel message on the `'iopub'` channel.\n   */\n  export interface IIOPubMessage extends IMessage {\n    channel: 'iopub';\n  }\n\n  /**\n   * A kernel message on the `'stdin'` channel.\n   */\n  export interface IStdinMessage extends IMessage {\n    channel: 'stdin';\n  }\n\n  /**\n   * A `'stream'` message on the `'iopub'` channel.\n   *\n   * See [Streams](https://jupyter-client.readthedocs.io/en/latest/messaging.html#streams-stdout-stderr-etc).\n   */\n  export interface IStreamMsg extends IIOPubMessage {\n    content: {\n      name: 'stdout' | 'stderr';\n      text: string;\n    };\n  }\n\n  /**\n   * Test whether a kernel message is a `'stream'` message.\n   */\n  export function isStreamMsg(msg: IMessage): msg is IStreamMsg {\n    return msg.header.msg_type === 'stream';\n  }\n\n  /**\n   * A `'display_data'` message on the `'iopub'` channel.\n   *\n   * See [Display data](https://jupyter-client.readthedocs.io/en/latest/messaging.html#display-data).\n   */\n  export interface IDisplayDataMsg extends IIOPubMessage {\n    content: {\n      data: nbformat.IMimeBundle;\n      metadata: nbformat.OutputMetadata;\n      transient?: { display_id?: string };\n    };\n  }\n\n  /**\n   * Test whether a kernel message is an `'display_data'` message.\n   */\n  export function isDisplayDataMsg(msg: IMessage): msg is IDisplayDataMsg {\n    return msg.header.msg_type === 'display_data';\n  }\n\n  /**\n   * An `'update_display_data'` message on the `'iopub'` channel.\n   *\n   * See [Update Display data](https://jupyter-client.readthedocs.io/en/latest/messaging.html#update-display-data).\n   */\n  export interface IUpdateDisplayDataMsg extends IDisplayDataMsg {\n    content: IDisplayDataMsg['content'] & {\n      transient: { display_id: string };\n    };\n  }\n\n  /**\n   * Test whether a kernel message is an `'update_display_data'` message.\n   */\n  export function isUpdateDisplayDataMsg(\n    msg: IMessage\n  ): msg is IUpdateDisplayDataMsg {\n    return msg.header.msg_type === 'update_display_data';\n  }\n\n  /**\n   * An `'execute_input'` message on the `'iopub'` channel.\n   *\n   * See [Code inputs](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-inputs).\n   */\n  export interface IExecuteInputMsg extends IIOPubMessage {\n    content: {\n      code: string;\n      execution_count: nbformat.ExecutionCount;\n    };\n  }\n\n  /**\n   * Test whether a kernel message is an `'execute_input'` message.\n   */\n  export function isExecuteInputMsg(msg: IMessage): msg is IExecuteInputMsg {\n    return msg.header.msg_type === 'execute_input';\n  }\n\n  /**\n   * An `'execute_result'` message on the `'iopub'` channel.\n   *\n   * See [Execution results](https://jupyter-client.readthedocs.io/en/latest/messaging.html#id4).\n   */\n  export interface IExecuteResultMsg extends IIOPubMessage {\n    content: {\n      execution_count: nbformat.ExecutionCount;\n      data: nbformat.IMimeBundle;\n      metadata: nbformat.OutputMetadata;\n    };\n  }\n\n  /**\n   * Test whether a kernel message is an `'execute_result'` message.\n   */\n  export function isExecuteResultMsg(msg: IMessage): msg is IExecuteResultMsg {\n    return msg.header.msg_type === 'execute_result';\n  }\n\n  /**\n   * A `'error'` message on the `'iopub'` channel.\n   *\n   * See [Execution errors](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execution-errors).\n   */\n  export interface IErrorMsg extends IIOPubMessage {\n    content: {\n      ename: string;\n      evalue: string;\n      traceback: string[];\n    };\n  }\n\n  /**\n   * Test whether a kernel message is an `'error'` message.\n   */\n  export function isErrorMsg(msg: IMessage): msg is IErrorMsg {\n    return msg.header.msg_type === 'error';\n  }\n\n  /**\n   * A `'status'` message on the `'iopub'` channel.\n   *\n   * See [Kernel status](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-status).\n   */\n  export interface IStatusMsg extends IIOPubMessage {\n    content: {\n      execution_state: Kernel.Status;\n    };\n  }\n\n  /**\n   * Test whether a kernel message is a `'status'` message.\n   */\n  export function isStatusMsg(msg: IMessage): msg is IStatusMsg {\n    return msg.header.msg_type === 'status';\n  }\n\n  /**\n   * A `'clear_output'` message on the `'iopub'` channel.\n   *\n   * See [Clear output](https://jupyter-client.readthedocs.io/en/latest/messaging.html#clear-output).\n   */\n  export interface IClearOutputMsg extends IIOPubMessage {\n    content: {\n      wait: boolean;\n    };\n  }\n\n  /**\n   * Test whether a kernel message is a `'clear_output'` message.\n   */\n  export function isClearOutputMsg(msg: IMessage): msg is IClearOutputMsg {\n    return msg.header.msg_type === 'clear_output';\n  }\n\n  /**\n   * A `'comm_open'` message on the `'iopub'` channel.\n   *\n   * See [Comm open](https://jupyter-client.readthedocs.io/en/latest/messaging.html#opening-a-comm).\n   */\n  export interface ICommOpenMsg extends IIOPubMessage {\n    content: ICommOpen;\n  }\n\n  /**\n   * The content of a `'comm_open'` message.  The message can\n   * be received on the `'iopub'` channel or send on the `'shell'` channel.\n   *\n   * See [Comm open](https://jupyter-client.readthedocs.io/en/latest/messaging.html#opening-a-comm).\n   */\n  export interface ICommOpen extends JSONObject {\n    comm_id: string;\n    target_name: string;\n    data: JSONValue;\n    target_module?: string;\n  }\n\n  /**\n   * Test whether a kernel message is a `'comm_open'` message.\n   */\n  export function isCommOpenMsg(msg: IMessage): msg is ICommOpenMsg {\n    return msg.header.msg_type === 'comm_open';\n  }\n\n  /**\n   * A `'comm_close'` message on the `'iopub'` channel.\n   *\n   * See [Comm close](https://jupyter-client.readthedocs.io/en/latest/messaging.html#opening-a-comm).\n   */\n  export interface ICommCloseMsg extends IIOPubMessage {\n    content: ICommClose;\n  }\n\n  /**\n   * The content of a `'comm_close'` method.  The message can\n   * be received on the `'iopub'` channel or send on the `'shell'` channel.\n   *\n   * See [Comm close](https://jupyter-client.readthedocs.io/en/latest/messaging.html#opening-a-comm).\n   */\n  export interface ICommClose extends JSONObject {\n    comm_id: string;\n    data: JSONValue;\n  }\n\n  /**\n   * Test whether a kernel message is a `'comm_close'` message.\n   */\n  export function isCommCloseMsg(msg: IMessage): msg is ICommCloseMsg {\n    return msg.header.msg_type === 'comm_close';\n  }\n\n  /**\n   * A `'comm_msg'` message on the `'iopub'` channel.\n   *\n   * See [Comm msg](https://jupyter-client.readthedocs.io/en/latest/messaging.html#opening-a-comm).\n   */\n  export interface ICommMsgMsg extends IIOPubMessage {\n    content: ICommMsg;\n  }\n\n  /**\n   * The content of a `'comm_msg'` message.  The message can\n   * be received on the `'iopub'` channel or send on the `'shell'` channel.\n   *\n   * See [Comm msg](https://jupyter-client.readthedocs.io/en/latest/messaging.html#opening-a-comm).\n   */\n  export interface ICommMsg extends JSONObject {\n    comm_id: string;\n    data: JSONValue;\n  }\n\n  /**\n   * Test whether a kernel message is a `'comm_msg'` message.\n   */\n  export function isCommMsgMsg(msg: IMessage): msg is ICommMsgMsg {\n    return msg.header.msg_type === 'comm_msg';\n  }\n\n  /**\n   * A `'kernel_info_reply'` message on the `'stream'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).\n   */\n  export interface IInfoReplyMsg extends IShellMessage {\n    content: IInfoReply;\n  }\n\n  /**\n   * The kernel info content.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).\n   */\n  export interface IInfoReply extends JSONObject {\n    protocol_version: string;\n    implementation: string;\n    implementation_version: string;\n    language_info: ILanguageInfo;\n    banner: string;\n    help_links: { text: string; url: string }[];\n  }\n\n  /**\n   * The kernel language information specification.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).\n   */\n  export interface ILanguageInfo extends nbformat.ILanguageInfoMetadata {\n    version: string;\n    nbconverter_exporter?: string;\n  }\n\n  /**\n   * The content of a  `'complete_request'` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#completion).\n   *\n   * **See also:** [[ICompleteReply]], [[IKernel.complete]]\n   */\n  export interface ICompleteRequest extends JSONObject {\n    code: string;\n    cursor_pos: number;\n  }\n\n  /**\n   * A `'complete_reply'` message on the `'stream'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#completion).\n   *\n   * **See also:** [[ICompleteRequest]], [[IKernel.complete]]\n   */\n  export interface ICompleteReplyMsg extends IShellMessage {\n    content: {\n      matches: string[];\n      cursor_start: number;\n      cursor_end: number;\n      metadata: JSONObject;\n      status: 'ok' | 'error';\n    };\n  }\n\n  /**\n   * The content of an `'inspect_request'` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#introspection).\n   *\n   * **See also:** [[IInspectReply]], [[[IKernel.inspect]]]\n   */\n  export interface IInspectRequest extends JSONObject {\n    code: string;\n    cursor_pos: number;\n    detail_level: 0 | 1;\n  }\n\n  /**\n   * A `'inspect_reply'` message on the `'stream'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#introspection).\n   *\n   * **See also:** [[IInspectRequest]], [[IKernel.inspect]]\n   */\n  export interface IInspectReplyMsg extends IShellMessage {\n    content: {\n      status: 'ok' | 'error';\n      found: boolean;\n      data: JSONObject;\n      metadata: JSONObject;\n    };\n  }\n\n  /**\n   * The content of a `'history_request'` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#history).\n   *\n   * **See also:** [[IHistoryReply]], [[[IKernel.history]]]\n   */\n  export interface IHistoryRequest extends JSONObject {\n    output: boolean;\n    raw: boolean;\n    hist_access_type: HistAccess;\n    session?: number;\n    start?: number;\n    stop?: number;\n    n?: number;\n    pattern?: string;\n    unique?: boolean;\n  }\n\n  /**\n   * A `'history_reply'` message on the `'stream'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#history).\n   *\n   * **See also:** [[IHistoryRequest]], [[IKernel.history]]\n   */\n  export interface IHistoryReplyMsg extends IShellMessage {\n    content: {\n      history: JSONValue[];\n    };\n  }\n\n  /**\n   * The history access settings.\n   */\n  export type HistAccess = 'range' | 'tail' | 'search';\n\n  /**\n   * The content of an `'is_complete_request'` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-completeness).\n   *\n   * **See also:** [[IIsCompleteReply]], [[IKernel.isComplete]]\n   */\n  export interface IIsCompleteRequest extends JSONObject {\n    code: string;\n  }\n\n  /**\n   * An `'is_complete_reply'` message on the `'stream'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-completeness).\n   *\n   * **See also:** [[IIsCompleteRequest]], [[IKernel.isComplete]]\n   */\n  export interface IIsCompleteReplyMsg extends IShellMessage {\n    content: {\n      status: string;\n      indent: string;\n    };\n  }\n\n  /**\n   * The content of an `'execute_request'` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execute).\n   *\n   * **See also:** [[IExecuteReply]], [[IKernel.execute]]\n   */\n  export interface IExecuteRequest extends IExecuteOptions {\n    code: string;\n  }\n\n  /**\n   * The options used to configure an execute request.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execute).\n   */\n  export interface IExecuteOptions extends JSONObject {\n    /**\n     * Whether to execute the code as quietly as possible.\n     * The default is `false`.\n     */\n    silent?: boolean;\n\n    /**\n     * Whether to store history of the execution.\n     * The default `true` if silent is False.\n     * It is forced to  `false ` if silent is `true`.\n     */\n    store_history?: boolean;\n\n    /**\n     * A mapping of names to expressions to be evaluated in the\n     * kernel's interactive namespace.\n     */\n    user_expressions?: JSONObject;\n\n    /**\n     * Whether to allow stdin requests.\n     * The default is `true`.\n     */\n    allow_stdin?: boolean;\n\n    /**\n     * Whether to the abort execution queue on an error.\n     * The default is `false`.\n     */\n    stop_on_error?: boolean;\n  }\n\n  /**\n   * An `'execute_reply'` message on the `'stream'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execution-results).\n   *\n   * **See also:** [[IExecuteRequest]], [[IKernel.execute]]\n   */\n  export interface IExecuteReplyMsg extends IShellMessage {\n    content: IExecuteReply;\n  }\n\n  /**\n   * The content of an `execute-reply` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execution-results).\n   */\n  export interface IExecuteReply extends JSONObject {\n    status: 'ok' | 'error' | 'abort';\n    execution_count: nbformat.ExecutionCount;\n  }\n\n  /**\n   * The `'execute_reply'` contents for an `'ok'` status.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execution-results).\n   */\n  export interface IExecuteOkReply extends IExecuteReply {\n    /**\n     * A list of payload objects.\n     * Payloads are considered deprecated.\n     * The only requirement of each payload object is that it have a 'source'\n     * key, which is a string classifying the payload (e.g. 'page').\n     */\n    payload?: JSONObject[];\n\n    /**\n     * Results for the user_expressions.\n     */\n    user_expressions: JSONObject;\n  }\n\n  /**\n   * The `'execute_reply'` contents for an `'error'` status.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execution-results).\n   */\n  export interface IExecuteErrorReply extends IExecuteReply {\n    /**\n     * The exception name.\n     */\n    ename: string;\n\n    /**\n     * The Exception value.\n     */\n    evalue: string;\n\n    /**\n     * A list of traceback frames.\n     */\n    traceback: string[];\n  }\n\n  /**\n   * Test whether a kernel message is an `'execute_reply'` message.\n   */\n  export function isExecuteReplyMsg(msg: IMessage): msg is IExecuteReplyMsg {\n    return msg.header.msg_type === 'execute_reply';\n  }\n\n  /**\n   * An `'input_request'` message on the `'stdin'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messages-on-the-stdin-router-dealer-sockets).\n   */\n  export interface IInputRequestMsg extends IStdinMessage {\n    content: IInputRequest;\n  }\n\n  /**\n   * The content of an `'input_request'` message.\n   */\n  export interface IInputRequest extends JSONObject {\n    /**\n     * The text to show at the prompt.\n     */\n    prompt: string;\n\n    /**\n     * Whether the request is for a password.\n     * If so, the frontend shouldn't echo input.\n     */\n    password: boolean;\n  }\n\n  /**\n   * Test whether a kernel message is an `'input_request'` message.\n   */\n  export function isInputRequestMsg(msg: IMessage): msg is IInputRequestMsg {\n    return msg.header.msg_type === 'input_request';\n  }\n\n  /**\n   * The content of an `'input_reply'` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messages-on-the-stdin-router-dealer-sockets).\n   *\n   * **See also:** [[IKernel.input_reply]]\n   */\n  export interface IInputReply extends JSONObject {\n    value: string;\n  }\n\n  /**\n   * The content of a `'comm_info_request'` message.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#comm-info).\n   *\n   * **See also:** [[ICommInfoReply]], [[IKernel.commInfo]]\n   */\n  export interface ICommInfoRequest extends JSONObject {\n    target?: string;\n  }\n\n  /**\n   * A `'comm_info_reply'` message on the `'stream'` channel.\n   *\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#comm-info).\n   *\n   * **See also:** [[ICommInfoRequest]], [[IKernel.commInfo]]\n   */\n  export interface ICommInfoReplyMsg extends IShellMessage {\n    content: {\n      /**\n       * Mapping of comm ids to target names.\n       */\n      comms: { [commId: string]: { target_name: string } };\n    };\n  }\n\n  /**\n   * Options for an `IMessage`.\n   *\n   * **See also:** [[IMessage]]\n   */\n  export interface IOptions {\n    msgType: string;\n    channel: Channel;\n    session: string;\n    username?: string;\n    msgId?: string;\n  }\n}\n"]}