{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../../services/src/kernel/manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ArrayExt, IIterator, iter } from '@phosphor/algorithm';\n\nimport { JSONExt } from '@phosphor/coreutils';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { ServerConnection } from '..';\n\nimport { Kernel } from './kernel';\n\n/**\n * An implementation of a kernel manager.\n */\nexport class KernelManager implements Kernel.IManager {\n  /**\n   * Construct a new kernel manager.\n   *\n   * @param options - The default options for kernel.\n   */\n  constructor(options: KernelManager.IOptions = {}) {\n    this.serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n\n    // Initialize internal data.\n    this._readyPromise = this._refreshSpecs().then(() => {\n      return this._refreshRunning();\n    });\n\n    // Set up polling.\n    this._modelsTimer = (setInterval as any)(() => {\n      if (typeof document !== 'undefined' && document.hidden) {\n        // Don't poll when nobody's looking.\n        return;\n      }\n      this._refreshRunning();\n    }, 10000);\n    this._specsTimer = (setInterval as any)(() => {\n      if (typeof document !== 'undefined' && document.hidden) {\n        // Don't poll when nobody's looking.\n        return;\n      }\n      this._refreshSpecs();\n    }, 61000);\n  }\n\n  /**\n   * A signal emitted when the specs change.\n   */\n  get specsChanged(): ISignal<this, Kernel.ISpecModels> {\n    return this._specsChanged;\n  }\n\n  /**\n   * A signal emitted when the running kernels change.\n   */\n  get runningChanged(): ISignal<this, Kernel.IModel[]> {\n    return this._runningChanged;\n  }\n\n  /**\n   * Test whether the terminal manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    clearInterval(this._modelsTimer);\n    clearInterval(this._specsTimer);\n    Signal.clearData(this);\n    this._models = [];\n  }\n\n  /**\n   * The server settings for the manager.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Get the most recently fetched kernel specs.\n   */\n  get specs(): Kernel.ISpecModels | null {\n    return this._specs;\n  }\n\n  /**\n   * Test whether the manager is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that fulfills when the manager is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Create an iterator over the most recent running kernels.\n   *\n   * @returns A new iterator over the running kernels.\n   */\n  running(): IIterator<Kernel.IModel> {\n    return iter(this._models);\n  }\n\n  /**\n   * Force a refresh of the specs from the server.\n   *\n   * @returns A promise that resolves when the specs are fetched.\n   *\n   * #### Notes\n   * This is intended to be called only in response to a user action,\n   * since the manager maintains its internal state.\n   */\n  refreshSpecs(): Promise<void> {\n    return this._refreshSpecs();\n  }\n\n  /**\n   * Force a refresh of the running kernels.\n   *\n   * @returns A promise that with the list of running sessions.\n   *\n   * #### Notes\n   * This is not typically meant to be called by the user, since the\n   * manager maintains its own internal state.\n   */\n  refreshRunning(): Promise<void> {\n    return this._refreshRunning();\n  }\n\n  /**\n   * Start a new kernel.\n   *\n   * @param options - The kernel options to use.\n   *\n   * @returns A promise that resolves with the kernel instance.\n   *\n   * #### Notes\n   * The manager `serverSettings` will be always be used.\n   */\n  startNew(options: Kernel.IOptions = {}): Promise<Kernel.IKernel> {\n    let newOptions = { ...options, serverSettings: this.serverSettings };\n    return Kernel.startNew(newOptions).then(kernel => {\n      this._onStarted(kernel);\n      return kernel;\n    });\n  }\n\n  /**\n   * Find a kernel by id.\n   *\n   * @param id - The id of the target kernel.\n   *\n   * @returns A promise that resolves with the kernel's model.\n   */\n  findById(id: string): Promise<Kernel.IModel> {\n    return Kernel.findById(id, this.serverSettings);\n  }\n\n  /**\n   * Connect to an existing kernel.\n   *\n   * @param model - The model of the target kernel.\n   *\n   * @returns A promise that resolves with the new kernel instance.\n   */\n  connectTo(model: Kernel.IModel): Kernel.IKernel {\n    let kernel = Kernel.connectTo(model, this.serverSettings);\n    this._onStarted(kernel);\n    return kernel;\n  }\n\n  /**\n   * Shut down a kernel by id.\n   *\n   * @param id - The id of the target kernel.\n   *\n   * @returns A promise that resolves when the operation is complete.\n   *\n   * #### Notes\n   * This will emit [[runningChanged]] if the running kernels list\n   * changes.\n   */\n  shutdown(id: string): Promise<void> {\n    let index = ArrayExt.findFirstIndex(this._models, value => value.id === id);\n    if (index === -1) {\n      return;\n    }\n\n    // Proactively remove the model.\n    this._models.splice(index, 1);\n    this._runningChanged.emit(this._models.slice());\n\n    return Kernel.shutdown(id, this.serverSettings).then(() => {\n      let toRemove: Kernel.IKernel[] = [];\n      this._kernels.forEach(k => {\n        if (k.id === id) {\n          k.dispose();\n          toRemove.push(k);\n        }\n      });\n      toRemove.forEach(k => {\n        this._kernels.delete(k);\n      });\n    });\n  }\n\n  /**\n   * Shut down all kernels.\n   *\n   * @returns A promise that resolves when all of the kernels are shut down.\n   */\n  shutdownAll(): Promise<void> {\n    // Proactively remove all models.\n    let models = this._models;\n    if (models.length > 0) {\n      this._models = [];\n      this._runningChanged.emit([]);\n    }\n\n    return this._refreshRunning().then(() => {\n      return Promise.all(\n        models.map(model => {\n          return Kernel.shutdown(model.id, this.serverSettings).then(() => {\n            let toRemove: Kernel.IKernel[] = [];\n            this._kernels.forEach(k => {\n              k.dispose();\n              toRemove.push(k);\n            });\n            toRemove.forEach(k => {\n              this._kernels.delete(k);\n            });\n          });\n        })\n      ).then(() => {\n        return undefined;\n      });\n    });\n  }\n\n  /**\n   * Handle a kernel terminating.\n   */\n  private _onTerminated(id: string): void {\n    let index = ArrayExt.findFirstIndex(this._models, value => value.id === id);\n    if (index !== -1) {\n      this._models.splice(index, 1);\n      this._runningChanged.emit(this._models.slice());\n    }\n  }\n\n  /**\n   * Handle a kernel starting.\n   */\n  private _onStarted(kernel: Kernel.IKernel): void {\n    let id = kernel.id;\n    this._kernels.add(kernel);\n    let index = ArrayExt.findFirstIndex(this._models, value => value.id === id);\n    if (index === -1) {\n      this._models.push(kernel.model);\n      this._runningChanged.emit(this._models.slice());\n    }\n    kernel.terminated.connect(() => {\n      this._onTerminated(id);\n    });\n  }\n\n  /**\n   * Refresh the specs.\n   */\n  private _refreshSpecs(): Promise<void> {\n    return Kernel.getSpecs(this.serverSettings).then(specs => {\n      if (!JSONExt.deepEqual(specs, this._specs)) {\n        this._specs = specs;\n        this._specsChanged.emit(specs);\n      }\n    });\n  }\n\n  /**\n   * Refresh the running sessions.\n   */\n  private _refreshRunning(): Promise<void> {\n    return Kernel.listRunning(this.serverSettings).then(models => {\n      this._isReady = true;\n      if (!JSONExt.deepEqual(models, this._models)) {\n        let ids = models.map(r => r.id);\n        let toRemove: Kernel.IKernel[] = [];\n        this._kernels.forEach(k => {\n          if (ids.indexOf(k.id) === -1) {\n            k.dispose();\n            toRemove.push(k);\n          }\n        });\n        toRemove.forEach(s => {\n          this._kernels.delete(s);\n        });\n        this._models = models.slice();\n        this._runningChanged.emit(models);\n      }\n    });\n  }\n\n  private _models: Kernel.IModel[] = [];\n  private _kernels = new Set<Kernel.IKernel>();\n  private _specs: Kernel.ISpecModels | null = null;\n  private _isDisposed = false;\n  private _modelsTimer = -1;\n  private _specsTimer = -1;\n  private _readyPromise: Promise<void>;\n  private _isReady = false;\n  private _specsChanged = new Signal<this, Kernel.ISpecModels>(this);\n  private _runningChanged = new Signal<this, Kernel.IModel[]>(this);\n}\n\n/**\n * The namespace for `KernelManager` class statics.\n */\nexport namespace KernelManager {\n  /**\n   * The options used to initialize a KernelManager.\n   */\n  export interface IOptions {\n    /**\n     * The server settings for the manager.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n"]}