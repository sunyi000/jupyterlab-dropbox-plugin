{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../../services/src/terminal/default.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\n\nimport { ArrayExt, each, map, toArray } from '@phosphor/algorithm';\n\nimport { JSONPrimitive } from '@phosphor/coreutils';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { ServerConnection } from '..';\n\nimport { TerminalSession } from './terminal';\n\n/**\n * The url for the terminal service.\n */\nconst TERMINAL_SERVICE_URL = 'api/terminals';\n\n/**\n * An implementation of a terminal interface.\n */\nexport class DefaultTerminalSession implements TerminalSession.ISession {\n  /**\n   * Construct a new terminal session.\n   */\n  constructor(name: string, options: TerminalSession.IOptions = {}) {\n    this._name = name;\n    this.serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n    this._readyPromise = this._initializeSocket();\n  }\n\n  /**\n   * A signal emitted when the session is shut down.\n   */\n  get terminated(): Signal<this, void> {\n    return this._terminated;\n  }\n\n  /**\n   * A signal emitted when a message is received from the server.\n   */\n  get messageReceived(): ISignal<this, TerminalSession.IMessage> {\n    return this._messageReceived;\n  }\n\n  /**\n   * Get the name of the terminal session.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the model for the terminal session.\n   */\n  get model(): TerminalSession.IModel {\n    return { name: this._name };\n  }\n\n  /**\n   * The server settings for the session.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the session is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that fulfills when the session is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Test whether the session is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the session.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    this.terminated.emit(undefined);\n    this._isDisposed = true;\n    if (this._ws) {\n      this._ws.close();\n      this._ws = null;\n    }\n    delete Private.running[this._url];\n    Signal.clearData(this);\n  }\n\n  /**\n   * Send a message to the terminal session.\n   */\n  send(message: TerminalSession.IMessage): void {\n    if (this._isDisposed || !message.content) {\n      return;\n    }\n\n    const msg = [message.type, ...message.content];\n    const socket = this._ws;\n    const value = JSON.stringify(msg);\n\n    if (this._isReady && socket) {\n      socket.send(value);\n      return;\n    }\n\n    this.ready.then(() => {\n      const socket = this._ws;\n\n      if (socket) {\n        socket.send(value);\n      }\n    });\n  }\n\n  /**\n   * Reconnect to the terminal.\n   *\n   * @returns A promise that resolves when the terminal has reconnected.\n   */\n  reconnect(): Promise<void> {\n    this._reconnectAttempt = 0;\n    this._readyPromise = this._initializeSocket();\n    return this._readyPromise;\n  }\n\n  /**\n   * Shut down the terminal session.\n   */\n  shutdown(): Promise<void> {\n    const { name, serverSettings } = this;\n    return DefaultTerminalSession.shutdown(name, serverSettings);\n  }\n\n  /**\n   * Clone the current session object.\n   */\n  clone(): TerminalSession.ISession {\n    const { name, serverSettings } = this;\n    return new DefaultTerminalSession(name, { serverSettings });\n  }\n\n  /**\n   * Connect to the websocket.\n   */\n  private _initializeSocket(): Promise<void> {\n    const name = this._name;\n    let socket = this._ws;\n\n    if (socket) {\n      // Clear the websocket event handlers and the socket itself.\n      socket.onopen = this._noOp;\n      socket.onclose = this._noOp;\n      socket.onerror = this._noOp;\n      socket.onmessage = this._noOp;\n      socket.close();\n      this._ws = null;\n    }\n    this._isReady = false;\n\n    return new Promise<void>((resolve, reject) => {\n      const settings = this.serverSettings;\n      const token = this.serverSettings.token;\n\n      this._url = Private.getTermUrl(settings.baseUrl, this._name);\n      Private.running[this._url] = this;\n\n      let wsUrl = URLExt.join(settings.wsUrl, `terminals/websocket/${name}`);\n\n      if (token) {\n        wsUrl = wsUrl + `?token=${encodeURIComponent(token)}`;\n      }\n\n      socket = this._ws = new settings.WebSocket(wsUrl);\n\n      socket.onmessage = (event: MessageEvent) => {\n        if (this._isDisposed) {\n          return;\n        }\n\n        const data = JSON.parse(event.data) as JSONPrimitive[];\n\n        if (this._reconnectAttempt > 0) {\n          // After reconnection, ignore all messages until a 'setup' message.\n          if (data[0] === 'setup') {\n            this._reconnectAttempt = 0;\n          }\n          return;\n        }\n\n        this._messageReceived.emit({\n          type: data[0] as TerminalSession.MessageType,\n          content: data.slice(1)\n        });\n      };\n\n      socket.onopen = (event: MessageEvent) => {\n        if (!this._isDisposed) {\n          this._isReady = true;\n          resolve(undefined);\n        }\n      };\n\n      socket.onerror = (event: Event) => {\n        if (!this._isDisposed) {\n          reject(event);\n        }\n      };\n\n      socket.onclose = (event: CloseEvent) => {\n        console.warn(`Terminal websocket closed: ${event.code}`);\n        this._reconnectSocket();\n      };\n    });\n  }\n\n  private _reconnectSocket(): void {\n    if (this._isDisposed || !this._ws) {\n      return;\n    }\n\n    const attempt = this._reconnectAttempt;\n    const limit = this._reconnectLimit;\n\n    if (attempt >= limit) {\n      console.log(`Terminal reconnect aborted: ${attempt} attempts`);\n      return;\n    }\n\n    const timeout = Math.pow(2, attempt);\n\n    console.log(`Terminal will attempt to reconnect in ${timeout}s`);\n    this._isReady = false;\n    this._reconnectAttempt += 1;\n\n    setTimeout(() => {\n      this._initializeSocket()\n        .then(() => {\n          console.log('Terminal reconnected');\n        })\n        .catch(reason => {\n          console.warn(`Terminal reconnect failed`, reason);\n        });\n    }, 1e3 * timeout);\n  }\n\n  private _isDisposed = false;\n  private _isReady = false;\n  private _messageReceived = new Signal<this, TerminalSession.IMessage>(this);\n  private _terminated = new Signal<this, void>(this);\n  private _name: string;\n  private _readyPromise: Promise<void>;\n  private _url: string;\n  private _ws: WebSocket | null = null;\n  private _noOp = () => {\n    /* no-op */\n  };\n  private _reconnectLimit = 7;\n  private _reconnectAttempt = 0;\n}\n\n/**\n * The static namespace for `DefaultTerminalSession`.\n */\nexport namespace DefaultTerminalSession {\n  /**\n   * Whether the terminal service is available.\n   */\n  export function isAvailable(): boolean {\n    let available = String(PageConfig.getOption('terminalsAvailable'));\n    return available.toLowerCase() === 'true';\n  }\n\n  /**\n   * Start a new terminal session.\n   *\n   * @param options - The session options to use.\n   *\n   * @returns A promise that resolves with the session instance.\n   */\n  export function startNew(\n    options: TerminalSession.IOptions = {}\n  ): Promise<TerminalSession.ISession> {\n    if (!TerminalSession.isAvailable()) {\n      throw Private.unavailableMsg;\n    }\n    let serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n    let url = Private.getServiceUrl(serverSettings.baseUrl);\n    let init = { method: 'POST' };\n\n    return ServerConnection.makeRequest(url, init, serverSettings)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new ServerConnection.ResponseError(response);\n        }\n        return response.json();\n      })\n      .then((data: TerminalSession.IModel) => {\n        let name = data.name;\n        return new DefaultTerminalSession(name, { ...options, serverSettings });\n      });\n  }\n\n  /*\n   * Connect to a running session.\n   *\n   * @param name - The name of the target session.\n   *\n   * @param options - The session options to use.\n   *\n   * @returns A promise that resolves with the new session instance.\n   *\n   * #### Notes\n   * If the session was already started via `startNew`, the existing\n   * session object is used as the fulfillment value.\n   *\n   * Otherwise, if `options` are given, we resolve the promise after\n   * confirming that the session exists on the server.\n   *\n   * If the session does not exist on the server, the promise is rejected.\n   */\n  export function connectTo(\n    name: string,\n    options: TerminalSession.IOptions = {}\n  ): Promise<TerminalSession.ISession> {\n    if (!TerminalSession.isAvailable()) {\n      return Promise.reject(Private.unavailableMsg);\n    }\n    let serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n    let url = Private.getTermUrl(serverSettings.baseUrl, name);\n    if (url in Private.running) {\n      return Promise.resolve(Private.running[url].clone());\n    }\n    return listRunning(serverSettings).then(models => {\n      let index = ArrayExt.findFirstIndex(models, model => {\n        return model.name === name;\n      });\n      if (index !== -1) {\n        let session = new DefaultTerminalSession(name, {\n          ...options,\n          serverSettings\n        });\n        return Promise.resolve(session);\n      }\n      return Promise.reject<TerminalSession.ISession>('Could not find session');\n    });\n  }\n\n  /**\n   * List the running terminal sessions.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves with the list of running session models.\n   */\n  export function listRunning(\n    settings?: ServerConnection.ISettings\n  ): Promise<TerminalSession.IModel[]> {\n    if (!TerminalSession.isAvailable()) {\n      return Promise.reject(Private.unavailableMsg);\n    }\n    settings = settings || ServerConnection.makeSettings();\n    let url = Private.getServiceUrl(settings.baseUrl);\n    return ServerConnection.makeRequest(url, {}, settings)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new ServerConnection.ResponseError(response);\n        }\n        return response.json();\n      })\n      .then((data: TerminalSession.IModel[]) => {\n        if (!Array.isArray(data)) {\n          throw new Error('Invalid terminal data');\n        }\n        // Update the local data store.\n        let urls = toArray(\n          map(data, item => {\n            return URLExt.join(url, item.name);\n          })\n        );\n        each(Object.keys(Private.running), runningUrl => {\n          if (urls.indexOf(runningUrl) === -1) {\n            let session = Private.running[runningUrl];\n            session.dispose();\n          }\n        });\n        return data;\n      });\n  }\n\n  /**\n   * Shut down a terminal session by name.\n   *\n   * @param name - The name of the target session.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves when the session is shut down.\n   */\n  export function shutdown(\n    name: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<void> {\n    if (!TerminalSession.isAvailable()) {\n      return Promise.reject(Private.unavailableMsg);\n    }\n    settings = settings || ServerConnection.makeSettings();\n    let url = Private.getTermUrl(settings.baseUrl, name);\n    let init = { method: 'DELETE' };\n    return ServerConnection.makeRequest(url, init, settings).then(response => {\n      if (response.status === 404) {\n        return response.json().then(data => {\n          console.warn(data['message']);\n          Private.killTerminal(url);\n        });\n      }\n      if (response.status !== 204) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      Private.killTerminal(url);\n    });\n  }\n\n  /**\n   * Shut down all terminal sessions.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves when all the sessions are shut down.\n   */\n  export function shutdownAll(\n    settings?: ServerConnection.ISettings\n  ): Promise<void> {\n    settings = settings || ServerConnection.makeSettings();\n    return listRunning(settings).then(running => {\n      each(running, s => {\n        shutdown(s.name, settings);\n      });\n    });\n  }\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * A mapping of running terminals by url.\n   */\n  export const running: {\n    [key: string]: DefaultTerminalSession;\n  } = Object.create(null);\n\n  /**\n   * A promise returned for when terminals are unavailable.\n   */\n  export const unavailableMsg = 'Terminals Unavailable';\n\n  /**\n   * Get the url for a terminal.\n   */\n  export function getTermUrl(baseUrl: string, name: string): string {\n    return URLExt.join(baseUrl, TERMINAL_SERVICE_URL, name);\n  }\n\n  /**\n   * Get the base url.\n   */\n  export function getServiceUrl(baseUrl: string): string {\n    return URLExt.join(baseUrl, TERMINAL_SERVICE_URL);\n  }\n\n  /**\n   * Kill a terminal by url.\n   */\n  export function killTerminal(url: string): void {\n    // Update the local data store.\n    if (Private.running[url]) {\n      let session = Private.running[url];\n      session.dispose();\n    }\n  }\n}\n"]}