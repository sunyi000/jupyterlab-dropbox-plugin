{"version":3,"file":"serverconnection.js","sourceRoot":"","sources":["../../../../services/src/serverconnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\n\n/**\n * Handle the default `fetch` and `WebSocket` providers.\n */\ndeclare var global: any;\n\nlet FETCH: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\nlet HEADERS: typeof Headers;\nlet REQUEST: typeof Request;\nlet WEBSOCKET: typeof WebSocket;\n\nif (typeof window === 'undefined') {\n  // Mangle the require statements so it does not get picked up in the\n  // browser assets.\n  /* tslint:disable */\n  let fetchMod = eval('require')('node-fetch');\n  FETCH = global.fetch || fetchMod;\n  REQUEST = global.Request || fetchMod.Request;\n  HEADERS = global.Headers || fetchMod.Headers;\n  WEBSOCKET = global.WebSocket || eval('require')('ws');\n  /* tslint:enable */\n} else {\n  FETCH = fetch;\n  REQUEST = Request;\n  HEADERS = Headers;\n  WEBSOCKET = WebSocket;\n}\n\n/**\n * The namespace for ServerConnection functions.\n *\n * #### Notes\n * This is only intended to manage communication with the Jupyter server.\n *\n * The default values can be used in a JupyterLab or Jupyter Notebook context.\n *\n * We use `token` authentication if available, falling back on an XSRF\n * cookie if one has been provided on the `document`.\n *\n * A content type of `'application/json'` is added when using authentication\n * and there is no body data to allow the server to prevent malicious forms.\n */\nexport namespace ServerConnection {\n  /**\n   * A Jupyter server settings object.\n   * Note that all of the settings are optional when passed to\n   * [[makeSettings]].  The default settings are given in [[defaultSettings]].\n   */\n  export interface ISettings {\n    /**\n     * The base url of the server.\n     */\n    readonly baseUrl: string;\n\n    /**\n     * The page url of the JupyterLab application.\n     */\n    readonly pageUrl: string;\n\n    /**\n     * The base ws url of the server.\n     */\n    readonly wsUrl: string;\n\n    /**\n     * The default request init options.\n     */\n    readonly init: RequestInit;\n\n    /**\n     * The authentication token for requests.  Use an empty string to disable.\n     */\n    readonly token: string;\n\n    /**\n     * The `fetch` method to use.\n     */\n    readonly fetch: (\n      input: RequestInfo,\n      init?: RequestInit\n    ) => Promise<Response>;\n\n    /**\n     * The `Request` object constructor.\n     */\n    readonly Request: typeof Request;\n\n    /**\n     * The `Headers` object constructor.\n     */\n    readonly Headers: typeof Headers;\n\n    /**\n     * The `WebSocket` object constructor.\n     */\n    readonly WebSocket: typeof WebSocket;\n  }\n\n  /**\n   * Create a settings object given a subset of options.\n   *\n   * @param options - An optional partial set of options.\n   *\n   * @returns The full settings object.\n   */\n  export function makeSettings(options?: Partial<ISettings>) {\n    return Private.makeSettings(options);\n  }\n\n  /**\n   * Make an request to the notebook server.\n   *\n   * @param url - The url for the request.\n   *\n   * @param init - The initialization options for the request.\n   *\n   * @param settings - The server settings to apply to the request.\n   *\n   * @returns a Promise that resolves with the response.\n   *\n   * @throws If the url of the request is not a notebook server url.\n   *\n   * #### Notes\n   * The `url` must start with `settings.baseUrl`.  The `init` settings are\n   * merged with `settings.init`, with `init` taking precedence.\n   * The headers in the two objects are not merged.\n   * If there is no body data, we set the content type to `application/json`\n   * because it is required by the Notebook server.\n   */\n  export function makeRequest(\n    url: string,\n    init: RequestInit,\n    settings: ISettings\n  ): Promise<Response> {\n    return Private.handleRequest(url, init, settings);\n  }\n\n  /**\n   * A wrapped error for a fetch response.\n   */\n  export class ResponseError extends Error {\n    /**\n     * Create a new response error.\n     */\n    constructor(response: Response, message?: string) {\n      message =\n        message ||\n        `Invalid response: ${response.status} ${response.statusText}`;\n      super(message);\n      this.response = response;\n    }\n\n    /**\n     * The response associated with the error.\n     */\n    response: Response;\n  }\n\n  /**\n   * A wrapped error for a network error.\n   */\n  export class NetworkError extends TypeError {\n    /**\n     * Create a new network error.\n     */\n    constructor(original: TypeError) {\n      super(original.message);\n      this.stack = original.stack;\n    }\n  }\n\n  /**\n   * The default settings.\n   */\n  export const defaultSettings: ServerConnection.ISettings = {\n    baseUrl: PageConfig.getBaseUrl(),\n    pageUrl: PageConfig.getOption('pageUrl'),\n    wsUrl: PageConfig.getWsUrl(),\n    token: PageConfig.getToken(),\n    init: { cache: 'no-store', credentials: 'same-origin' },\n    fetch: FETCH,\n    Headers: HEADERS,\n    Request: REQUEST,\n    WebSocket: WEBSOCKET\n  };\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Handle the server connection settings, returning a new value.\n   */\n  export function makeSettings(\n    options: Partial<ServerConnection.ISettings> = {}\n  ): ServerConnection.ISettings {\n    const defaultSettings = ServerConnection.defaultSettings;\n    const baseUrl =\n      URLExt.normalize(options.baseUrl) || defaultSettings.baseUrl;\n    let wsUrl = options.wsUrl;\n    // Prefer the default wsUrl if we are using the default baseUrl.\n    if (!wsUrl && baseUrl === defaultSettings.baseUrl) {\n      wsUrl = defaultSettings.wsUrl;\n    }\n    // Otherwise convert the baseUrl to a wsUrl if possible.\n    if (!wsUrl && baseUrl.indexOf('http') === 0) {\n      wsUrl = 'ws' + baseUrl.slice(4);\n    }\n    // Otherwise fall back on the default wsUrl.\n    wsUrl = wsUrl || defaultSettings.wsUrl;\n    return {\n      ...defaultSettings,\n      ...options,\n      ...{ wsUrl }\n    };\n  }\n\n  /**\n   * Handle a request.\n   *\n   * @param url - The url for the request.\n   *\n   * @param init - The overrides for the request init.\n   *\n   * @param settings - The settings object for the request.\n   *\n   * #### Notes\n   * The `url` must start with `settings.baseUrl`.  The `init` settings\n   * take precedence over `settings.init`.\n   */\n  export function handleRequest(\n    url: string,\n    init: RequestInit,\n    settings: ServerConnection.ISettings\n  ): Promise<Response> {\n    // Handle notebook server requests.\n    if (url.indexOf(settings.baseUrl) !== 0) {\n      throw new Error('Can only be used for notebook server requests');\n    }\n\n    // Use explicit cache buster when `no-store` is set since\n    // not all browsers use it properly.\n    let cache = init.cache || settings.init.cache;\n    if (cache === 'no-store') {\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n      url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n    }\n\n    let request = new settings.Request(url, { ...settings.init, ...init });\n\n    // Handle authentication.\n    let authenticated = false;\n    if (settings.token) {\n      authenticated = true;\n      request.headers.append('Authorization', `token ${settings.token}`);\n    } else if (typeof document !== 'undefined' && document.cookie) {\n      let xsrfToken = getCookie('_xsrf');\n      if (xsrfToken !== void 0) {\n        authenticated = true;\n        request.headers.append('X-XSRFToken', xsrfToken);\n      }\n    }\n\n    // Set the content type if there is no given data and we are\n    // using an authenticated connection.\n    if (!request.bodyUsed && authenticated) {\n      request.headers.set('Content-Type', 'application/json');\n    }\n\n    // Use `call` to avoid a `TypeError` in the browser.\n    return settings.fetch.call(null, request).catch((e: TypeError) => {\n      // Convert the TypeError into a more specific error.\n      throw new ServerConnection.NetworkError(e);\n    });\n  }\n\n  /**\n   * Get a cookie from the document.\n   */\n  function getCookie(name: string) {\n    // from tornado docs: http://www.tornadoweb.org/en/stable/guide/security.html\n    let r = document.cookie.match('\\\\b' + name + '=([^;]*)\\\\b');\n    return r ? r[1] : void 0;\n  }\n}\n"]}