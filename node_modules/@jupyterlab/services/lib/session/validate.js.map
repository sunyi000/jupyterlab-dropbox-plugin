{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../../services/src/session/validate.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,iDAA0E;AAI1E;;;GAGG;AACH,0BAA0B,MAAW,EAAE,IAAY,EAAE,QAAiB;IACpE,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;QAChC,MAAM,KAAK,CAAC,qBAAqB,IAAI,GAAG,CAAC,CAAC;KAC3C;IACD,IAAI,QAAQ,KAAK,KAAK,CAAC,EAAE;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,QAAQ,QAAQ,EAAE;YAChB,KAAK,OAAO;gBACV,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7B,MAAM;YACR,KAAK,QAAQ;gBACX,KAAK,GAAG,OAAO,KAAK,KAAK,WAAW,CAAC;gBACrC,MAAM;YACR;gBACE,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC;SACrC;QACD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,aAAa,IAAI,qBAAqB,QAAQ,GAAG,CAAC,CAAC;SACpE;KACF;AACH,CAAC;AAED;;GAEG;AACH,uBAA8B,IAAS;IACrC,IAAI,KAAK,GAAG;QACV,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,IAAI,EAAE,IAAI,CAAC,IAAI;KAChB,CAAC;IACF,gCAAgC;IAChC,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;QAC1D,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAChC,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC;QACxB,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;KACjB;IACD,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC5C,wBAAmB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,OAAO,KAAK,CAAC;AACf,CAAC;AArBD,sCAqBC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { validateModel as validateKernelModel } from '../kernel/validate';\n\nimport { Session } from './session';\n\n/**\n * Validate a property as being on an object, and optionally\n * of a given type.\n */\nfunction validateProperty(object: any, name: string, typeName?: string): void {\n  if (!object.hasOwnProperty(name)) {\n    throw Error(`Missing property '${name}'`);\n  }\n  if (typeName !== void 0) {\n    let valid = true;\n    let value = object[name];\n    switch (typeName) {\n      case 'array':\n        valid = Array.isArray(value);\n        break;\n      case 'object':\n        valid = typeof value !== 'undefined';\n        break;\n      default:\n        valid = typeof value === typeName;\n    }\n    if (!valid) {\n      throw new Error(`Property '${name}' is not of type '${typeName}'`);\n    }\n  }\n}\n\n/**\n * Validate an `Session.IModel` object.\n */\nexport function validateModel(data: any): Session.IModel {\n  let model = {\n    id: data.id,\n    kernel: data.kernel,\n    name: data.name,\n    path: data.path,\n    type: data.type\n  };\n  // Support legacy session model.\n  if (data.path === undefined && data.notebook !== undefined) {\n    model.path = data.notebook.path;\n    model.type = 'notebook';\n    model.name = '';\n  }\n  validateProperty(model, 'id', 'string');\n  validateProperty(model, 'type', 'string');\n  validateProperty(model, 'name', 'string');\n  validateProperty(model, 'path', 'string');\n  validateProperty(model, 'kernel', 'object');\n  validateKernelModel(model.kernel);\n  return model;\n}\n"]}