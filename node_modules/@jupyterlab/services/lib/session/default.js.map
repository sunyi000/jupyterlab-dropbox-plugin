{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../../services/src/session/default.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { URLExt } from '@jupyterlab/coreutils';\n\nimport { ArrayExt, each, find } from '@phosphor/algorithm';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Kernel, KernelMessage } from '../kernel';\n\nimport { ServerConnection } from '..';\n\nimport { Session } from './session';\n\nimport * as validate from './validate';\n\n/**\n * The url for the session service.\n */\nconst SESSION_SERVICE_URL = 'api/sessions';\n\n/**\n * Session object for accessing the session REST api. The session\n * should be used to start kernels and then shut them down -- for\n * all other operations, the kernel object should be used.\n */\nexport class DefaultSession implements Session.ISession {\n  /**\n   * Construct a new session.\n   */\n  constructor(options: Session.IOptions, id: string, kernel: Kernel.IKernel) {\n    this._id = id;\n    this._path = options.path;\n    this._type = options.type || 'file';\n    this._name = options.name || '';\n    this.serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n    Private.addRunning(this);\n    this.setupKernel(kernel);\n  }\n\n  /**\n   * A signal emitted when the session is shut down.\n   */\n  get terminated(): ISignal<this, void> {\n    return this._terminated;\n  }\n\n  /**\n   * A signal emitted when the kernel changes.\n   */\n  get kernelChanged(): ISignal<this, Session.IKernelChangedArgs> {\n    return this._kernelChanged;\n  }\n\n  /**\n   * A signal emitted when the kernel status changes.\n   */\n  get statusChanged(): ISignal<this, Kernel.Status> {\n    return this._statusChanged;\n  }\n\n  /**\n   * A signal emitted for a kernel messages.\n   */\n  get iopubMessage(): ISignal<this, KernelMessage.IIOPubMessage> {\n    return this._iopubMessage;\n  }\n\n  /**\n   * A signal emitted for an unhandled kernel message.\n   */\n  get unhandledMessage(): ISignal<this, KernelMessage.IMessage> {\n    return this._unhandledMessage;\n  }\n\n  /**\n   * A signal emitted for any kernel message.\n   *\n   * Note: The behavior is undefined if the message is modified\n   * during message handling. As such, it should be treated as read-only.\n   */\n  get anyMessage(): ISignal<this, Kernel.IAnyMessageArgs> {\n    return this._anyMessage;\n  }\n\n  /**\n   * A signal emitted when a session property changes.\n   */\n  get propertyChanged(): ISignal<this, 'path' | 'name' | 'type'> {\n    return this._propertyChanged;\n  }\n\n  /**\n   * Get the session id.\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the session kernel object.\n   *\n   * #### Notes\n   * This is a read-only property, and can be altered by [changeKernel].\n   */\n  get kernel(): Kernel.IKernelConnection {\n    return this._kernel;\n  }\n\n  /**\n   * Get the session path.\n   */\n  get path(): string {\n    return this._path;\n  }\n\n  /**\n   * Get the session type.\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Get the session name.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the model associated with the session.\n   */\n  get model(): Session.IModel {\n    return {\n      id: this.id,\n      kernel: this.kernel.model,\n      path: this._path,\n      type: this._type,\n      name: this._name\n    };\n  }\n\n  /**\n   * The current status of the session.\n   *\n   * #### Notes\n   * This is a delegate to the kernel status.\n   */\n  get status(): Kernel.Status {\n    return this._kernel ? this._kernel.status : 'dead';\n  }\n\n  /**\n   * The server settings of the session.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the session has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed === true;\n  }\n\n  /**\n   * Clone the current session with a new clientId.\n   */\n  clone(): Session.ISession {\n    const kernel = Kernel.connectTo(this.kernel.model, this.serverSettings);\n    return new DefaultSession(\n      {\n        path: this._path,\n        name: this._name,\n        type: this._type,\n        serverSettings: this.serverSettings\n      },\n      this._id,\n      kernel\n    );\n  }\n\n  /**\n   * Update the session based on a session model from the server.\n   */\n  update(model: Session.IModel): void {\n    // Avoid a race condition if we are waiting for a REST call return.\n    if (this._updating) {\n      return;\n    }\n    let oldModel = this.model;\n    this._path = model.path;\n    this._name = model.name;\n    this._type = model.type;\n\n    if (this._kernel.isDisposed || model.kernel.id !== this._kernel.id) {\n      let newValue = Kernel.connectTo(model.kernel, this.serverSettings);\n      let oldValue = this._kernel;\n      this.setupKernel(newValue);\n      this._kernelChanged.emit({ oldValue, newValue });\n      this._handleModelChange(oldModel);\n      return;\n    }\n\n    this._handleModelChange(oldModel);\n  }\n\n  /**\n   * Dispose of the resources held by the session.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._kernel.dispose();\n    this._statusChanged.emit('dead');\n    this._terminated.emit(void 0);\n    Private.removeRunning(this);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Change the session path.\n   *\n   * @param path - The new session path.\n   *\n   * @returns A promise that resolves when the session has renamed.\n   *\n   * #### Notes\n   * This uses the Jupyter REST API, and the response is validated.\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  setPath(path: string): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ path });\n    return this._patch(data).then(() => {\n      return void 0;\n    });\n  }\n\n  /**\n   * Change the session name.\n   */\n  setName(name: string): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ name });\n    return this._patch(data).then(() => {\n      return void 0;\n    });\n  }\n\n  /**\n   * Change the session type.\n   */\n  setType(type: string): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ type });\n    return this._patch(data).then(() => {\n      return void 0;\n    });\n  }\n\n  /**\n   * Change the kernel.\n   *\n   * @params options - The name or id of the new kernel.\n   *\n   * #### Notes\n   * This shuts down the existing kernel and creates a new kernel,\n   * keeping the existing session ID and session path.\n   */\n  changeKernel(\n    options: Partial<Kernel.IModel>\n  ): Promise<Kernel.IKernelConnection> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ kernel: options });\n    this._kernel.dispose();\n    this._statusChanged.emit('restarting');\n    return this._patch(data).then(() => this.kernel);\n  }\n\n  /**\n   * Kill the kernel and shutdown the session.\n   *\n   * @returns - The promise fulfilled on a valid response from the server.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.\n   * Disposes of the session and emits a [sessionDied] signal on success.\n   */\n  shutdown(): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    return Private.shutdownSession(this.id, this.serverSettings);\n  }\n\n  /**\n   * Handle connections to a kernel.  This method is not meant to be\n   * subclassed.\n   */\n  protected setupKernel(kernel: Kernel.IKernel): void {\n    this._kernel = kernel;\n    kernel.statusChanged.connect(this.onKernelStatus, this);\n    kernel.unhandledMessage.connect(this.onUnhandledMessage, this);\n    kernel.iopubMessage.connect(this.onIOPubMessage, this);\n    kernel.anyMessage.connect(this.onAnyMessage, this);\n  }\n\n  /**\n   * Handle to changes in the Kernel status.\n   */\n  protected onKernelStatus(sender: Kernel.IKernel, state: Kernel.Status) {\n    this._statusChanged.emit(state);\n  }\n\n  /**\n   * Handle iopub kernel messages.\n   */\n  protected onIOPubMessage(\n    sender: Kernel.IKernel,\n    msg: KernelMessage.IIOPubMessage\n  ) {\n    this._iopubMessage.emit(msg);\n  }\n\n  /**\n   * Handle unhandled kernel messages.\n   */\n  protected onUnhandledMessage(\n    sender: Kernel.IKernel,\n    msg: KernelMessage.IMessage\n  ) {\n    this._unhandledMessage.emit(msg);\n  }\n\n  /**\n   * Handle any kernel messages.\n   */\n  protected onAnyMessage(sender: Kernel.IKernel, args: Kernel.IAnyMessageArgs) {\n    this._anyMessage.emit(args);\n  }\n\n  /**\n   * Send a PATCH to the server, updating the session path or the kernel.\n   */\n  private _patch(body: string): Promise<Session.IModel> {\n    this._updating = true;\n    let settings = this.serverSettings;\n    let url = Private.getSessionUrl(settings.baseUrl, this._id);\n    let init = {\n      method: 'PATCH',\n      body\n    };\n    return ServerConnection.makeRequest(url, init, settings)\n      .then(response => {\n        this._updating = false;\n        if (response.status !== 200) {\n          throw new ServerConnection.ResponseError(response);\n        }\n        return response.json();\n      })\n      .then(\n        data => {\n          let model = validate.validateModel(data);\n          return Private.updateFromServer(model, settings.baseUrl);\n        },\n        error => {\n          this._updating = false;\n          throw error;\n        }\n      );\n  }\n\n  /**\n   * Handle a change to the model.\n   */\n  private _handleModelChange(oldModel: Session.IModel): void {\n    if (oldModel.name !== this._name) {\n      this._propertyChanged.emit('name');\n    }\n    if (oldModel.type !== this._type) {\n      this._propertyChanged.emit('type');\n    }\n    if (oldModel.path !== this._path) {\n      this._propertyChanged.emit('path');\n    }\n  }\n\n  private _id = '';\n  private _path = '';\n  private _name = '';\n  private _type = '';\n  private _kernel: Kernel.IKernel;\n  private _isDisposed = false;\n  private _updating = false;\n  private _kernelChanged = new Signal<this, Session.IKernelChangedArgs>(this);\n  private _statusChanged = new Signal<this, Kernel.Status>(this);\n  private _iopubMessage = new Signal<this, KernelMessage.IIOPubMessage>(this);\n  private _unhandledMessage = new Signal<this, KernelMessage.IMessage>(this);\n  private _anyMessage = new Signal<this, Kernel.IAnyMessageArgs>(this);\n  private _propertyChanged = new Signal<this, 'path' | 'name' | 'type'>(this);\n  private _terminated = new Signal<this, void>(this);\n}\n\n/**\n * The namespace for `DefaultSession` statics.\n */\nexport namespace DefaultSession {\n  /**\n   * List the running sessions.\n   */\n  export function listRunning(\n    settings?: ServerConnection.ISettings\n  ): Promise<Session.IModel[]> {\n    return Private.listRunning(settings);\n  }\n\n  /**\n   * Start a new session.\n   */\n  export function startNew(\n    options: Session.IOptions\n  ): Promise<Session.ISession> {\n    return Private.startNew(options);\n  }\n\n  /**\n   * Find a session by id.\n   */\n  export function findById(\n    id: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<Session.IModel> {\n    return Private.findById(id, settings);\n  }\n\n  /**\n   * Find a session by path.\n   */\n  export function findByPath(\n    path: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<Session.IModel> {\n    return Private.findByPath(path, settings);\n  }\n\n  /**\n   * Connect to a running session.\n   */\n  export function connectTo(\n    model: Session.IModel,\n    settings?: ServerConnection.ISettings\n  ): Session.ISession {\n    return Private.connectTo(model, settings);\n  }\n\n  /**\n   * Shut down a session by id.\n   */\n  export function shutdown(\n    id: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<void> {\n    return Private.shutdownSession(id, settings);\n  }\n\n  /**\n   * Shut down all sessions.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves when all the sessions are shut down.\n   */\n  export function shutdownAll(\n    settings?: ServerConnection.ISettings\n  ): Promise<void> {\n    return Private.shutdownAll(settings);\n  }\n}\n\n/**\n * A namespace for session private data.\n */\nnamespace Private {\n  /**\n   * The running sessions mapped by base url.\n   */\n  const runningSessions = new Map<string, DefaultSession[]>();\n\n  /**\n   * Add a session to the running sessions.\n   */\n  export function addRunning(session: DefaultSession): void {\n    let running: DefaultSession[] =\n      runningSessions.get(session.serverSettings.baseUrl) || [];\n    running.push(session);\n    runningSessions.set(session.serverSettings.baseUrl, running);\n  }\n\n  /**\n   * Remove a session from the running sessions.\n   */\n  export function removeRunning(session: DefaultSession): void {\n    let running = runningSessions.get(session.serverSettings.baseUrl);\n    if (running) {\n      ArrayExt.removeFirstOf(running, session);\n    }\n  }\n\n  /**\n   * Connect to a running session.\n   */\n  export function connectTo(\n    model: Session.IModel,\n    settings?: ServerConnection.ISettings\n  ): Session.ISession {\n    settings = settings || ServerConnection.makeSettings();\n    let running = runningSessions.get(settings.baseUrl) || [];\n    let session = find(running, value => value.id === model.id);\n    if (session) {\n      return session.clone();\n    }\n    return createSession(model, settings);\n  }\n\n  /**\n   * Create a Session object.\n   *\n   * @returns - A promise that resolves with a started session.\n   */\n  export function createSession(\n    model: Session.IModel,\n    settings?: ServerConnection.ISettings\n  ): DefaultSession {\n    settings = settings || ServerConnection.makeSettings();\n    let kernel = Kernel.connectTo(model.kernel, settings);\n    return new DefaultSession(\n      {\n        path: model.path,\n        type: model.type,\n        name: model.name,\n        serverSettings: settings\n      },\n      model.id,\n      kernel\n    );\n  }\n\n  /**\n   * Find a session by id.\n   */\n  export function findById(\n    id: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<Session.IModel> {\n    settings = settings || ServerConnection.makeSettings();\n    let running = runningSessions.get(settings.baseUrl) || [];\n    let session = find(running, value => value.id === id);\n    if (session) {\n      return Promise.resolve(session.model);\n    }\n\n    return getSessionModel(id, settings).catch(() => {\n      throw new Error(`No running session for id: ${id}`);\n    });\n  }\n\n  /**\n   * Find a session by path.\n   */\n  export function findByPath(\n    path: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<Session.IModel> {\n    settings = settings || ServerConnection.makeSettings();\n    let running = runningSessions.get(settings.baseUrl) || [];\n    let session = find(running, value => value.path === path);\n    if (session) {\n      return Promise.resolve(session.model);\n    }\n\n    return listRunning(settings).then(models => {\n      let model = find(models, value => {\n        return value.path === path;\n      });\n      if (model) {\n        return model;\n      }\n      throw new Error(`No running session for path: ${path}`);\n    });\n  }\n\n  /**\n   * Get a full session model from the server by session id string.\n   */\n  export function getSessionModel(\n    id: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<Session.IModel> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = getSessionUrl(settings.baseUrl, id);\n    return ServerConnection.makeRequest(url, {}, settings)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new ServerConnection.ResponseError(response);\n        }\n        return response.json();\n      })\n      .then(data => {\n        validate.validateModel(data);\n        return updateFromServer(data, settings!.baseUrl);\n      });\n  }\n\n  /**\n   * Get a session url.\n   */\n  export function getSessionUrl(baseUrl: string, id: string): string {\n    return URLExt.join(baseUrl, SESSION_SERVICE_URL, id);\n  }\n\n  /**\n   * Kill the sessions by id.\n   */\n  function killSessions(id: string, baseUrl: string): void {\n    let running = runningSessions.get(baseUrl) || [];\n    each(running.slice(), session => {\n      if (session.id === id) {\n        session.dispose();\n      }\n    });\n  }\n\n  /**\n   * List the running sessions.\n   */\n  export function listRunning(\n    settings?: ServerConnection.ISettings\n  ): Promise<Session.IModel[]> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = URLExt.join(settings.baseUrl, SESSION_SERVICE_URL);\n    return ServerConnection.makeRequest(url, {}, settings)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new ServerConnection.ResponseError(response);\n        }\n        return response.json();\n      })\n      .then(data => {\n        if (!Array.isArray(data)) {\n          throw new Error('Invalid Session list');\n        }\n        for (let i = 0; i < data.length; i++) {\n          validate.validateModel(data[i]);\n        }\n        return updateRunningSessions(data, settings!.baseUrl);\n      });\n  }\n\n  /**\n   * Shut down a session by id.\n   */\n  export function shutdownSession(\n    id: string,\n    settings?: ServerConnection.ISettings\n  ): Promise<void> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = getSessionUrl(settings.baseUrl, id);\n    let init = { method: 'DELETE' };\n    return ServerConnection.makeRequest(url, init, settings).then(response => {\n      if (response.status === 404) {\n        response.json().then(data => {\n          let msg =\n            data.message || `The session \"${id}\"\" does not exist on the server`;\n          console.warn(msg);\n        });\n      } else if (response.status === 410) {\n        throw new ServerConnection.ResponseError(\n          response,\n          'The kernel was deleted but the session was not'\n        );\n      } else if (response.status !== 204) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      killSessions(id, settings!.baseUrl);\n    });\n  }\n\n  /**\n   * Shut down all sessions.\n   */\n  export function shutdownAll(\n    settings?: ServerConnection.ISettings\n  ): Promise<void> {\n    settings = settings || ServerConnection.makeSettings();\n    return listRunning(settings).then(running => {\n      each(running, s => {\n        shutdownSession(s.id, settings);\n      });\n    });\n  }\n\n  /**\n   * Start a new session.\n   */\n  export function startNew(\n    options: Session.IOptions\n  ): Promise<Session.ISession> {\n    if (options.path === void 0) {\n      return Promise.reject(new Error('Must specify a path'));\n    }\n    return startSession(options).then(model => {\n      return createSession(model, options.serverSettings);\n    });\n  }\n\n  /**\n   * Create a new session, or return an existing session if\n   * the session path already exists\n   */\n  export function startSession(\n    options: Session.IOptions\n  ): Promise<Session.IModel> {\n    let settings = options.serverSettings || ServerConnection.makeSettings();\n    let model = {\n      kernel: { name: options.kernelName, id: options.kernelId },\n      path: options.path,\n      type: options.type || '',\n      name: options.name || ''\n    };\n    let url = URLExt.join(settings.baseUrl, SESSION_SERVICE_URL);\n    let init = {\n      method: 'POST',\n      body: JSON.stringify(model)\n    };\n    return ServerConnection.makeRequest(url, init, settings)\n      .then(response => {\n        if (response.status !== 201) {\n          throw new ServerConnection.ResponseError(response);\n        }\n        return response.json();\n      })\n      .then(data => {\n        validate.validateModel(data);\n        return updateFromServer(data, settings.baseUrl);\n      });\n  }\n\n  /**\n   * Update the running sessions given an updated session Id.\n   */\n  export function updateFromServer(\n    model: Session.IModel,\n    baseUrl: string\n  ): Session.IModel {\n    let running = runningSessions.get(baseUrl) || [];\n    each(running.slice(), session => {\n      if (session.id === model.id) {\n        session.update(model);\n      }\n    });\n    return model;\n  }\n\n  /**\n   * Update the running sessions based on new data from the server.\n   */\n  export function updateRunningSessions(\n    sessions: Session.IModel[],\n    baseUrl: string\n  ): Session.IModel[] {\n    let running = runningSessions.get(baseUrl) || [];\n    each(running.slice(), session => {\n      let updated = find(sessions, sId => {\n        if (session.id === sId.id) {\n          session.update(sId);\n          return true;\n        }\n        return false;\n      });\n      // If session is no longer running on disk, emit dead signal.\n      if (!updated && session.status !== 'dead') {\n        session.dispose();\n      }\n    });\n    return sessions;\n  }\n}\n"]}