{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/workspace/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { URLExt } from '@jupyterlab/coreutils';\n\nimport { ReadonlyJSONObject } from '@phosphor/coreutils';\n\nimport { ServerConnection } from '../serverconnection';\n\n/**\n * The url for the lab workspaces service.\n */\nconst SERVICE_WORKSPACES_URL = 'api/workspaces';\n\n/**\n * The workspaces API service manager.\n */\nexport class WorkspaceManager {\n  /**\n   * Create a new workspace manager.\n   */\n  constructor(options: WorkspaceManager.IOptions = {}) {\n    this.serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n  }\n\n  /**\n   * The server settings used to make API requests.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Fetch a workspace.\n   *\n   * @param id - The workspaces's ID.\n   *\n   * @returns A promise that resolves if successful.\n   */\n  async fetch(id: string): Promise<Workspace.IWorkspace> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const { makeRequest, ResponseError } = ServerConnection;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, id);\n    const response = await makeRequest(url, {}, serverSettings);\n\n    if (response.status !== 200) {\n      throw new ResponseError(response);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Fetch the list of workspace IDs that exist on the server.\n   *\n   * @returns A promise that resolves if successful.\n   */\n  async list(): Promise<string[]> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const { makeRequest, ResponseError } = ServerConnection;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, '');\n    const response = await makeRequest(url, {}, serverSettings);\n\n    if (response.status !== 200) {\n      throw new ResponseError(response);\n    }\n\n    const result = await response.json();\n\n    return result.workspaces;\n  }\n\n  /**\n   * Remove a workspace from the server.\n   *\n   * @param id - The workspaces's ID.\n   *\n   * @returns A promise that resolves if successful.\n   */\n  async remove(id: string): Promise<void> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const { makeRequest, ResponseError } = ServerConnection;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, id);\n    const init = { method: 'DELETE' };\n    const response = await makeRequest(url, init, serverSettings);\n\n    if (response.status !== 204) {\n      throw new ResponseError(response);\n    }\n  }\n\n  /**\n   * Save a workspace.\n   *\n   * @param id - The workspace's ID.\n   *\n   * @param workspace - The workspace being saved.\n   *\n   * @returns A promise that resolves if successful.\n   */\n  async save(id: string, workspace: Workspace.IWorkspace): Promise<void> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const { makeRequest, ResponseError } = ServerConnection;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, id);\n    const init = { body: JSON.stringify(workspace), method: 'PUT' };\n    const response = await makeRequest(url, init, serverSettings);\n\n    if (response.status !== 204) {\n      throw new ResponseError(response);\n    }\n  }\n}\n\n/**\n * A namespace for `WorkspaceManager` statics.\n */\nexport namespace WorkspaceManager {\n  /**\n   * The instantiation options for a workspace manager.\n   */\n  export interface IOptions {\n    /**\n     * The server settings used to make API requests.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n\n/**\n * A namespace for workspace API interfaces.\n */\nexport namespace Workspace {\n  /**\n   * The interface for the workspace API manager.\n   */\n  export interface IManager extends WorkspaceManager {}\n\n  /**\n   * The interface describing a workspace API response.\n   */\n  export interface IWorkspace {\n    /**\n     * The workspace data.\n     */\n    data: ReadonlyJSONObject;\n\n    /**\n     * The metadata for a workspace.\n     */\n    metadata: {\n      /**\n       * The workspace ID.\n       */\n      id: string;\n    };\n  }\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Get the url for a workspace.\n   */\n  export function url(base: string, id: string): string {\n    return URLExt.join(base, SERVICE_WORKSPACES_URL, id);\n  }\n}\n"]}