{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/setting/index.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;AAE3D,qDAAiE;AAEjE,0DAAuD;AAEvD;;GAEG;AACH,MAAM,oBAAoB,GAAG,cAAc,CAAC;AAE5C;;GAEG;AACH;IACE;;OAEG;IACH,YAAY,UAAmC,EAAE;QAC/C,IAAI,CAAC,cAAc;YACjB,OAAO,CAAC,cAAc,IAAI,mCAAgB,CAAC,YAAY,EAAE,CAAC;IAC9D,CAAC;IAOD;;;;;;OAMG;IACG,KAAK,CAAC,EAAU;;YACpB,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;YAChC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,cAAc,CAAC;YAC5C,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAAG,mCAAgB,CAAC;YACxD,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,CAAC;YAC/B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAClC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;YAE5D,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC3B,MAAM,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;aACnC;YAED,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC;KAAA;IAED;;;;;;;;OAQG;IACG,IAAI,CAAC,EAAU,EAAE,GAAW;;YAChC,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;YAChC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,cAAc,CAAC;YAC5C,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAAG,mCAAgB,CAAC;YACxD,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,CAAC;YAC/B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAClC,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;YAC1C,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;YAE9D,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC3B,MAAM,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;aACnC;QACH,CAAC;KAAA;CACF;AA1DD,wCA0DC;AA2BD;;GAEG;AACH,IAAU,OAAO,CAOhB;AAPD,WAAU,OAAO;IACf;;OAEG;IACH,aAAoB,IAAY,EAAE,EAAU;QAC1C,OAAO,kBAAM,CAAC,IAAI,CAAC,IAAI,EAAE,oBAAoB,EAAE,EAAE,CAAC,CAAC;IACrD,CAAC;IAFe,WAAG,MAElB,CAAA;AACH,CAAC,EAPS,OAAO,KAAP,OAAO,QAOhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ISettingRegistry, URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '../serverconnection';\n\n/**\n * The url for the lab settings service.\n */\nconst SERVICE_SETTINGS_URL = 'api/settings';\n\n/**\n * The settings API service manager.\n */\nexport class SettingManager {\n  /**\n   * Create a new setting manager.\n   */\n  constructor(options: SettingManager.IOptions = {}) {\n    this.serverSettings =\n      options.serverSettings || ServerConnection.makeSettings();\n  }\n\n  /**\n   * The server settings used to make API requests.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Fetch a plugin's settings.\n   *\n   * @param id - The plugin's ID.\n   *\n   * @returns A promise that resolves if successful.\n   */\n  async fetch(id: string): Promise<ISettingRegistry.IPlugin> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const { makeRequest, ResponseError } = ServerConnection;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, id);\n    const response = await makeRequest(url, {}, serverSettings);\n\n    if (response.status !== 200) {\n      throw new ResponseError(response);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Save a plugin's settings.\n   *\n   * @param id - The plugin's ID.\n   *\n   * @param raw - The user setting values as a raw string of JSON with comments.\n   *\n   * @returns A promise that resolves if successful.\n   */\n  async save(id: string, raw: string): Promise<void> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const { makeRequest, ResponseError } = ServerConnection;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, id);\n    const init = { body: raw, method: 'PUT' };\n    const response = await makeRequest(url, init, serverSettings);\n\n    if (response.status !== 204) {\n      throw new ResponseError(response);\n    }\n  }\n}\n\n/**\n * A namespace for `SettingManager` statics.\n */\nexport namespace SettingManager {\n  /**\n   * The instantiation options for a setting manager.\n   */\n  export interface IOptions {\n    /**\n     * The server settings used to make API requests.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n\n/**\n * A namespace for setting API interfaces.\n */\nexport namespace Setting {\n  /**\n   * The interface for the setting system manager.\n   */\n  export interface IManager extends SettingManager {}\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Get the url for a plugin's settings.\n   */\n  export function url(base: string, id: string): string {\n    return URLExt.join(base, SERVICE_SETTINGS_URL, id);\n  }\n}\n"]}