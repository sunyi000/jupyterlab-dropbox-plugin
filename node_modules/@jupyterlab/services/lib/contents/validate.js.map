{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../../services/src/contents/validate.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D;;;GAGG;AACH,0BAA0B,MAAW,EAAE,IAAY,EAAE,QAAiB;IACpE,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;QAChC,MAAM,KAAK,CAAC,qBAAqB,IAAI,GAAG,CAAC,CAAC;KAC3C;IACD,IAAI,QAAQ,KAAK,KAAK,CAAC,EAAE;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,QAAQ,QAAQ,EAAE;YAChB,KAAK,OAAO;gBACV,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7B,MAAM;YACR,KAAK,QAAQ;gBACX,KAAK,GAAG,OAAO,KAAK,KAAK,WAAW,CAAC;gBACrC,MAAM;YACR;gBACE,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC;SACrC;QACD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,aAAa,IAAI,qBAAqB,QAAQ,EAAE,CAAC,CAAC;SACnE;KACF;AACH,CAAC;AAED;;GAEG;AACH,+BAAsC,KAAsB;IAC1D,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC7C,gBAAgB,CAAC,KAAK,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;IACnD,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC9C,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC7C,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC9C,CAAC;AATD,sDASC;AAED;;GAEG;AACH,iCACE,KAAgC;IAEhC,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxC,gBAAgB,CAAC,KAAK,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;AACrD,CAAC;AALD,0DAKC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Contents } from './index';\n\n/**\n * Validate a property as being on an object, and optionally\n * of a given type.\n */\nfunction validateProperty(object: any, name: string, typeName?: string): void {\n  if (!object.hasOwnProperty(name)) {\n    throw Error(`Missing property '${name}'`);\n  }\n  if (typeName !== void 0) {\n    let valid = true;\n    let value = object[name];\n    switch (typeName) {\n      case 'array':\n        valid = Array.isArray(value);\n        break;\n      case 'object':\n        valid = typeof value !== 'undefined';\n        break;\n      default:\n        valid = typeof value === typeName;\n    }\n    if (!valid) {\n      throw new Error(`Property '${name}' is not of type '${typeName}`);\n    }\n  }\n}\n\n/**\n * Validate an `Contents.IModel` object.\n */\nexport function validateContentsModel(model: Contents.IModel): void {\n  validateProperty(model, 'name', 'string');\n  validateProperty(model, 'path', 'string');\n  validateProperty(model, 'type', 'string');\n  validateProperty(model, 'created', 'string');\n  validateProperty(model, 'last_modified', 'string');\n  validateProperty(model, 'mimetype', 'object');\n  validateProperty(model, 'content', 'object');\n  validateProperty(model, 'format', 'object');\n}\n\n/**\n * Validate an `Contents.ICheckpointModel` object.\n */\nexport function validateCheckpointModel(\n  model: Contents.ICheckpointModel\n): void {\n  validateProperty(model, 'id', 'string');\n  validateProperty(model, 'last_modified', 'string');\n}\n"]}