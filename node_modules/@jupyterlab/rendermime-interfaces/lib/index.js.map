{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../rendermime-interfaces/src/index.ts"],"names":[],"mappings":"","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReadonlyJSONObject } from '@phosphor/coreutils';\n\nimport { Widget } from '@phosphor/widgets';\n\n/**\n * A namespace for rendermime associated interfaces.\n */\nexport namespace IRenderMime {\n  /**\n   * A model for mime data.\n   */\n  export interface IMimeModel {\n    /**\n     * Whether the data in the model is trusted.\n     */\n    readonly trusted: boolean;\n\n    /**\n     * The data associated with the model.\n     */\n    readonly data: ReadonlyJSONObject;\n\n    /**\n     * The metadata associated with the model.\n     */\n    readonly metadata: ReadonlyJSONObject;\n\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Calling this function may trigger an asynchronous operation\n     * that could cause the renderer to be rendered with a new model\n     * containing the new data.\n     */\n    setData(options: IMimeModel.ISetDataOptions): void;\n  }\n\n  /**\n   * The namespace for IMimeModel associated interfaces.\n   */\n  export namespace IMimeModel {\n    /**\n     * The options used to update a mime model.\n     */\n    export interface ISetDataOptions {\n      /**\n       * The new data object.\n       */\n      data?: ReadonlyJSONObject;\n\n      /**\n       * The new metadata object.\n       */\n      metadata?: ReadonlyJSONObject;\n    }\n  }\n\n  /**\n   * The options used to initialize a document widget factory.\n   *\n   * This interface is intended to be used by mime renderer extensions\n   * to define a document opener that uses its renderer factory.\n   */\n  export interface IDocumentWidgetFactoryOptions {\n    /**\n     * The name of the widget to display in dialogs.\n     */\n    readonly name: string;\n\n    /**\n     * The name of the document model type.\n     */\n    readonly modelName?: string;\n\n    /**\n     * The primary file type of the widget.\n     */\n    readonly primaryFileType: string;\n\n    /**\n     * The file types the widget can view.\n     */\n    readonly fileTypes: ReadonlyArray<string>;\n\n    /**\n     * The file types for which the factory should be the default.\n     */\n    readonly defaultFor?: ReadonlyArray<string>;\n\n    /**\n     * The file types for which the factory should be the default for rendering,\n     * if that is different than the default factory (which may be for editing)\n     * If undefined, then it will fall back on the default file type.\n     */\n    readonly defaultRendered?: ReadonlyArray<string>;\n  }\n\n  /**\n   * A file type to associate with the renderer.\n   */\n  export interface IFileType {\n    /**\n     * The name of the file type.\n     */\n    readonly name: string;\n\n    /**\n     * The mime types associated the file type.\n     */\n    readonly mimeTypes: ReadonlyArray<string>;\n\n    /**\n     * The extensions of the file type (e.g. `\".txt\"`).  Can be a compound\n     * extension (e.g. `\".table.json`).\n     */\n    readonly extensions: ReadonlyArray<string>;\n\n    /**\n     * An optional display name for the file type.\n     */\n    readonly displayName?: string;\n\n    /**\n     * An optional pattern for a file name (e.g. `^Dockerfile$`).\n     */\n    readonly pattern?: string;\n\n    /**\n     * The icon class name for the file type.\n     */\n    readonly iconClass?: string;\n\n    /**\n     * The icon label for the file type.\n     */\n    readonly iconLabel?: string;\n\n    /**\n     * The file format for the file type ('text', 'base64', or 'json').\n     */\n    readonly fileFormat?: string;\n  }\n\n  /**\n   * An interface for using a RenderMime.IRenderer for output and read-only documents.\n   */\n  export interface IExtension {\n    /**\n     * The ID of the extension.\n     *\n     * #### Notes\n     * The convention for extension IDs in JupyterLab is the full NPM package\n     * name followed by a colon and a unique string token, e.g.\n     * `'@jupyterlab/apputils-extension:settings'` or `'foo-extension:bar'`.\n     */\n    readonly id: string;\n\n    /**\n     * A renderer factory to be registered to render the MIME type.\n     */\n    readonly rendererFactory: IRendererFactory;\n\n    /**\n     * The rank passed to `RenderMime.addFactory`.  If not given,\n     * defaults to the `defaultRank` of the factory.\n     */\n    readonly rank?: number;\n\n    /**\n     * The timeout after user activity to re-render the data.\n     */\n    readonly renderTimeout?: number;\n\n    /**\n     * Preferred data type from the model.  Defaults to `string`.\n     */\n    readonly dataType?: 'string' | 'json';\n\n    /**\n     * The options used to open a document with the renderer factory.\n     */\n    readonly documentWidgetFactoryOptions?:\n      | IDocumentWidgetFactoryOptions\n      | ReadonlyArray<IDocumentWidgetFactoryOptions>;\n\n    /**\n     * The optional file type associated with the extension.\n     */\n    readonly fileTypes?: ReadonlyArray<IFileType>;\n  }\n\n  /**\n   * The interface for a module that exports an extension or extensions as\n   * the default value.\n   */\n  export interface IExtensionModule {\n    /**\n     * The default export.\n     */\n    readonly default: IExtension | ReadonlyArray<IExtension>;\n  }\n\n  /**\n   * A widget which displays the contents of a mime model.\n   */\n  export interface IRenderer extends Widget {\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     *\n     * #### Notes\n     * This method may be called multiple times during the lifetime\n     * of the widget to update it if and when new data is available.\n     */\n    renderModel(model: IMimeModel): Promise<void>;\n  }\n\n  /**\n   * The interface for a renderer factory.\n   */\n  export interface IRendererFactory {\n    /**\n     * Whether the factory is a \"safe\" factory.\n     *\n     * #### Notes\n     * A \"safe\" factory produces renderer widgets which can render\n     * untrusted model data in a usable way. *All* renderers must\n     * handle untrusted data safely, but some may simply failover\n     * with a \"Run cell to view output\" message. A \"safe\" renderer\n     * is an indication that its sanitized output will be useful.\n     */\n    readonly safe: boolean;\n\n    /**\n     * The mime types handled by this factory.\n     */\n    readonly mimeTypes: ReadonlyArray<string>;\n\n    /**\n     * The default rank of the factory.  If not given, defaults to 100.\n     */\n    readonly defaultRank?: number;\n\n    /**\n     * Create a renderer which displays the mime data.\n     *\n     * @param options - The options used to render the data.\n     */\n    createRenderer(options: IRendererOptions): IRenderer;\n  }\n\n  /**\n   * The options used to create a renderer.\n   */\n  export interface IRendererOptions {\n    /**\n     * The preferred mimeType to render.\n     */\n    mimeType: string;\n\n    /**\n     * The html sanitizer.\n     */\n    sanitizer: ISanitizer;\n\n    /**\n     * An optional url resolver.\n     */\n    resolver: IResolver | null;\n\n    /**\n     * An optional link handler.\n     */\n    linkHandler: ILinkHandler | null;\n\n    /**\n     * The LaTeX typesetter.\n     */\n    latexTypesetter: ILatexTypesetter | null;\n  }\n\n  /**\n   * An object that handles html sanitization.\n   */\n  export interface ISanitizer {\n    /**\n     * Sanitize an HTML string.\n     */\n    sanitize(dirty: string): string;\n  }\n\n  /**\n   * An object that handles links on a node.\n   */\n  export interface ILinkHandler {\n    /**\n     * Add the link handler to the node.\n     *\n     * @param node: the node for which to handle the link.\n     *\n     * @param path: the path to open when the link is clicked.\n     *\n     * @param id: an optional element id to scroll to when the path is opened.\n     */\n    handleLink(node: HTMLElement, path: string, id?: string): void;\n  }\n\n  /**\n   * An object that resolves relative URLs.\n   */\n  export interface IResolver {\n    /**\n     * Resolve a relative url to a correct server path.\n     */\n    resolveUrl(url: string): Promise<string>;\n\n    /**\n     * Get the download url of a given absolute server path.\n     */\n    getDownloadUrl(path: string): Promise<string>;\n\n    /**\n     * Whether the URL should be handled by the resolver\n     * or not.\n     *\n     * #### Notes\n     * This is similar to the `isLocal` check in `URLExt`,\n     * but can also perform additional checks on whether the\n     * resolver should handle a given URL.\n     */\n    isLocal?: (url: string) => boolean;\n  }\n\n  /**\n   * The interface for a LaTeX typesetter.\n   */\n  export interface ILatexTypesetter {\n    /**\n     * Typeset a DOM element.\n     *\n     * @param element - the DOM element to typeset. The typesetting may\n     *   happen synchronously or asynchronously.\n     *\n     * #### Notes\n     * The application-wide rendermime object has a settable\n     * `latexTypesetter` property which is used wherever LaTeX\n     * typesetting is required. Extensions wishing to provide their\n     * own typesetter may replace that on the global `lab.rendermime`.\n     */\n    typeset(element: HTMLElement): void;\n  }\n}\n"]}