{"version":3,"file":"kernel.js","sourceRoot":"","sources":["../../../../mainmenu/src/kernel.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,uCAA2E;AAY3E;;GAEG;AACH,gBAAwB,SAAQ,wBAAc;IAC5C;;OAEG;IACH,YAAY,OAAsB;QAChC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC;QAEjC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAmC,CAAC;IAChE,CAAC;IAOD;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;CACF;AAvBD,gCAuBC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Menu, Widget } from '@phosphor/widgets';\n\nimport { IJupyterLabMenu, JupyterLabMenu, IMenuExtender } from './labmenu';\n\n/**\n * An interface for a Kernel menu.\n */\nexport interface IKernelMenu extends IJupyterLabMenu {\n  /**\n   * A set storing IKernelUsers for the Kernel menu.\n   */\n  readonly kernelUsers: Set<IKernelMenu.IKernelUser<Widget>>;\n}\n\n/**\n * An extensible Kernel menu for the application.\n */\nexport class KernelMenu extends JupyterLabMenu implements IKernelMenu {\n  /**\n   * Construct the kernel menu.\n   */\n  constructor(options: Menu.IOptions) {\n    super(options);\n    this.menu.title.label = 'Kernel';\n\n    this.kernelUsers = new Set<IKernelMenu.IKernelUser<Widget>>();\n  }\n\n  /**\n   * A set storing IKernelUsers for the Kernel menu.\n   */\n  readonly kernelUsers: Set<IKernelMenu.IKernelUser<Widget>>;\n\n  /**\n   * Dispose of the resources held by the kernel menu.\n   */\n  dispose(): void {\n    this.kernelUsers.clear();\n    super.dispose();\n  }\n}\n\n/**\n * Namespace for IKernelMenu\n */\nexport namespace IKernelMenu {\n  /**\n   * Interface for a Kernel user to register itself\n   * with the IKernelMenu's semantic extension points.\n   */\n  export interface IKernelUser<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * A function to interrupt the kernel.\n     */\n    interruptKernel?: (widget: T) => Promise<void>;\n\n    /**\n     * A function to restart the kernel, which\n     * returns a promise of whether the kernel was restarted.\n     */\n    restartKernel?: (widget: T) => Promise<boolean>;\n\n    /**\n     * A function to restart the kernel and clear the widget, which\n     * returns a promise of whether the kernel was restarted.\n     */\n    restartKernelAndClear?: (widget: T) => Promise<boolean>;\n\n    /**\n     * A function to change the kernel.\n     */\n    changeKernel?: (widget: T) => Promise<void>;\n\n    /**\n     * A function to shut down the kernel.\n     */\n    shutdownKernel?: (widget: T) => Promise<void>;\n\n    /**\n     * A noun to use for the restart and clear all command.\n     */\n    noun?: string;\n  }\n}\n"]}