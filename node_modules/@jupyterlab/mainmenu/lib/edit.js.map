{"version":3,"file":"edit.js","sourceRoot":"","sources":["../../../../mainmenu/src/edit.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,uCAA2E;AAsB3E;;GAEG;AACH,cAAsB,SAAQ,wBAAc;IAC1C;;OAEG;IACH,YAAY,OAAsB;QAChC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QAE/B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAA6B,CAAC;QAEpD,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAA8B,CAAC;QAEtD,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAmC,CAAC;IAClE,CAAC;IAiBD;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;CACF;AAvCD,4BAuCC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Menu, Widget } from '@phosphor/widgets';\n\nimport { IJupyterLabMenu, IMenuExtender, JupyterLabMenu } from './labmenu';\n\n/**\n * An interface for an Edit menu.\n */\nexport interface IEditMenu extends IJupyterLabMenu {\n  /**\n   * A set storing IUndoers for the Edit menu.\n   */\n  readonly undoers: Set<IEditMenu.IUndoer<Widget>>;\n\n  /**\n   * A set storing IClearers for the Edit menu.\n   */\n  readonly clearers: Set<IEditMenu.IClearer<Widget>>;\n\n  /**\n   * A set storing IClearers for the Edit menu.\n   */\n  readonly findReplacers: Set<IEditMenu.IFindReplacer<Widget>>;\n}\n\n/**\n * An extensible Edit menu for the application.\n */\nexport class EditMenu extends JupyterLabMenu implements IEditMenu {\n  /**\n   * Construct the edit menu.\n   */\n  constructor(options: Menu.IOptions) {\n    super(options);\n    this.menu.title.label = 'Edit';\n\n    this.undoers = new Set<IEditMenu.IUndoer<Widget>>();\n\n    this.clearers = new Set<IEditMenu.IClearer<Widget>>();\n\n    this.findReplacers = new Set<IEditMenu.IFindReplacer<Widget>>();\n  }\n\n  /**\n   * A set storing IUndoers for the Edit menu.\n   */\n  readonly undoers: Set<IEditMenu.IUndoer<Widget>>;\n\n  /**\n   * A set storing IClearers for the Edit menu.\n   */\n  readonly clearers: Set<IEditMenu.IClearer<Widget>>;\n\n  /**\n   * A set storing IClearers for the Edit menu.\n   */\n  readonly findReplacers: Set<IEditMenu.IFindReplacer<Widget>>;\n\n  /**\n   * Dispose of the resources held by the edit menu.\n   */\n  dispose(): void {\n    this.undoers.clear();\n    this.clearers.clear();\n    this.findReplacers.clear();\n    super.dispose();\n  }\n}\n\n/**\n * Namespace for IEditMenu\n */\nexport namespace IEditMenu {\n  /**\n   * Interface for an activity that uses Undo/Redo.\n   */\n  export interface IUndoer<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * Execute an undo command for the activity.\n     */\n    undo?: (widget: T) => void;\n\n    /**\n     * Execute a redo command for the activity.\n     */\n    redo?: (widget: T) => void;\n  }\n\n  /**\n   * Interface for an activity that wants to register a 'Clear...' menu item\n   */\n  export interface IClearer<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * A name for the thing to be cleared, used for labeling `clearCurrent`.\n     */\n    noun?: string;\n\n    /**\n     * A plural name for the thing to be cleared, used for labeling `clearAll`.\n     */\n    pluralNoun?: string;\n\n    /**\n     * A function to clear the currently portion of activity.\n     */\n    clearCurrent?: (widget: T) => void;\n\n    /**\n     * A function to clear all of an activity.\n     */\n    clearAll?: (widget: T) => void;\n  }\n\n  /**\n   * Interface for an activity that uses Find/Find+Replace.\n   */\n  export interface IFindReplacer<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * Execute a find command for the activity.\n     */\n    find?: (widget: T) => void;\n\n    /**\n     * Execute a find/replace command for the activity.\n     */\n    findAndReplace?: (widget: T) => void;\n  }\n}\n"]}