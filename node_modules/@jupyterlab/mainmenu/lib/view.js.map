{"version":3,"file":"view.js","sourceRoot":"","sources":["../../../../mainmenu/src/view.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,uCAA2E;AAY3E;;GAEG;AACH,cAAsB,SAAQ,wBAAc;IAC1C;;OAEG;IACH,YAAY,OAAsB;QAChC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QAE/B,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAmC,CAAC;IAClE,CAAC;IAOD;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;CACF;AAvBD,4BAuBC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Menu, Widget } from '@phosphor/widgets';\n\nimport { IJupyterLabMenu, IMenuExtender, JupyterLabMenu } from './labmenu';\n\n/**\n * An interface for a View menu.\n */\nexport interface IViewMenu extends IJupyterLabMenu {\n  /**\n   * A set storing IKernelUsers for the Kernel menu.\n   */\n  readonly editorViewers: Set<IViewMenu.IEditorViewer<Widget>>;\n}\n\n/**\n * An extensible View menu for the application.\n */\nexport class ViewMenu extends JupyterLabMenu implements IViewMenu {\n  /**\n   * Construct the view menu.\n   */\n  constructor(options: Menu.IOptions) {\n    super(options);\n    this.menu.title.label = 'View';\n\n    this.editorViewers = new Set<IViewMenu.IEditorViewer<Widget>>();\n  }\n\n  /**\n   * A set storing IEditorViewers for the View menu.\n   */\n  readonly editorViewers: Set<IViewMenu.IEditorViewer<Widget>>;\n\n  /**\n   * Dispose of the resources held by the view menu.\n   */\n  dispose(): void {\n    this.editorViewers.clear();\n    super.dispose();\n  }\n}\n\n/**\n * Namespace for IViewMenu.\n */\nexport namespace IViewMenu {\n  /**\n   * Interface for a text editor viewer to register\n   * itself with the text editor extension points.\n   */\n  export interface IEditorViewer<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * Whether to show line numbers in the editor.\n     */\n    toggleLineNumbers?: (widget: T) => void;\n\n    /**\n     * Whether to word-wrap the editor.\n     */\n    toggleWordWrap?: (widget: T) => void;\n\n    /**\n     * Whether to match brackets in the editor.\n     */\n    toggleMatchBrackets?: (widget: T) => void;\n\n    /**\n     * Whether line numbers are toggled.\n     */\n    lineNumbersToggled?: (widget: T) => boolean;\n\n    /**\n     * Whether word wrap is toggled.\n     */\n    wordWrapToggled?: (widget: T) => boolean;\n\n    /**\n     * Whether match brackets is toggled.\n     */\n    matchBracketsToggled?: (widget: T) => boolean;\n  }\n}\n"]}