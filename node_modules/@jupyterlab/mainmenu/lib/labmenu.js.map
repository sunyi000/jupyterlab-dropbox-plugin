{"version":3,"file":"labmenu.js","sourceRoot":"","sources":["../../../../mainmenu/src/labmenu.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IInstanceTracker } from '@jupyterlab/apputils';\n\nimport { ArrayExt } from '@phosphor/algorithm';\n\nimport { DisposableDelegate, IDisposable } from '@phosphor/disposable';\n\nimport { Menu, Widget } from '@phosphor/widgets';\n\n/**\n * A common interface for extensible JupyterLab application menus.\n *\n * Plugins are still free to define their own menus in any way\n * they like. However, JupyterLab defines a few top-level\n * application menus that may be extended by plugins as well,\n * such as \"Edit\" and \"View\"\n */\nexport interface IJupyterLabMenu extends IDisposable {\n  /**\n   * Add a group of menu items specific to a particular\n   * plugin.\n   */\n  addGroup(items: Menu.IItemOptions[], rank?: number): IDisposable;\n}\n\n/**\n * A base interface for a consumer of one of the menu\n * semantic extension points. The IMenuExtender gives\n * an instance tracker which is checked when the menu\n * is deciding which IMenuExtender to delegate to upon\n * selection of the menu item.\n */\nexport interface IMenuExtender<T extends Widget> {\n  /**\n   * A widget tracker for identifying the appropriate extender.\n   */\n  tracker: IInstanceTracker<T>;\n\n  /**\n   * An additional function that determines whether the extender\n   * is enabled. By default it is considered enabled if the application\n   * active widget is contained in the `tracker`. If this is also\n   * provided, the criterion is equivalent to\n   * `tracker.has(widget) && extender.isEnabled(widget)`\n   */\n  isEnabled?: (widget: T) => boolean;\n}\n\n/**\n * An extensible menu for JupyterLab application menus.\n */\nexport class JupyterLabMenu implements IJupyterLabMenu {\n  /**\n   * Construct a new menu.\n   *\n   * @param options - Options for the phosphor menu.\n   *\n   * @param includeSeparators - whether to include separators between the\n   *   groups that are added to the menu.\n   */\n  constructor(options: Menu.IOptions, includeSeparators: boolean = true) {\n    this.menu = new Menu(options);\n    this._includeSeparators = includeSeparators;\n  }\n\n  /**\n   * Add a group of menu items specific to a particular\n   * plugin.\n   *\n   * @param items - the list of menu items to add.\n   *\n   * @param rank - the rank in the menu in which to insert the group.\n   */\n  addGroup(items: Menu.IItemOptions[], rank?: number): IDisposable {\n    const rankGroup = {\n      size: items.length,\n      rank: rank === undefined ? 100 : rank\n    };\n\n    // Insert the plugin group into the list of groups.\n    const groupIndex = ArrayExt.upperBound(\n      this._groups,\n      rankGroup,\n      Private.itemCmp\n    );\n\n    // Determine the index of the menu at which to insert the group.\n    let insertIndex = 0;\n    for (let i = 0; i < groupIndex; ++i) {\n      if (this._groups[i].size > 0) {\n        insertIndex += this._groups[i].size;\n        // Increase the insert index by two extra in order\n        // to include the leading and trailing separators.\n        insertIndex += this._includeSeparators ? 2 : 0;\n      }\n    }\n\n    // Keep an array of the menu items that have been created.\n    const added: Menu.IItem[] = [];\n\n    // Insert a separator before the group.\n    // Phosphor takes care of superfluous leading,\n    // trailing, and duplicate separators.\n    if (this._includeSeparators) {\n      added.push(this.menu.insertItem(insertIndex++, { type: 'separator' }));\n    }\n    // Insert the group.\n    for (let item of items) {\n      added.push(this.menu.insertItem(insertIndex++, item));\n    }\n    // Insert a separator after the group.\n    if (this._includeSeparators) {\n      added.push(this.menu.insertItem(insertIndex++, { type: 'separator' }));\n    }\n\n    ArrayExt.insert(this._groups, groupIndex, rankGroup);\n\n    return new DisposableDelegate(() => {\n      added.forEach(i => this.menu.removeItem(i));\n      this._groups.splice(groupIndex, 1);\n    });\n  }\n\n  /**\n   * The underlying Phosphor menu.\n   */\n  readonly menu: Menu;\n\n  /**\n   * Whether the menu has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the menu.\n   */\n  dispose(): void {\n    this._groups.length = 0;\n    this._isDisposed = true;\n    this.menu.dispose();\n  }\n\n  private _groups: Private.IRankGroup[] = [];\n  private _isDisposed = false;\n  private _includeSeparators: boolean;\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * An object which holds a menu and its sort rank.\n   */\n  export interface IRankGroup {\n    /**\n     * The number of items in the menu grouping.\n     */\n    size: number;\n\n    /**\n     * The sort rank of the group.\n     */\n    rank: number;\n  }\n\n  /**\n   * A comparator function for menu rank items.\n   */\n  export function itemCmp(first: IRankGroup, second: IRankGroup): number {\n    return first.rank - second.rank;\n  }\n}\n"]}