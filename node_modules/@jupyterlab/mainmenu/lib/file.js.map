{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../mainmenu/src/file.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,uCAA2E;AA2B3E;;GAEG;AACH,cAAsB,SAAQ,wBAAc;IAC1C,YAAY,OAAsB;QAChC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QAE/B,4BAA4B;QAC5B,IAAI,CAAC,OAAO,GAAG,IAAI,wBAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QACtC,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAsC,CAAC;QACtE,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAqC,CAAC;QACrE,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAqC,CAAC;IACtE,CAAC;IAsBD;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACvB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;CACF;AA1CD,4BA0CC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Menu, Widget } from '@phosphor/widgets';\n\nimport { IJupyterLabMenu, IMenuExtender, JupyterLabMenu } from './labmenu';\n\n/**\n * An interface for a File menu.\n */\nexport interface IFileMenu extends IJupyterLabMenu {\n  /**\n   * A submenu for creating new files/launching new activities.\n   */\n  readonly newMenu: IJupyterLabMenu;\n\n  /**\n   * The close and cleanup extension point.\n   */\n  readonly closeAndCleaners: Set<IFileMenu.ICloseAndCleaner<Widget>>;\n\n  /**\n   * The persist and save extension point.\n   */\n  readonly persistAndSavers: Set<IFileMenu.IPersistAndSave<Widget>>;\n\n  /**\n   * A set storing IConsoleCreators for the File menu.\n   */\n  readonly consoleCreators: Set<IFileMenu.IConsoleCreator<Widget>>;\n}\n\n/**\n * An extensible FileMenu for the application.\n */\nexport class FileMenu extends JupyterLabMenu implements IFileMenu {\n  constructor(options: Menu.IOptions) {\n    super(options);\n\n    this.menu.title.label = 'File';\n\n    // Create the \"New\" submenu.\n    this.newMenu = new JupyterLabMenu(options, false);\n    this.newMenu.menu.title.label = 'New';\n    this.closeAndCleaners = new Set<IFileMenu.ICloseAndCleaner<Widget>>();\n    this.persistAndSavers = new Set<IFileMenu.IPersistAndSave<Widget>>();\n    this.consoleCreators = new Set<IFileMenu.IConsoleCreator<Widget>>();\n  }\n\n  /**\n   * The New submenu.\n   */\n  readonly newMenu: JupyterLabMenu;\n\n  /**\n   * The close and cleanup extension point.\n   */\n  readonly closeAndCleaners: Set<IFileMenu.ICloseAndCleaner<Widget>>;\n\n  /**\n   * The persist and save extension point.\n   */\n  readonly persistAndSavers: Set<IFileMenu.IPersistAndSave<Widget>>;\n\n  /**\n   * A set storing IConsoleCreators for the Kernel menu.\n   */\n  readonly consoleCreators: Set<IFileMenu.IConsoleCreator<Widget>>;\n\n  /**\n   * Dispose of the resources held by the file menu.\n   */\n  dispose(): void {\n    this.newMenu.dispose();\n    this.consoleCreators.clear();\n    super.dispose();\n  }\n}\n\n/**\n * Namespace for IFileMenu\n */\nexport namespace IFileMenu {\n  /**\n   * Interface for an activity that has some cleanup action associated\n   * with it in addition to merely closing its widget in the main area.\n   */\n  export interface ICloseAndCleaner<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * A label to use for the activity that is being cleaned up.\n     */\n    name: string;\n\n    /**\n     * A label to use for the cleanup action.\n     */\n    action: string;\n\n    /**\n     * A function to perform the close and cleanup action.\n     */\n    closeAndCleanup: (widget: T) => Promise<void>;\n  }\n\n  /**\n   * Interface for an activity that has some persistence action\n   * before saving.\n   */\n  export interface IPersistAndSave<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * A label to use for the activity that is being saved.\n     */\n    name: string;\n\n    /**\n     * A label to describe what is being persisted before saving.\n     */\n    action: string;\n\n    /**\n     * A function to perform the persistence.\n     */\n    persistAndSave: (widget: T) => Promise<void>;\n  }\n\n  /**\n   * Interface for a command to create a console for an activity.\n   */\n  export interface IConsoleCreator<T extends Widget> extends IMenuExtender<T> {\n    /**\n     * A label to use for the activity for which a console is being created.\n     */\n    name: string;\n\n    /**\n     * The function to create the console.\n     */\n    createConsole: (widget: T) => Promise<void>;\n  }\n}\n"]}