{"version":3,"file":"settingregistry.js","sourceRoot":"","sources":["../../../../coreutils/src/settingregistry.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport Ajv from 'ajv';\n\nimport * as json from 'comment-json';\n\nimport { find } from '@phosphor/algorithm';\n\nimport {\n  JSONExt,\n  JSONObject,\n  JSONValue,\n  ReadonlyJSONObject,\n  Token\n} from '@phosphor/coreutils';\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { IDataConnector } from './interfaces';\n\n/**\n * The key in the schema for setting editor icon class hints.\n */\nexport const ICON_CLASS_KEY = 'jupyter.lab.setting-icon-class';\n\n/**\n * The key in the schema for setting editor icon label hints.\n */\nexport const ICON_LABEL_KEY = 'jupyter.lab.setting-icon-label';\n\n/**\n * An alias for the JSON deep copy function.\n */\nconst copy = JSONExt.deepCopy;\n\n/**\n * An implementation of a schema validator.\n */\nexport interface ISchemaValidator {\n  /**\n   * Validate a plugin's schema and user data; populate the `composite` data.\n   *\n   * @param plugin - The plugin being validated. Its `composite` data will be\n   * populated by reference.\n   *\n   * @param populate - Whether plugin data should be populated, defaults to\n   * `true`.\n   *\n   * @return A list of errors if either the schema or data fail to validate or\n   * `null` if there are no errors.\n   */\n  validateData(\n    plugin: ISettingRegistry.IPlugin,\n    populate?: boolean\n  ): ISchemaValidator.IError[] | null;\n}\n\n/**\n * A namespace for schema validator interfaces.\n */\nexport namespace ISchemaValidator {\n  /**\n   * A schema validation error definition.\n   */\n  export interface IError {\n    /**\n     * The path in the data where the error occurred.\n     */\n    dataPath: string;\n\n    /**\n     * The keyword whose validation failed.\n     */\n    keyword: string;\n\n    /**\n     * The error message.\n     */\n    message: string;\n\n    /**\n     * Optional parameter metadata that might be included in an error.\n     */\n    params?: ReadonlyJSONObject;\n\n    /**\n     * The path in the schema where the error occurred.\n     */\n    schemaPath: string;\n  }\n}\n\n/* tslint:disable */\n/**\n * The setting registry token.\n */\nexport const ISettingRegistry = new Token<ISettingRegistry>(\n  '@jupyterlab/coreutils:ISettingRegistry'\n);\n/* tslint:enable */\n\n/**\n * A namespace for setting registry interfaces.\n */\nexport namespace ISettingRegistry {\n  /**\n   * The settings for a specific plugin.\n   */\n  export interface IPlugin extends JSONObject {\n    /**\n     * The name of the plugin.\n     */\n    id: string;\n\n    /**\n     * The collection of values for a specified setting.\n     */\n    data: ISettingBundle;\n\n    /**\n     * The raw user settings data as a string containing JSON with comments.\n     */\n    raw: string;\n\n    /**\n     * The JSON schema for the plugin.\n     */\n    schema: ISchema;\n  }\n\n  /**\n   * A schema type that is a minimal subset of the formal JSON Schema along with\n   * optional JupyterLab rendering hints.\n   */\n  export interface ISchema extends JSONObject {\n    /**\n     * The JupyterLab icon class hint for a plugin can be overridden by user\n     * settings. It can also be root level and therefore \"private\".\n     */\n    'jupyter.lab.setting-icon-class'?: string;\n\n    /**\n     * The JupyterLab icon label hint for a plugin can be overridden by user\n     * settings. It can also be root level and therefore \"private\".\n     */\n    'jupyter.lab.setting-icon-label'?: string;\n\n    /**\n     * The default value, if any.\n     */\n    default?: any;\n\n    /**\n     * The schema description.\n     */\n    description?: string;\n\n    /**\n     * The schema's child properties.\n     */\n    properties?: {\n      /**\n       * The JupyterLab icon class hint for a plugin can be overridden by user\n       * settings. It can also be root level and therefore \"private\".\n       */\n      'jupyter.lab.setting-icon-class'?: ISchema;\n\n      /**\n       * The JupyterLab icon label hint for a plugin can be overridden by user\n       * settings. It can also be root level and therefore \"private\".\n       */\n      'jupyter.lab.setting-icon-label'?: ISchema;\n\n      /**\n       * Arbitrary setting keys can be added.\n       */\n      [key: string]: ISchema;\n    };\n\n    /**\n     * The title of the schema.\n     */\n    title?: string;\n\n    /**\n     * The type or types of the data.\n     */\n    type?: string | string[];\n  }\n\n  /**\n   * The setting values for a plugin.\n   */\n  export interface ISettingBundle extends JSONObject {\n    /**\n     * A composite of the user setting values and the plugin schema defaults.\n     *\n     * #### Notes\n     * The `composite` values will always be a superset of the `user` values.\n     */\n    composite: JSONObject;\n\n    /**\n     * The user setting values.\n     */\n    user: JSONObject;\n  }\n\n  /**\n   * An interface for manipulating the settings of a specific plugin.\n   */\n  export interface ISettings extends IDisposable {\n    /**\n     * A signal that emits when the plugin's settings have changed.\n     */\n    readonly changed: ISignal<this, void>;\n\n    /**\n     * Get the composite of user settings and extension defaults.\n     */\n    readonly composite: JSONObject;\n\n    /*\n     * The plugin name.\n     */\n    readonly plugin: string;\n\n    /**\n     * The plugin settings raw text value.\n     */\n    readonly raw: string;\n\n    /**\n     * Get the plugin settings schema.\n     */\n    readonly schema: ISettingRegistry.ISchema;\n\n    /**\n     * Get the user settings.\n     */\n    readonly user: JSONObject;\n\n    /**\n     * Return the defaults in a commented JSON format.\n     */\n    annotatedDefaults(): string;\n\n    /**\n     * Calculate the default value of a setting by iterating through the schema.\n     *\n     * @param key - The name of the setting whose default value is calculated.\n     *\n     * @returns A calculated default JSON value for a specific setting.\n     */\n    default(key: string): JSONValue | undefined;\n\n    /**\n     * Get an individual setting.\n     *\n     * @param key - The name of the setting being retrieved.\n     *\n     * @returns The setting value.\n     */\n    get(key: string): { composite: JSONValue; user: JSONValue };\n\n    /**\n     * Remove a single setting.\n     *\n     * @param key - The name of the setting being removed.\n     *\n     * @returns A promise that resolves when the setting is removed.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    remove(key: string): Promise<void>;\n\n    /**\n     * Save all of the plugin's user settings at once.\n     */\n    save(raw: string): Promise<void>;\n\n    /**\n     * Set a single setting.\n     *\n     * @param key - The name of the setting being set.\n     *\n     * @param value - The value of the setting.\n     *\n     * @returns A promise that resolves when the setting has been saved.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    set(key: string, value: JSONValue): Promise<void>;\n\n    /**\n     * Validates raw settings with comments.\n     *\n     * @param raw - The JSON with comments string being validated.\n     *\n     * @returns A list of errors or `null` if valid.\n     */\n    validate(raw: string): ISchemaValidator.IError[] | null;\n  }\n}\n\n/**\n * An implementation of a setting registry.\n */\nexport interface ISettingRegistry extends SettingRegistry {}\n\n/**\n * The default implementation of a schema validator.\n */\nexport class DefaultSchemaValidator implements ISchemaValidator {\n  /**\n   * Instantiate a schema validator.\n   */\n  constructor() {\n    this._composer.addSchema(Private.SCHEMA, 'main');\n    this._validator.addSchema(Private.SCHEMA, 'main');\n  }\n\n  /**\n   * Validate a plugin's schema and user data; populate the `composite` data.\n   *\n   * @param plugin - The plugin being validated. Its `composite` data will be\n   * populated by reference.\n   *\n   * @param populate - Whether plugin data should be populated, defaults to\n   * `true`.\n   *\n   * @return A list of errors if either the schema or data fail to validate or\n   * `null` if there are no errors.\n   */\n  validateData(\n    plugin: ISettingRegistry.IPlugin,\n    populate = true\n  ): ISchemaValidator.IError[] | null {\n    const validate = this._validator.getSchema(plugin.id);\n    const compose = this._composer.getSchema(plugin.id);\n\n    // If the schemas do not exist, add them to the validator and continue.\n    if (!validate || !compose) {\n      const errors = this._addSchema(plugin.id, plugin.schema);\n\n      if (errors) {\n        return errors;\n      }\n\n      return this.validateData(plugin);\n    }\n\n    // Parse the raw commented JSON into a user map.\n    let user: JSONObject;\n    try {\n      const strip = true;\n\n      user = json.parse(plugin.raw, null, strip) as JSONObject;\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        return [\n          {\n            dataPath: '',\n            keyword: 'syntax',\n            schemaPath: '',\n            message: error.message\n          }\n        ];\n      }\n\n      const { column, description } = error;\n      const line = error.lineNumber;\n\n      return [\n        {\n          dataPath: '',\n          keyword: 'parse',\n          schemaPath: '',\n          message: `${description} (line ${line} column ${column})`\n        }\n      ];\n    }\n\n    if (!validate(user)) {\n      return validate.errors as ISchemaValidator.IError[];\n    }\n\n    // Copy the user data before merging defaults into composite map.\n    const composite = copy(user);\n\n    if (!compose(composite)) {\n      return compose.errors as ISchemaValidator.IError[];\n    }\n\n    if (populate) {\n      plugin.data = { composite, user };\n    }\n\n    return null;\n  }\n\n  /**\n   * Add a schema to the validator.\n   *\n   * @param plugin - The plugin ID.\n   *\n   * @param schema - The schema being added.\n   *\n   * @return A list of errors if the schema fails to validate or `null` if there\n   * are no errors.\n   *\n   * #### Notes\n   * It is safe to call this function multiple times with the same plugin name.\n   */\n  private _addSchema(\n    plugin: string,\n    schema: ISettingRegistry.ISchema\n  ): ISchemaValidator.IError[] | null {\n    const composer = this._composer;\n    const validator = this._validator;\n    const validate = validator.getSchema('main');\n\n    // Validate against the main schema.\n    if (!(validate(schema) as boolean)) {\n      return validate.errors as ISchemaValidator.IError[];\n    }\n\n    // Validate against the JSON schema meta-schema.\n    if (!(validator.validateSchema(schema) as boolean)) {\n      return validator.errors as ISchemaValidator.IError[];\n    }\n\n    // Remove if schema already exists.\n    composer.removeSchema(plugin);\n    validator.removeSchema(plugin);\n\n    // Add schema to the validator and composer.\n    composer.addSchema(schema, plugin);\n    validator.addSchema(schema, plugin);\n\n    return null;\n  }\n\n  private _composer = new Ajv({ useDefaults: true });\n  private _validator = new Ajv();\n}\n\n/**\n * The default concrete implementation of a setting registry.\n */\nexport class SettingRegistry {\n  /**\n   * Create a new setting registry.\n   */\n  constructor(options: SettingRegistry.IOptions) {\n    this._connector = options.connector;\n    this.validator = options.validator || new DefaultSchemaValidator();\n  }\n\n  /**\n   * The schema of the setting registry.\n   */\n  readonly schema = Private.SCHEMA;\n\n  /**\n   * The schema validator used by the setting registry.\n   */\n  readonly validator: ISchemaValidator;\n\n  /**\n   * A signal that emits the name of a plugin when its settings change.\n   */\n  get pluginChanged(): ISignal<this, string> {\n    return this._pluginChanged;\n  }\n\n  /**\n   * Returns a list of plugin settings held in the registry.\n   */\n  get plugins(): ISettingRegistry.IPlugin[] {\n    const plugins = this._plugins;\n\n    return Object.keys(plugins).map(\n      p => copy(plugins[p]) as ISettingRegistry.IPlugin\n    );\n  }\n\n  /**\n   * Get an individual setting.\n   *\n   * @param plugin - The name of the plugin whose settings are being retrieved.\n   *\n   * @param key - The name of the setting being retrieved.\n   *\n   * @returns A promise that resolves when the setting is retrieved.\n   */\n  get(\n    plugin: string,\n    key: string\n  ): Promise<{ composite: JSONValue; user: JSONValue }> {\n    const plugins = this._plugins;\n\n    if (plugin in plugins) {\n      const { composite, user } = plugins[plugin].data;\n      const result = {\n        composite: key in composite ? copy(composite[key]) : undefined,\n        user: key in user ? copy(user[key]) : undefined\n      };\n\n      return Promise.resolve(result);\n    }\n\n    return this.load(plugin).then(() => this.get(plugin, key));\n  }\n\n  /**\n   * Load a plugin's settings into the setting registry.\n   *\n   * @param plugin - The name of the plugin whose settings are being loaded.\n   *\n   * @returns A promise that resolves with a plugin settings object or rejects\n   * if the plugin is not found.\n   */\n  load(plugin: string): Promise<ISettingRegistry.ISettings> {\n    const plugins = this._plugins;\n    const registry = this;\n\n    // If the plugin exists, resolve.\n    if (plugin in plugins) {\n      const settings = new Settings({ plugin: plugins[plugin], registry });\n\n      return Promise.resolve(settings);\n    }\n\n    // If the plugin needs to be loaded from the data connector, fetch.\n    return this.reload(plugin);\n  }\n\n  /**\n   * Reload a plugin's settings into the registry even if they already exist.\n   *\n   * @param plugin - The name of the plugin whose settings are being reloaded.\n   *\n   * @returns A promise that resolves with a plugin settings object or rejects\n   * with a list of `ISchemaValidator.IError` objects if it fails.\n   */\n  reload(plugin: string): Promise<ISettingRegistry.ISettings> {\n    const connector = this._connector;\n    const plugins = this._plugins;\n    const registry = this;\n\n    // If the plugin needs to be loaded from the connector, fetch.\n    return connector.fetch(plugin).then(data => {\n      // Validate the response from the connector; populate `composite` field.\n      try {\n        this._validate(data);\n      } catch (errors) {\n        const output = [`Validating ${plugin} failed:`];\n\n        (errors as ISchemaValidator.IError[]).forEach((error, index) => {\n          const { dataPath, schemaPath, keyword, message } = error;\n\n          output.push(`${index} - schema @ ${schemaPath}, data @ ${dataPath}`);\n          output.push(`\\t${keyword} ${message}`);\n        });\n        console.error(output.join('\\n'));\n\n        throw new Error(`Failed validating ${plugin}`);\n      }\n\n      // Emit that a plugin has changed.\n      this._pluginChanged.emit(plugin);\n\n      return new Settings({ plugin: plugins[plugin], registry });\n    });\n  }\n\n  /**\n   * Remove a single setting in the registry.\n   *\n   * @param plugin - The name of the plugin whose setting is being removed.\n   *\n   * @param key - The name of the setting being removed.\n   *\n   * @returns A promise that resolves when the setting is removed.\n   */\n  remove(plugin: string, key: string): Promise<void> {\n    const plugins = this._plugins;\n\n    if (!(plugin in plugins)) {\n      return Promise.resolve(undefined);\n    }\n\n    const raw = json.parse(plugins[plugin].raw, null, true);\n\n    // Delete both the value and any associated comment.\n    delete raw[key];\n    delete raw[`// ${key}`];\n    plugins[plugin].raw = Private.annotatedPlugin(plugins[plugin], raw);\n\n    return this._save(plugin);\n  }\n\n  /**\n   * Set a single setting in the registry.\n   *\n   * @param plugin - The name of the plugin whose setting is being set.\n   *\n   * @param key - The name of the setting being set.\n   *\n   * @param value - The value of the setting being set.\n   *\n   * @returns A promise that resolves when the setting has been saved.\n   *\n   */\n  set(plugin: string, key: string, value: JSONValue): Promise<void> {\n    const plugins = this._plugins;\n\n    if (!(plugin in plugins)) {\n      return this.load(plugin).then(() => this.set(plugin, key, value));\n    }\n\n    const raw = json.parse(plugins[plugin].raw, null, true);\n\n    plugins[plugin].raw = Private.annotatedPlugin(plugins[plugin], {\n      ...raw,\n      [key]: value\n    });\n\n    return this._save(plugin);\n  }\n\n  /**\n   * Upload a plugin's settings.\n   *\n   * @param plugin - The name of the plugin whose settings are being set.\n   *\n   * @param raw - The raw plugin settings being uploaded.\n   *\n   * @returns A promise that resolves when the settings have been saved.\n   */\n  upload(plugin: string, raw: string): Promise<void> {\n    const plugins = this._plugins;\n\n    if (!(plugin in plugins)) {\n      return this.load(plugin).then(() => this.upload(plugin, raw));\n    }\n\n    // Set the local copy.\n    plugins[plugin].raw = raw;\n\n    return this._save(plugin);\n  }\n\n  /**\n   * Save a plugin in the registry.\n   */\n  private _save(plugin: string): Promise<void> {\n    const plugins = this._plugins;\n\n    if (!(plugin in plugins)) {\n      const message = `${plugin} does not exist in setting registry.`;\n\n      return Promise.reject(new Error(message));\n    }\n\n    try {\n      this._validate(plugins[plugin]);\n    } catch (errors) {\n      const message = `${plugin} failed to validate; check console for errors.`;\n\n      console.warn(`${plugin} validation errors:`, errors);\n      return Promise.reject(new Error(message));\n    }\n\n    return this._connector.save(plugin, plugins[plugin].raw).then(() => {\n      this._pluginChanged.emit(plugin);\n    });\n  }\n\n  /**\n   * Validate a plugin's data and schema, compose the `composite` data.\n   */\n  private _validate(plugin: ISettingRegistry.IPlugin): void {\n    // Validate the user data and create the composite data.\n    const errors = this.validator.validateData(plugin);\n\n    if (errors) {\n      throw errors;\n    }\n\n    // Set the local copy.\n    this._plugins[plugin.id] = plugin;\n  }\n\n  private _connector: IDataConnector<ISettingRegistry.IPlugin, string>;\n  private _pluginChanged = new Signal<this, string>(this);\n  private _plugins: {\n    [name: string]: ISettingRegistry.IPlugin;\n  } = Object.create(null);\n}\n\n/**\n * A manager for a specific plugin's settings.\n */\nexport class Settings implements ISettingRegistry.ISettings {\n  /**\n   * Instantiate a new plugin settings manager.\n   */\n  constructor(options: Settings.IOptions) {\n    const { plugin } = options;\n\n    this.plugin = plugin.id;\n    this.registry = options.registry;\n\n    this._composite = plugin.data.composite || {};\n    this._raw = plugin.raw || '{ }';\n    this._schema = plugin.schema || { type: 'object' };\n    this._user = plugin.data.user || {};\n\n    this.registry.pluginChanged.connect(this._onPluginChanged, this);\n  }\n\n  /**\n   * A signal that emits when the plugin's settings have changed.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * Get the composite of user settings and extension defaults.\n   */\n  get composite(): JSONObject {\n    return this._composite;\n  }\n\n  /**\n   * Test whether the plugin settings manager disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Get the plugin settings schema.\n   */\n  get schema(): ISettingRegistry.ISchema {\n    return this._schema;\n  }\n\n  /**\n   * Get the plugin settings raw text value.\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Get the user settings.\n   */\n  get user(): JSONObject {\n    return this._user;\n  }\n\n  /*\n   * The plugin name.\n   */\n  readonly plugin: string;\n\n  /**\n   * The system registry instance used by the settings manager.\n   */\n  readonly registry: SettingRegistry;\n\n  /**\n   * Return the defaults in a commented JSON format.\n   */\n  annotatedDefaults(): string {\n    return Private.annotatedDefaults(this._schema, this.plugin);\n  }\n\n  /**\n   * Calculate the default value of a setting by iterating through the schema.\n   *\n   * @param key - The name of the setting whose default value is calculated.\n   *\n   * @returns A calculated default JSON value for a specific setting.\n   */\n  default(key: string): JSONValue | undefined {\n    return Private.reifyDefault(this.schema, key);\n  }\n\n  /**\n   * Dispose of the plugin settings resources.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Get an individual setting.\n   *\n   * @param key - The name of the setting being retrieved.\n   *\n   * @returns The setting value.\n   *\n   * #### Notes\n   * This method returns synchronously because it uses a cached copy of the\n   * plugin settings that is synchronized with the registry.\n   */\n  get(key: string): { composite: JSONValue; user: JSONValue } {\n    const { composite, user } = this;\n\n    return {\n      composite: key in composite ? copy(composite[key]) : undefined,\n      user: key in user ? copy(user[key]) : undefined\n    };\n  }\n\n  /**\n   * Remove a single setting.\n   *\n   * @param key - The name of the setting being removed.\n   *\n   * @returns A promise that resolves when the setting is removed.\n   *\n   * #### Notes\n   * This function is asynchronous because it writes to the setting registry.\n   */\n  remove(key: string): Promise<void> {\n    return this.registry.remove(this.plugin, key);\n  }\n\n  /**\n   * Save all of the plugin's user settings at once.\n   */\n  save(raw: string): Promise<void> {\n    return this.registry.upload(this.plugin, raw);\n  }\n\n  /**\n   * Set a single setting.\n   *\n   * @param key - The name of the setting being set.\n   *\n   * @param value - The value of the setting.\n   *\n   * @returns A promise that resolves when the setting has been saved.\n   *\n   * #### Notes\n   * This function is asynchronous because it writes to the setting registry.\n   */\n  set(key: string, value: JSONValue): Promise<void> {\n    return this.registry.set(this.plugin, key, value);\n  }\n\n  /**\n   * Validates raw settings with comments.\n   *\n   * @param raw - The JSON with comments string being validated.\n   *\n   * @returns A list of errors or `null` if valid.\n   */\n  validate(raw: string): ISchemaValidator.IError[] | null {\n    const data = { composite: {}, user: {} };\n    const id = this.plugin;\n    const schema = this._schema;\n    const validator = this.registry.validator;\n\n    return validator.validateData({ data, id, raw, schema }, false);\n  }\n\n  /**\n   * Handle plugin changes in the setting registry.\n   */\n  private _onPluginChanged(sender: any, plugin: string): void {\n    if (plugin === this.plugin) {\n      const found = find(this.registry.plugins, p => p.id === plugin);\n\n      if (!found) {\n        return;\n      }\n\n      const { composite, user } = found.data;\n      const { raw, schema } = found;\n\n      this._composite = composite || {};\n      this._raw = raw;\n      this._schema = schema || { type: 'object' };\n      this._user = user || {};\n      this._changed.emit(undefined);\n    }\n  }\n\n  private _changed = new Signal<this, void>(this);\n  private _composite: JSONObject = Object.create(null);\n  private _isDisposed = false;\n  private _raw = '{ }';\n  private _schema: ISettingRegistry.ISchema = Object.create(null);\n  private _user: JSONObject = Object.create(null);\n}\n\n/**\n * A namespace for `SettingRegistry` statics.\n */\nexport namespace SettingRegistry {\n  /**\n   * The instantiation options for a setting registry\n   */\n  export interface IOptions {\n    /**\n     * The data connector used by the setting registry.\n     */\n    connector: IDataConnector<ISettingRegistry.IPlugin, string>;\n\n    /**\n     * The validator used to enforce the settings JSON schema.\n     */\n    validator?: ISchemaValidator;\n  }\n}\n\n/**\n * A namespace for `Settings` statics.\n */\nexport namespace Settings {\n  /**\n   * The instantiation options for a `Settings` object.\n   */\n  export interface IOptions {\n    /**\n     * The setting values for a plugin.\n     */\n    plugin: ISettingRegistry.IPlugin;\n\n    /**\n     * The system registry instance used by the settings manager.\n     */\n    registry: SettingRegistry;\n  }\n}\n\n/**\n * A namespace for private module data.\n */\nexport namespace Private {\n  /* tslint:disable */\n  /**\n   * The schema for settings.\n   */\n  export const SCHEMA: ISettingRegistry.ISchema = {\n    $schema: 'http://json-schema.org/draft-06/schema',\n    title: 'Jupyter Settings/Preferences Schema',\n    description: 'Jupyter settings/preferences schema v0.1.0',\n    type: 'object',\n    additionalProperties: true,\n    properties: {\n      [ICON_CLASS_KEY]: { type: 'string', default: 'jp-FileIcon' },\n      [ICON_LABEL_KEY]: { type: 'string', default: 'Plugin' }\n    }\n  };\n  /* tslint:enable */\n\n  /**\n   * The default indentation level, uses spaces instead of tabs.\n   */\n  const indent = '    ';\n\n  /**\n   * Replacement text for schema properties missing a `description` field.\n   */\n  const nondescript = '[missing schema description]';\n\n  /**\n   * Replacement text for schema properties missing a `default` field.\n   */\n  const undefaulted = '[missing schema default]';\n\n  /**\n   * Replacement text for schema properties missing a `title` field.\n   */\n  const untitled = '[missing schema title]';\n\n  /**\n   * Returns an annotated (JSON with comments) version of a schema's defaults.\n   */\n  export function annotatedDefaults(\n    schema: ISettingRegistry.ISchema,\n    plugin: string\n  ): string {\n    const { description, properties, title } = schema;\n    const keys = Object.keys(properties).sort((a, b) => a.localeCompare(b));\n    const length = Math.max((description || nondescript).length, plugin.length);\n\n    return [\n      '{',\n      prefix(`${title || untitled}`),\n      prefix(plugin),\n      prefix(description || nondescript),\n      prefix(line(length)),\n      '',\n      keys.map(key => defaultDocumentedValue(schema, key)).join(',\\n\\n'),\n      '}'\n    ].join('\\n');\n  }\n\n  /**\n   * Returns an annotated (JSON with comments) version of a plugin's\n   * setting data.\n   */\n  export function annotatedPlugin(\n    plugin: ISettingRegistry.IPlugin,\n    data: JSONObject\n  ): string {\n    const { description, title } = plugin.schema;\n    const keys = Object.keys(data).sort((a, b) => a.localeCompare(b));\n    const length = Math.max(\n      (description || nondescript).length,\n      plugin.id.length\n    );\n\n    return [\n      '{',\n      prefix(`${title || untitled}`),\n      prefix(plugin.id),\n      prefix(description || nondescript),\n      prefix(line(length)),\n      '',\n      keys\n        .map(key => documentedValue(plugin.schema, key, data[key]))\n        .join(',\\n\\n'),\n      '}'\n    ].join('\\n');\n  }\n\n  /**\n   * Returns the default value-with-documentation-string for a\n   * specific schema property.\n   */\n  function defaultDocumentedValue(\n    schema: ISettingRegistry.ISchema,\n    key: string\n  ): string {\n    const props = schema.properties && schema.properties[key];\n    const description = (props && props['description']) || nondescript;\n    const title = (props && props['title']) || untitled;\n    const reified = reifyDefault(schema, key);\n    const defaults =\n      reified === undefined\n        ? prefix(`\"${key}\": ${undefaulted}`)\n        : prefix(`\"${key}\": ${JSON.stringify(reified, null, 2)}`, indent);\n\n    return [\n      prefix(`${title || untitled}`),\n      prefix(description || nondescript),\n      defaults\n    ].join('\\n');\n  }\n\n  /**\n   * Returns a value-with-documentation-string for a specific schema property.\n   */\n  function documentedValue(\n    schema: ISettingRegistry.ISchema,\n    key: string,\n    value: JSONValue\n  ): string {\n    const props = schema.properties && schema.properties[key];\n    const description = (props && props['description']) || nondescript;\n    const title = (props && props['title']) || untitled;\n    const attribute = prefix(\n      `\"${key}\": ${JSON.stringify(value, null, 2)}`,\n      indent\n    );\n\n    return [prefix(title), prefix(description), attribute].join('\\n');\n  }\n  /**\n   * Returns a line of a specified length.\n   */\n  function line(length: number, ch = '*'): string {\n    return new Array(length + 1).join(ch);\n  }\n\n  /**\n   * Returns a documentation string with a comment prefix added on every line.\n   */\n  function prefix(source: string, pre = `${indent}\\/\\/ `): string {\n    return pre + source.split('\\n').join(`\\n${pre}`);\n  }\n\n  /**\n   * Create a fully extrapolated default value for a root key in a schema.\n   */\n  export function reifyDefault(\n    schema: ISettingRegistry.ISchema,\n    root?: string\n  ): JSONValue | undefined {\n    // If the property is at the root level, traverse its schema.\n    schema = (root ? schema.properties[root] : schema) || {};\n\n    // If the property has no default or is a primitive, return.\n    if (!('default' in schema) || schema.type !== 'object') {\n      return schema.default;\n    }\n\n    // Make a copy of the default value to populate.\n    const result = JSONExt.deepCopy(schema.default);\n\n    // Iterate through and populate each child property.\n    for (let property in schema.properties || {}) {\n      result[property] = reifyDefault(schema.properties[property]);\n    }\n\n    return result;\n  }\n}\n"]}