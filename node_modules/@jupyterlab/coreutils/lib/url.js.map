{"version":3,"file":"url.js","sourceRoot":"","sources":["../../../../coreutils/src/url.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;AAI3D,0DAAiC;AAEjC;;GAEG;AACH,IAAiB,MAAM,CA+LtB;AA/LD,WAAiB,MAAM;IACrB;;;;;;OAMG;IACH,eAAsB,GAAW;QAC/B,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;YACnC,IAAI,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;YACb,OAAO,CAAC,CAAC;SACV;QACD,OAAO,mBAAQ,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAPe,YAAK,QAOpB,CAAA;IAED;;OAEG;IACH,mBAA0B,GAAW;QACnC,OAAO,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IAFe,gBAAS,YAExB,CAAA;IAED;;;;;;OAMG;IACH,cAAqB,GAAG,KAAe;QACrC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QAEpB,2BAA2B;QAC3B,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAE3B,kDAAkD;QAClD,MAAM,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE1C,kDAAkD;QAClD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAG,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,KAAK,GAAG,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;QAEnC,4BAA4B;QAC5B,MAAM,MAAM,GAAG,SAAS;YACtB,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAE3D,+DAA+D;QAC/D,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACtE,iCAAiC;aAChC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;YACnB,8DAA8D;aAC7D,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;aACzD,IAAI,CAAC,GAAG,CAAC;YACV,qCAAqC;aACpC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAExB,OAAO,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IA/Be,WAAI,OA+BnB,CAAA;IAED;;;;;;;;;;OAUG;IACH,qBAA4B,GAAW;QACrC,OAAO,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACzD,CAAC;IAFe,kBAAW,cAE1B,CAAA;IAED;;;;;;;;;OASG;IACH,6BAAoC,KAAiB;QACnD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEhC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,EAAE,CAAC;SACX;QAED,OAAO,CACL,GAAG;YACH,IAAI;iBACD,GAAG,CAAC,GAAG,CAAC,EAAE;gBACT,MAAM,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAEvD,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC9C,CAAC,CAAC;iBACD,IAAI,CAAC,GAAG,CAAC,CACb,CAAC;IACJ,CAAC;IAjBe,0BAAmB,sBAiBlC,CAAA;IAED;;OAEG;IACH,6BACE,KAAa;QAEb,OAAO,KAAK;aACT,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;aAClB,KAAK,CAAC,GAAG,CAAC;aACV,MAAM,CACL,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACX,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEpC,GAAG,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;YAE3C,OAAO,GAAG,CAAC;QACb,CAAC,EACD,EAA+B,CAChC,CAAC;IACN,CAAC;IAhBe,0BAAmB,sBAgBlC,CAAA;IAED;;;;;;OAMG;IACH,iBAAwB,GAAW;QACjC,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QAEhC,OAAO,GAAG,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC;IAJe,cAAO,UAItB,CAAA;AAmDH,CAAC,EA/LgB,MAAM,GAAN,cAAM,KAAN,cAAM,QA+LtB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JSONObject } from '@phosphor/coreutils';\n\nimport urlparse from 'url-parse';\n\n/**\n * The namespace for URL-related functions.\n */\nexport namespace URLExt {\n  /**\n   * Parse a url into a URL object.\n   *\n   * @param urlString - The URL string to parse.\n   *\n   * @returns A URL object.\n   */\n  export function parse(url: string): IUrl {\n    if (typeof document !== 'undefined') {\n      let a = document.createElement('a');\n      a.href = url;\n      return a;\n    }\n    return urlparse(url);\n  }\n\n  /**\n   * Normalize a url.\n   */\n  export function normalize(url: string): string {\n    return url && parse(url).toString();\n  }\n\n  /**\n   * Join a sequence of url components and normalizes as in node `path.join`.\n   *\n   * @param parts - The url components.\n   *\n   * @returns the joined url.\n   */\n  export function join(...parts: string[]): string {\n    parts = parts || [];\n\n    // Isolate the top element.\n    const top = parts[0] || '';\n\n    // Check whether protocol shorthand is being used.\n    const shorthand = top.indexOf('//') === 0;\n\n    // Parse the top element into a header collection.\n    const header = top.match(/(\\w+)(:)(\\/\\/)?/);\n    const protocol = header && header[1];\n    const colon = protocol && header[2];\n    const slashes = colon && header[3];\n\n    // Construct the URL prefix.\n    const prefix = shorthand\n      ? '//'\n      : [protocol, colon, slashes].filter(str => str).join('');\n\n    // Construct the URL body omitting the prefix of the top value.\n    const body = [top.indexOf(prefix) === 0 ? top.replace(prefix, '') : top]\n      // Filter out top value if empty.\n      .filter(str => str)\n      // Remove leading slashes in all subsequent URL body elements.\n      .concat(parts.slice(1).map(str => str.replace(/^\\//, '')))\n      .join('/')\n      // Replace multiple slashes with one.\n      .replace(/\\/+/g, '/');\n\n    return prefix + body;\n  }\n\n  /**\n   * Encode the components of a multi-segment url.\n   *\n   * @param url - The url to encode.\n   *\n   * @returns the encoded url.\n   *\n   * #### Notes\n   * Preserves the `'/'` separators.\n   * Should not include the base url, since all parts are escaped.\n   */\n  export function encodeParts(url: string): string {\n    return join(...url.split('/').map(encodeURIComponent));\n  }\n\n  /**\n   * Return a serialized object string suitable for a query.\n   *\n   * @param object - The source object.\n   *\n   * @returns an encoded url query.\n   *\n   * #### Notes\n   * Modified version of [stackoverflow](http://stackoverflow.com/a/30707423).\n   */\n  export function objectToQueryString(value: JSONObject): string {\n    const keys = Object.keys(value);\n\n    if (!keys.length) {\n      return '';\n    }\n\n    return (\n      '?' +\n      keys\n        .map(key => {\n          const content = encodeURIComponent(String(value[key]));\n\n          return key + (content ? '=' + content : '');\n        })\n        .join('&')\n    );\n  }\n\n  /**\n   * Return a parsed object that represents the values in a query string.\n   */\n  export function queryStringToObject(\n    value: string\n  ): { [key: string]: string } {\n    return value\n      .replace(/^\\?/, '')\n      .split('&')\n      .reduce(\n        (acc, val) => {\n          const [key, value] = val.split('=');\n\n          acc[key] = decodeURIComponent(value || '');\n\n          return acc;\n        },\n        {} as { [key: string]: string }\n      );\n  }\n\n  /**\n   * Test whether the url is a local url.\n   *\n   * #### Notes\n   * This function returns `false` for any fully qualified url, including\n   * `data:`, `file:`, and `//` protocol URLs.\n   */\n  export function isLocal(url: string): boolean {\n    const { protocol } = parse(url);\n\n    return url.toLowerCase().indexOf(protocol) !== 0 && url.indexOf('//') !== 0;\n  }\n\n  /**\n   * The interface for a URL object\n   */\n  export interface IUrl {\n    /**\n     * The full URL string that was parsed with both the protocol and host\n     * components converted to lower-case.\n     */\n    href?: string;\n\n    /**\n     * Identifies the URL's lower-cased protocol scheme.\n     */\n    protocol?: string;\n\n    /**\n     * The full lower-cased host portion of the URL, including the port if\n     * specified.\n     */\n    host?: string;\n\n    /**\n     * The lower-cased host name portion of the host component without the\n     * port included.\n     */\n    hostname?: string;\n\n    /**\n     * The numeric port portion of the host component.\n     */\n    port?: string;\n\n    /**\n     * The entire path section of the URL.\n     */\n    pathname?: string;\n\n    /**\n     * The \"fragment\" portion of the URL including the leading ASCII hash\n     * `(#)` character\n     */\n    hash?: string;\n\n    /**\n     * The search element, including leading question mark (`'?'`), if any,\n     * of the URL.\n     */\n    search?: string;\n  }\n}\n"]}