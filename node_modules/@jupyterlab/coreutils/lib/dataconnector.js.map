{"version":3,"file":"dataconnector.js","sourceRoot":"","sources":["../../../../coreutils/src/dataconnector.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D;;;;;;;;GAQG;AACH;IAeE;;;;;;;;;;OAUG;IACH,MAAM,CAAC,EAAK;QACV,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC,CAAC;IACzE,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,IAAI,CAAC,EAAK,EAAE,KAAQ;QAClB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;IACvE,CAAC;CACF;AA9CD,sCA8CC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IDataConnector } from './interfaces';\n\n/**\n * An abstract class that adheres to the data connector interface.\n *\n * #### Notes\n * The only abstract method in this class is the `fetch` method, which must be\n * reimplemented by all subclasses. The `remove` and `save` methods have a\n * default implementation that returns a promise that will always reject. This\n * class is a convenience superclass for connectors that only need to `fetch`.\n */\nexport abstract class DataConnector<T, U = T, V = string>\n  implements IDataConnector<T, U, V> {\n  /**\n   * Retrieve an item from the data connector.\n   *\n   * @param id - The identifier used to retrieve an item.\n   *\n   * @returns A promise that bears a data payload if available.\n   *\n   * #### Notes\n   * The promise returned by this method may be rejected if an error occurs in\n   * retrieving the data. Nonexistence of an `id` will succeed with `undefined`.\n   */\n  abstract fetch(id: V): Promise<T | undefined>;\n\n  /**\n   * Remove a value using the data connector.\n   *\n   * @param id - The identifier for the data being removed.\n   *\n   * @returns A promise that is rejected if remove fails and succeeds otherwise.\n   *\n   * #### Notes\n   * This method will always reject; subclasses should reimplement it if they\n   * support a back-end that can remove resources.\n   */\n  remove(id: V): Promise<void> {\n    return Promise.reject(new Error('Removing has not been implemented.'));\n  }\n\n  /**\n   * Save a value using the data connector.\n   *\n   * @param id - The identifier for the data being saved.\n   *\n   * @param value - The data being saved.\n   *\n   * @returns A promise that is rejected if saving fails and succeeds otherwise.\n   *\n   * #### Notes\n   * This method will always reject; subclasses should reimplement it if they\n   * support a back-end that can save resources.\n   */\n  save(id: V, value: U): Promise<void> {\n    return Promise.reject(new Error('Saving has not been implemented.'));\n  }\n}\n"]}