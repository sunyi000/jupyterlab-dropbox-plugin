{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../filebrowser/src/upload.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAAuE;AAIvE;;GAEG;AACH,cAAsB,SAAQ,wBAAa;IACzC;;OAEG;IACH,YAAY,OAA0B;QACpC,KAAK,CAAC;YACJ,aAAa,EAAE,sCAAsC;YACrD,OAAO,EAAE,GAAG,EAAE;gBACZ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACtB,CAAC;YACD,OAAO,EAAE,cAAc;SACxB,CAAC,CAAC;QAcL;;WAEG;QACK,oBAAe,GAAG,GAAG,EAAE;YAC7B,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAW,CAAC;YACpE,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACpE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACjC,2BAAgB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF;;WAEG;QACK,oBAAe,GAAG,GAAG,EAAE;YAC7B,gFAAgF;YAChF,8DAA8D;YAC9D,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;QACzB,CAAC,CAAC;QAEM,WAAM,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;QAjC3C,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAChC,CAAC;CA8BF;AA9CD,4BA8CC;AAiBD;;GAEG;AACH,IAAU,OAAO,CAUhB;AAVD,WAAU,OAAO;IACf;;OAEG;IACH;QACE,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5C,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;QACpB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IALe,yBAAiB,oBAKhC,CAAA;AACH,CAAC,EAVS,OAAO,KAAP,OAAO,QAUhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ToolbarButton, showErrorMessage } from '@jupyterlab/apputils';\n\nimport { FileBrowserModel } from './model';\n\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n  /**\n   * Construct a new file browser buttons widget.\n   */\n  constructor(options: Uploader.IOptions) {\n    super({\n      iconClassName: 'jp-FileUploadIcon jp-Icon jp-Icon-16',\n      onClick: () => {\n        this._input.click();\n      },\n      tooltip: 'Upload Files'\n    });\n    this.fileBrowserModel = options.model;\n    this._input.onclick = this._onInputClicked;\n    this._input.onchange = this._onInputChanged;\n    this.addClass('jp-id-upload');\n  }\n\n  /**\n   * The underlying file browser fileBrowserModel for the widget.\n   *\n   * This cannot be named model as that conflicts with the model property of VDomRenderer.\n   */\n  readonly fileBrowserModel: FileBrowserModel;\n\n  /**\n   * The 'change' handler for the input field.\n   */\n  private _onInputChanged = () => {\n    let files = Array.prototype.slice.call(this._input.files) as File[];\n    let pending = files.map(file => this.fileBrowserModel.upload(file));\n    Promise.all(pending).catch(error => {\n      showErrorMessage('Upload Error', error);\n    });\n  };\n\n  /**\n   * The 'click' handler for the input field.\n   */\n  private _onInputClicked = () => {\n    // In order to allow repeated uploads of the same file (with delete in between),\n    // we need to clear the input value to trigger a change event.\n    this._input.value = '';\n  };\n\n  private _input = Private.createUploadInput();\n}\n\n/**\n * The namespace for Uploader class statics.\n */\nexport namespace Uploader {\n  /**\n   * The options used to create an uploader.\n   */\n  export interface IOptions {\n    /**\n     * A file browser fileBrowserModel instance.\n     */\n    model: FileBrowserModel;\n  }\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Create the upload input node for a file buttons widget.\n   */\n  export function createUploadInput(): HTMLInputElement {\n    let input = document.createElement('input');\n    input.type = 'file';\n    input.multiple = true;\n    return input;\n  }\n}\n"]}