{"version":3,"file":"modeldb.js","sourceRoot":"","sources":["../../../../observables/src/modeldb.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IDisposable, DisposableSet } from '@phosphor/disposable';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { JSONExt, JSONValue, JSONObject } from '@phosphor/coreutils';\n\nimport { ObservableMap } from './observablemap';\n\nimport { IObservableJSON, ObservableJSON } from './observablejson';\n\nimport { IObservableString, ObservableString } from './observablestring';\n\nimport {\n  IObservableUndoableList,\n  ObservableUndoableList\n} from './undoablelist';\n\nimport { IObservableMap } from './observablemap';\n\n/**\n * String type annotations for Observable objects that can be\n * created and placed in the IModelDB interface.\n */\nexport type ObservableType = 'Map' | 'List' | 'String' | 'Value';\n\n/**\n * Base interface for Observable objects.\n */\nexport interface IObservable extends IDisposable {\n  /**\n   * The type of this object.\n   */\n  readonly type: ObservableType;\n}\n\n/**\n * Interface for an Observable object that represents\n * an opaque JSON value.\n */\nexport interface IObservableValue extends IObservable {\n  /**\n   * The type of this object.\n   */\n  readonly type: 'Value';\n\n  /**\n   * The changed signal.\n   */\n  readonly changed: ISignal<IObservableValue, ObservableValue.IChangedArgs>;\n\n  /**\n   * Get the current value, or `undefined` if it has not been set.\n   */\n  get(): JSONValue | undefined;\n\n  /**\n   * Set the value.\n   */\n  set(value: JSONValue): void;\n}\n\n/**\n * Interface for an object representing a single collaborator\n * on a realtime model.\n */\nexport interface ICollaborator extends JSONObject {\n  /**\n   * A user id for the collaborator.\n   * This might not be unique, if the user has more than\n   * one editing session at a time.\n   */\n  readonly userId: string;\n\n  /**\n   * A session id, which should be unique to a\n   * particular view on a collaborative model.\n   */\n  readonly sessionId: string;\n\n  /**\n   * A human-readable display name for a collaborator.\n   */\n  readonly displayName: string;\n\n  /**\n   * A color to be used to identify the collaborator in\n   * UI elements.\n   */\n  readonly color: string;\n\n  /**\n   * A human-readable short name for a collaborator, for\n   * use in places where the full `displayName` would take\n   * too much space.\n   */\n  readonly shortName: string;\n}\n\n/**\n * Interface for an IObservableMap that tracks collaborators.\n */\nexport interface ICollaboratorMap extends IObservableMap<ICollaborator> {\n  /**\n   * The local collaborator on a model.\n   */\n  readonly localCollaborator: ICollaborator;\n}\n\n/**\n * An interface for a path based database for\n * creating and storing values, which is agnostic\n * to the particular type of store in the backend.\n */\nexport interface IModelDB extends IDisposable {\n  /**\n   * The base path for the `IModelDB`. This is prepended\n   * to all the paths that are passed in to the member\n   * functions of the object.\n   */\n  readonly basePath: string;\n\n  /**\n   * Whether the database has been disposed.\n   */\n  readonly isDisposed: boolean;\n\n  /**\n   * Whether the database has been populated\n   * with model values prior to connection.\n   */\n  readonly isPrepopulated: boolean;\n\n  /**\n   * Whether the database is collaborative.\n   */\n  readonly isCollaborative: boolean;\n\n  /**\n   * A promise that resolves when the database\n   * has connected to its backend, if any.\n   */\n  readonly connected: Promise<void>;\n\n  /**\n   * A map of the currently active collaborators\n   * for the database, including the local user.\n   */\n  readonly collaborators?: ICollaboratorMap;\n\n  /**\n   * Get a value for a path.\n   *\n   * @param path: the path for the object.\n   *\n   * @returns an `IObservable`.\n   */\n  get(path: string): IObservable | undefined;\n\n  /**\n   * Whether the `IModelDB` has an object at this path.\n   *\n   * @param path: the path for the object.\n   *\n   * @returns a boolean for whether an object is at `path`.\n   */\n  has(path: string): boolean;\n\n  /**\n   * Create a string and insert it in the database.\n   *\n   * @param path: the path for the string.\n   *\n   * @returns the string that was created.\n   */\n  createString(path: string): IObservableString;\n\n  /**\n   * Create an undoable list and insert it in the database.\n   *\n   * @param path: the path for the list.\n   *\n   * @returns the list that was created.\n   *\n   * #### Notes\n   * The list can only store objects that are simple\n   * JSON Objects and primitives.\n   */\n  createList<T extends JSONValue>(path: string): IObservableUndoableList<T>;\n\n  /**\n   * Create a map and insert it in the database.\n   *\n   * @param path: the path for the map.\n   *\n   * @returns the map that was created.\n   *\n   * #### Notes\n   * The map can only store objects that are simple\n   * JSON Objects and primitives.\n   */\n  createMap(path: string): IObservableJSON;\n\n  /**\n   * Create an opaque value and insert it in the database.\n   *\n   * @param path: the path for the value.\n   *\n   * @returns the value that was created.\n   */\n  createValue(path: string): IObservableValue;\n\n  /**\n   * Get a value at a path, or `undefined if it has not been set\n   * That value must already have been created using `createValue`.\n   *\n   * @param path: the path for the value.\n   */\n  getValue(path: string): JSONValue | undefined;\n\n  /**\n   * Set a value at a path. That value must already have\n   * been created using `createValue`.\n   *\n   * @param path: the path for the value.\n   *\n   * @param value: the new value.\n   */\n  setValue(path: string, value: JSONValue): void;\n\n  /**\n   * Create a view onto a subtree of the model database.\n   *\n   * @param basePath: the path for the root of the subtree.\n   *\n   * @returns an `IModelDB` with a view onto the original\n   *   `IModelDB`, with `basePath` prepended to all paths.\n   */\n  view(basePath: string): IModelDB;\n\n  /**\n   * Dispose of the resources held by the database.\n   */\n  dispose(): void;\n}\n\n/**\n * A concrete implementation of an `IObservableValue`.\n */\nexport class ObservableValue implements IObservableValue {\n  /**\n   * Constructor for the value.\n   *\n   * @param initialValue: the starting value for the `ObservableValue`.\n   */\n  constructor(initialValue: JSONValue = null) {\n    this._value = initialValue;\n  }\n\n  /**\n   * The observable type.\n   */\n  get type(): 'Value' {\n    return 'Value';\n  }\n\n  /**\n   * Whether the value has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * The changed signal.\n   */\n  get changed(): ISignal<this, ObservableValue.IChangedArgs> {\n    return this._changed;\n  }\n\n  /**\n   * Get the current value, or `undefined` if it has not been set.\n   */\n  get(): JSONValue {\n    return this._value;\n  }\n\n  /**\n   * Set the current value.\n   */\n  set(value: JSONValue): void {\n    let oldValue = this._value;\n    if (JSONExt.deepEqual(oldValue, value)) {\n      return;\n    }\n    this._value = value;\n    this._changed.emit({\n      oldValue: oldValue,\n      newValue: value\n    });\n  }\n\n  /**\n   * Dispose of the resources held by the value.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n    this._value = null;\n  }\n\n  private _value: JSONValue = null;\n  private _changed = new Signal<this, ObservableValue.IChangedArgs>(this);\n  private _isDisposed = false;\n}\n\n/**\n * The namespace for the `ObservableValue` class statics.\n */\nexport namespace ObservableValue {\n  /**\n   * The changed args object emitted by the `IObservableValue`.\n   */\n  export class IChangedArgs {\n    /**\n     * The old value.\n     */\n    oldValue: JSONValue | undefined;\n\n    /**\n     * The new value.\n     */\n    newValue: JSONValue | undefined;\n  }\n}\n\n/**\n * A concrete implementation of an `IModelDB`.\n */\nexport class ModelDB implements IModelDB {\n  /**\n   * Constructor for the `ModelDB`.\n   */\n  constructor(options: ModelDB.ICreateOptions = {}) {\n    this._basePath = options.basePath || '';\n    if (options.baseDB) {\n      this._db = options.baseDB;\n    } else {\n      this._db = new ObservableMap<IObservable>();\n      this._toDispose = true;\n    }\n  }\n\n  /**\n   * The base path for the `ModelDB`. This is prepended\n   * to all the paths that are passed in to the member\n   * functions of the object.\n   */\n  get basePath(): string {\n    return this._basePath;\n  }\n\n  /**\n   * Whether the database is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Whether the model has been populated with\n   * any model values.\n   */\n  readonly isPrepopulated: boolean = false;\n\n  /**\n   * Whether the model is collaborative.\n   */\n  readonly isCollaborative: boolean = false;\n\n  /**\n   * A promise resolved when the model is connected\n   * to its backend. For the in-memory ModelDB it\n   * is immediately resolved.\n   */\n  readonly connected: Promise<void> = Promise.resolve(void 0);\n\n  /**\n   * Get a value for a path.\n   *\n   * @param path: the path for the object.\n   *\n   * @returns an `IObservable`.\n   */\n  get(path: string): IObservable | undefined {\n    return this._db.get(this._resolvePath(path));\n  }\n\n  /**\n   * Whether the `IModelDB` has an object at this path.\n   *\n   * @param path: the path for the object.\n   *\n   * @returns a boolean for whether an object is at `path`.\n   */\n  has(path: string): boolean {\n    return this._db.has(this._resolvePath(path));\n  }\n\n  /**\n   * Create a string and insert it in the database.\n   *\n   * @param path: the path for the string.\n   *\n   * @returns the string that was created.\n   */\n  createString(path: string): IObservableString {\n    let str = new ObservableString();\n    this._disposables.add(str);\n    this.set(path, str);\n    return str;\n  }\n\n  /**\n   * Create an undoable list and insert it in the database.\n   *\n   * @param path: the path for the list.\n   *\n   * @returns the list that was created.\n   *\n   * #### Notes\n   * The list can only store objects that are simple\n   * JSON Objects and primitives.\n   */\n  createList<T extends JSONValue>(path: string): IObservableUndoableList<T> {\n    let vec = new ObservableUndoableList<T>(\n      new ObservableUndoableList.IdentitySerializer<T>()\n    );\n    this._disposables.add(vec);\n    this.set(path, vec);\n    return vec;\n  }\n\n  /**\n   * Create a map and insert it in the database.\n   *\n   * @param path: the path for the map.\n   *\n   * @returns the map that was created.\n   *\n   * #### Notes\n   * The map can only store objects that are simple\n   * JSON Objects and primitives.\n   */\n  createMap(path: string): IObservableJSON {\n    let map = new ObservableJSON();\n    this._disposables.add(map);\n    this.set(path, map);\n    return map;\n  }\n\n  /**\n   * Create an opaque value and insert it in the database.\n   *\n   * @param path: the path for the value.\n   *\n   * @returns the value that was created.\n   */\n  createValue(path: string): IObservableValue {\n    let val = new ObservableValue();\n    this._disposables.add(val);\n    this.set(path, val);\n    return val;\n  }\n\n  /**\n   * Get a value at a path, or `undefined if it has not been set\n   * That value must already have been created using `createValue`.\n   *\n   * @param path: the path for the value.\n   */\n  getValue(path: string): JSONValue | undefined {\n    let val = this.get(path);\n    if (!val || val.type !== 'Value') {\n      throw Error('Can only call getValue for an ObservableValue');\n    }\n    return (val as ObservableValue).get();\n  }\n\n  /**\n   * Set a value at a path. That value must already have\n   * been created using `createValue`.\n   *\n   * @param path: the path for the value.\n   *\n   * @param value: the new value.\n   */\n  setValue(path: string, value: JSONValue): void {\n    let val = this.get(path);\n    if (!val || val.type !== 'Value') {\n      throw Error('Can only call setValue on an ObservableValue');\n    }\n    (val as ObservableValue).set(value);\n  }\n\n  /**\n   * Create a view onto a subtree of the model database.\n   *\n   * @param basePath: the path for the root of the subtree.\n   *\n   * @returns an `IModelDB` with a view onto the original\n   *   `IModelDB`, with `basePath` prepended to all paths.\n   */\n  view(basePath: string): ModelDB {\n    let view = new ModelDB({ basePath, baseDB: this });\n    this._disposables.add(view);\n    return view;\n  }\n\n  /**\n   * Set a value at a path. Not intended to\n   * be called by user code, instead use the\n   * `create*` factory methods.\n   *\n   * @param path: the path to set the value at.\n   *\n   * @param value: the value to set at the path.\n   */\n  set(path: string, value: IObservable): void {\n    this._db.set(this._resolvePath(path), value);\n  }\n\n  /**\n   * Dispose of the resources held by the database.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    if (this._toDispose) {\n      this._db.dispose();\n    }\n    this._disposables.dispose();\n  }\n\n  /**\n   * Compute the fully resolved path for a path argument.\n   */\n  private _resolvePath(path: string): string {\n    if (this._basePath) {\n      path = this._basePath + '.' + path;\n    }\n    return path;\n  }\n\n  private _basePath: string;\n  private _db: ModelDB | ObservableMap<IObservable>;\n  private _toDispose = false;\n  private _isDisposed = false;\n  private _disposables = new DisposableSet();\n}\n\n/**\n * A namespace for the `ModelDB` class statics.\n */\nexport namespace ModelDB {\n  /**\n   * Options for creating a `ModelDB` object.\n   */\n  export interface ICreateOptions {\n    /**\n     * The base path to prepend to all the path arguments.\n     */\n    basePath?: string;\n\n    /**\n     * A ModelDB to use as the store for this\n     * ModelDB. If none is given, it uses its own store.\n     */\n    baseDB?: ModelDB;\n  }\n\n  /**\n   * A factory interface for creating `IModelDB` objects.\n   */\n  export interface IFactory {\n    /**\n     * Create a new `IModelDB` instance.\n     */\n    createNew(path: string): IModelDB;\n  }\n}\n"]}