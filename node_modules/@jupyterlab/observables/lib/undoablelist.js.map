{"version":3,"file":"undoablelist.js","sourceRoot":"","sources":["../../../../observables/src/undoablelist.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,mDAA2C;AAE3C,qDAAmE;AA6DnE;;GAEG;AACH,4BAAuC,SAAQ,+BAAiB;IAE9D;;OAEG;IACH,YAAY,UAA0B;QACpC,KAAK,EAAE,CAAC;QAuMF,gBAAW,GAAG,KAAK,CAAC;QACpB,gBAAW,GAAG,IAAI,CAAC;QACnB,wBAAmB,GAAG,KAAK,CAAC;QAC5B,WAAM,GAAG,CAAC,CAAC,CAAC;QACZ,WAAM,GAAgD,EAAE,CAAC;QA1M/D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACH,sBAAsB,CAAC,UAAoB;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,UAAU,KAAK,KAAK,CAAC;QACxC,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;IACH,CAAC;IAED;;OAEG;IACH,IAAI;QACF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QACD,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,KAAK,IAAI,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE,EAAE;YACpC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC1B;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,IAAI;QACF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QACD,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,KAAK,IAAI,MAAM,IAAI,OAAO,EAAE;YAC1B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC1B;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,SAAS;QACP,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,cAAc,CACpB,IAAwB,EACxB,MAAuC;QAEvC,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACxC,OAAO;SACR;QACD,qDAAqD;QACrD,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACrD;QACD,mBAAmB;QACnB,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACnC,+BAA+B;QAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACxC;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACzB;QACD,kDAAkD;QAClD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;aAAM;YACL,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;IACH,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,MAA+C;QACjE,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,KAAK;gBACR,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE;oBAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,KAAK;gBACR,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACxB,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;oBAC7B,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,QAAQ;gBACX,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACxB,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;oBAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,MAAM;gBACT,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC5C,MAAM;YACR;gBACE,OAAO;SACV;IACH,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,MAA+C;QACjE,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,KAAK;gBACR,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACxB,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;oBAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,KAAK;gBACR,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACxB,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;oBAC7B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1D,CAAC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,QAAQ;gBACX,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE;oBAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,MAAM;gBACT,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC5C,MAAM;YACR;gBACE,OAAO;SACV;IACH,CAAC;IAED;;OAEG;IACK,WAAW,CACjB,MAAuC;QAEvC,IAAI,SAAS,GAAgB,EAAE,CAAC;QAChC,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;YAC7B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QACH,IAAI,SAAS,GAAgB,EAAE,CAAC;QAChC,gBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;YAC7B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QACH,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,SAAS;YACT,SAAS;SACV,CAAC;IACJ,CAAC;CAQF;AAnND,wDAmNC;AAED;;GAEG;AACH,WAAiB,sBAAsB;IACrC;;OAEG;IACH;QAEE;;WAEG;QACH,MAAM,CAAC,KAAQ;YACb,OAAO,KAAK,CAAC;QACf,CAAC;QAED;;WAEG;QACH,QAAQ,CAAC,KAAgB;YACvB,OAAO,KAAU,CAAC;QACpB,CAAC;KACF;IAfY,yCAAkB,qBAe9B,CAAA;AACH,CAAC,EApBgB,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAoBtC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JSONValue } from '@phosphor/coreutils';\n\nimport { each } from '@phosphor/algorithm';\n\nimport { IObservableList, ObservableList } from './observablelist';\n\n/**\n * An object which knows how to serialize and\n * deserialize the type T.\n */\nexport interface ISerializer<T> {\n  /**\n   * Convert the object to JSON.\n   */\n  toJSON(value: T): JSONValue;\n\n  /**\n   * Deserialize the object from JSON.\n   */\n  fromJSON(value: JSONValue): T;\n}\n\n/**\n * An observable list that supports undo/redo.\n */\nexport interface IObservableUndoableList<T> extends IObservableList<T> {\n  /**\n   * Whether the object can redo changes.\n   */\n  readonly canRedo: boolean;\n\n  /**\n   * Whether the object can undo changes.\n   */\n  readonly canUndo: boolean;\n\n  /**\n   * Begin a compound operation.\n   *\n   * @param isUndoAble - Whether the operation is undoable.\n   *   The default is `false`.\n   */\n  beginCompoundOperation(isUndoAble?: boolean): void;\n\n  /**\n   * End a compound operation.\n   */\n  endCompoundOperation(): void;\n\n  /**\n   * Undo an operation.\n   */\n  undo(): void;\n\n  /**\n   * Redo an operation.\n   */\n  redo(): void;\n\n  /**\n   * Clear the change stack.\n   */\n  clearUndo(): void;\n}\n\n/**\n * A concrete implementation of an observable undoable list.\n */\nexport class ObservableUndoableList<T> extends ObservableList<T>\n  implements IObservableUndoableList<T> {\n  /**\n   * Construct a new undoable observable list.\n   */\n  constructor(serializer: ISerializer<T>) {\n    super();\n    this._serializer = serializer;\n    this.changed.connect(this._onListChanged, this);\n  }\n\n  /**\n   * Whether the object can redo changes.\n   */\n  get canRedo(): boolean {\n    return this._index < this._stack.length - 1;\n  }\n\n  /**\n   * Whether the object can undo changes.\n   */\n  get canUndo(): boolean {\n    return this._index >= 0;\n  }\n\n  /**\n   * Begin a compound operation.\n   *\n   * @param isUndoAble - Whether the operation is undoable.\n   *   The default is `true`.\n   */\n  beginCompoundOperation(isUndoAble?: boolean): void {\n    this._inCompound = true;\n    this._isUndoable = isUndoAble !== false;\n    this._madeCompoundChange = false;\n  }\n\n  /**\n   * End a compound operation.\n   */\n  endCompoundOperation(): void {\n    this._inCompound = false;\n    this._isUndoable = true;\n    if (this._madeCompoundChange) {\n      this._index++;\n    }\n  }\n\n  /**\n   * Undo an operation.\n   */\n  undo(): void {\n    if (!this.canUndo) {\n      return;\n    }\n    let changes = this._stack[this._index];\n    this._isUndoable = false;\n    for (let change of changes.reverse()) {\n      this._undoChange(change);\n    }\n    this._isUndoable = true;\n    this._index--;\n  }\n\n  /**\n   * Redo an operation.\n   */\n  redo(): void {\n    if (!this.canRedo) {\n      return;\n    }\n    this._index++;\n    let changes = this._stack[this._index];\n    this._isUndoable = false;\n    for (let change of changes) {\n      this._redoChange(change);\n    }\n    this._isUndoable = true;\n  }\n\n  /**\n   * Clear the change stack.\n   */\n  clearUndo(): void {\n    this._index = -1;\n    this._stack = [];\n  }\n\n  /**\n   * Handle a change in the list.\n   */\n  private _onListChanged(\n    list: IObservableList<T>,\n    change: IObservableList.IChangedArgs<T>\n  ): void {\n    if (this.isDisposed || !this._isUndoable) {\n      return;\n    }\n    // Clear everything after this position if necessary.\n    if (!this._inCompound || !this._madeCompoundChange) {\n      this._stack = this._stack.slice(0, this._index + 1);\n    }\n    // Copy the change.\n    let evt = this._copyChange(change);\n    // Put the change in the stack.\n    if (this._stack[this._index + 1]) {\n      this._stack[this._index + 1].push(evt);\n    } else {\n      this._stack.push([evt]);\n    }\n    // If not in a compound operation, increase index.\n    if (!this._inCompound) {\n      this._index++;\n    } else {\n      this._madeCompoundChange = true;\n    }\n  }\n\n  /**\n   * Undo a change event.\n   */\n  private _undoChange(change: IObservableList.IChangedArgs<JSONValue>): void {\n    let index = 0;\n    let serializer = this._serializer;\n    switch (change.type) {\n      case 'add':\n        each(change.newValues, () => {\n          this.remove(change.newIndex);\n        });\n        break;\n      case 'set':\n        index = change.oldIndex;\n        each(change.oldValues, value => {\n          this.set(index++, serializer.fromJSON(value));\n        });\n        break;\n      case 'remove':\n        index = change.oldIndex;\n        each(change.oldValues, value => {\n          this.insert(index++, serializer.fromJSON(value));\n        });\n        break;\n      case 'move':\n        this.move(change.newIndex, change.oldIndex);\n        break;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Redo a change event.\n   */\n  private _redoChange(change: IObservableList.IChangedArgs<JSONValue>): void {\n    let index = 0;\n    let serializer = this._serializer;\n    switch (change.type) {\n      case 'add':\n        index = change.newIndex;\n        each(change.newValues, value => {\n          this.insert(index++, serializer.fromJSON(value));\n        });\n        break;\n      case 'set':\n        index = change.newIndex;\n        each(change.newValues, value => {\n          this.set(change.newIndex++, serializer.fromJSON(value));\n        });\n        break;\n      case 'remove':\n        each(change.oldValues, () => {\n          this.remove(change.oldIndex);\n        });\n        break;\n      case 'move':\n        this.move(change.oldIndex, change.newIndex);\n        break;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Copy a change as JSON.\n   */\n  private _copyChange(\n    change: IObservableList.IChangedArgs<T>\n  ): IObservableList.IChangedArgs<JSONValue> {\n    let oldValues: JSONValue[] = [];\n    each(change.oldValues, value => {\n      oldValues.push(this._serializer.toJSON(value));\n    });\n    let newValues: JSONValue[] = [];\n    each(change.newValues, value => {\n      newValues.push(this._serializer.toJSON(value));\n    });\n    return {\n      type: change.type,\n      oldIndex: change.oldIndex,\n      newIndex: change.newIndex,\n      oldValues,\n      newValues\n    };\n  }\n\n  private _inCompound = false;\n  private _isUndoable = true;\n  private _madeCompoundChange = false;\n  private _index = -1;\n  private _stack: IObservableList.IChangedArgs<JSONValue>[][] = [];\n  private _serializer: ISerializer<T>;\n}\n\n/**\n * Namespace for ObservableUndoableList utilities.\n */\nexport namespace ObservableUndoableList {\n  /**\n   * A default, identity serializer.\n   */\n  export class IdentitySerializer<T extends JSONValue>\n    implements ISerializer<T> {\n    /**\n     * Identity serialize.\n     */\n    toJSON(value: T): JSONValue {\n      return value;\n    }\n\n    /**\n     * Identity deserialize.\n     */\n    fromJSON(value: JSONValue): T {\n      return value as T;\n    }\n  }\n}\n"]}