{"version":3,"file":"observablejson.js","sourceRoot":"","sources":["../../../../observables/src/observablejson.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAAqE;AAErE,mDAA8C;AAE9C,mDAAgE;AAsBhE;;GAEG;AACH,oBAA4B,SAAQ,6BAAwB;IAC1D;;OAEG;IACH,YAAY,UAAmC,EAAE;QAC/C,KAAK,CAAC;YACJ,OAAO,EAAE,mBAAO,CAAC,SAAS;YAC1B,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,MAAM,GAAG,GAAe,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAEzB,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE5B,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,GAAG,CAAC,GAAG,CAAC,GAAG,mBAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACpC;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA3BD,wCA2BC;AAED;;GAEG;AACH,WAAiB,cAAc;IAW7B;;OAEG;IACH,mBAA2B,SAAQ,mBAAO;QACxC;;WAEG;QACH,YAAY,IAAkC;YAC5C,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,CAAC;KAMF;IAbY,4BAAa,gBAazB,CAAA;AACH,CAAC,EA5BgB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QA4B9B","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JSONExt, JSONObject, JSONValue } from '@phosphor/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { IObservableMap, ObservableMap } from './observablemap';\n\n/**\n * An observable JSON value.\n */\nexport interface IObservableJSON extends IObservableMap<JSONValue> {\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): JSONObject;\n}\n\n/**\n * The namespace for IObservableJSON related interfaces.\n */\nexport namespace IObservableJSON {\n  /**\n   * A type alias for observable JSON changed args.\n   */\n  export type IChangedArgs = IObservableMap.IChangedArgs<JSONValue>;\n}\n\n/**\n * A concrete Observable map for JSON data.\n */\nexport class ObservableJSON extends ObservableMap<JSONValue> {\n  /**\n   * Construct a new observable JSON object.\n   */\n  constructor(options: ObservableJSON.IOptions = {}) {\n    super({\n      itemCmp: JSONExt.deepEqual,\n      values: options.values\n    });\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): JSONObject {\n    const out: JSONObject = Object.create(null);\n    const keys = this.keys();\n\n    for (let key of keys) {\n      const value = this.get(key);\n\n      if (value !== undefined) {\n        out[key] = JSONExt.deepCopy(value);\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * The namespace for ObservableJSON static data.\n */\nexport namespace ObservableJSON {\n  /**\n   * The options use to initialize an observable JSON object.\n   */\n  export interface IOptions {\n    /**\n     * The optional intitial value for the object.\n     */\n    values?: JSONObject;\n  }\n\n  /**\n   * An observable JSON change message.\n   */\n  export class ChangeMessage extends Message {\n    /**\n     * Create a new metadata changed message.\n     */\n    constructor(args: IObservableJSON.IChangedArgs) {\n      super('jsonvalue-changed');\n      this.args = args;\n    }\n\n    /**\n     * The arguments of the change.\n     */\n    readonly args: IObservableJSON.IChangedArgs;\n  }\n}\n"]}