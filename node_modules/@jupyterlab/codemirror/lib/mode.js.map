{"version":3,"file":"mode.js","sourceRoot":"","sources":["../../../../codemirror/src/mode.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JSONValue } from '@phosphor/coreutils';\n\nimport { IEditorMimeTypeService } from '@jupyterlab/codeeditor';\n\nimport CodeMirror from 'codemirror';\n\nimport 'codemirror/mode/meta';\nimport 'codemirror/addon/runmode/runmode';\n\nimport './codemirror-ipython';\nimport './codemirror-ipythongfm';\n\n// Bundle other common modes\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/julia/julia';\nimport 'codemirror/mode/r/r';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/clike/clike';\nimport 'codemirror/mode/shell/shell';\nimport 'codemirror/mode/sql/sql';\n\nimport { PathExt } from '@jupyterlab/coreutils';\n\n// Stub for the require function.\ndeclare var require: any;\n\n/**\n * The namespace for CodeMirror Mode functionality.\n */\nexport namespace Mode {\n  /**\n   * The interface of a codemirror modeInfo spec.\n   */\n  export interface ISpec {\n    ext?: string[];\n    name?: string;\n    mode: string;\n    mime: string;\n  }\n\n  /**\n   * The interface of a codemirror mode spec.\n   */\n  export interface IMode {\n    name: string;\n    [key: string]: JSONValue;\n  }\n\n  /**\n   * Get the raw list of available modes specs.\n   */\n  export function getModeInfo(): ISpec[] {\n    return CodeMirror.modeInfo;\n  }\n\n  /**\n   * Running a CodeMirror mode outside of an editor.\n   */\n  export function run(\n    code: string,\n    mode: string | ISpec,\n    el: HTMLElement\n  ): void {\n    CodeMirror.runMode(code, mode, el);\n  }\n\n  /**\n   * Ensure a codemirror mode is available by name or Codemirror spec.\n   *\n   * @param mode - The mode to ensure.  If it is a string, uses [findBest]\n   *   to get the appropriate spec.\n   *\n   * @returns A promise that resolves when the mode is available.\n   */\n  export function ensure(mode: string | ISpec): Promise<ISpec> {\n    let spec = findBest(mode);\n\n    // Simplest, cheapest check by mode name.\n    if (CodeMirror.modes.hasOwnProperty(spec.mode)) {\n      return Promise.resolve(spec);\n    }\n\n    // Fetch the mode asynchronously.\n    return new Promise<ISpec>((resolve, reject) => {\n      // An arrow function below seems to miscompile in our current webpack to\n      // invalid js.\n      require([`codemirror/mode/${spec.mode}/${spec.mode}.js`], function() {\n        resolve(spec);\n      });\n    });\n  }\n\n  /**\n   * Find a codemirror mode by name or CodeMirror spec.\n   */\n  export function findBest(mode: string | ISpec): ISpec {\n    let modename = typeof mode === 'string' ? mode : mode.mode || mode.name;\n    let mimetype = typeof mode !== 'string' ? mode.mime : modename;\n    let ext = typeof mode !== 'string' ? mode.ext : [];\n\n    return (\n      CodeMirror.findModeByName(modename || '') ||\n      CodeMirror.findModeByMIME(mimetype || '') ||\n      findByExtension(ext) ||\n      CodeMirror.findModeByMIME(IEditorMimeTypeService.defaultMimeType) ||\n      CodeMirror.findModeByMIME('text/plain')\n    );\n  }\n\n  /**\n   * Find a codemirror mode by MIME.\n   */\n  export function findByMIME(mime: string): ISpec {\n    return CodeMirror.findModeByMIME(mime);\n  }\n\n  /**\n   * Find a codemirror mode by name.\n   */\n  export function findByName(name: string): ISpec {\n    return CodeMirror.findModeByName(name);\n  }\n\n  /**\n   * Find a codemirror mode by filename.\n   */\n  export function findByFileName(name: string): ISpec {\n    let basename = PathExt.basename(name);\n    return CodeMirror.findModeByFileName(basename);\n  }\n\n  /**\n   * Find a codemirror mode by extension.\n   */\n  export function findByExtension(ext: string | string[]): ISpec {\n    if (typeof ext === 'string') {\n      return CodeMirror.findModeByExtension(name);\n    }\n    for (let i = 0; i < ext.length; i++) {\n      let mode = CodeMirror.findModeByExtension(ext[i]);\n      if (mode) {\n        return mode;\n      }\n    }\n  }\n}\n"]}