{"version":3,"file":"mimetype.js","sourceRoot":"","sources":["../../../../codemirror/src/mimetype.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,qDAA0D;AAE1D,iCAA8B;AAE9B;;GAEG;AACH;IACE;;;;;OAKG;IACH,qBAAqB,CAAC,IAAoC;QACxD,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,IAAI,EAAE,CAAC;QACpC,OAAO,WAAI,CAAC,QAAQ,CACjB,IAAI,CAAC,eAAuB,IAAI;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC,CACF,CAAC,IAAI,CAAC;IACT,CAAC;IAED;;;;;OAKG;IACH,qBAAqB,CAAC,IAAY;QAChC,MAAM,GAAG,GAAG,mBAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,GAAG,KAAK,MAAM,EAAE;YAClB,OAAO,eAAe,CAAC;SACxB;aAAM,IAAI,GAAG,KAAK,KAAK,EAAE;YACxB,OAAO,mBAAmB,CAAC;SAC5B;QACD,IAAI,IAAI,GAAG,WAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAlCD,8DAkCC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IEditorMimeTypeService } from '@jupyterlab/codeeditor';\n\nimport { nbformat, PathExt } from '@jupyterlab/coreutils';\n\nimport { Mode } from './mode';\n\n/**\n * The mime type service for CodeMirror.\n */\nexport class CodeMirrorMimeTypeService implements IEditorMimeTypeService {\n  /**\n   * Returns a mime type for the given language info.\n   *\n   * #### Notes\n   * If a mime type cannot be found returns the defaul mime type `text/plain`, never `null`.\n   */\n  getMimeTypeByLanguage(info: nbformat.ILanguageInfoMetadata): string {\n    let ext = info.file_extension || '';\n    return Mode.findBest(\n      (info.codemirror_mode as any) || {\n        mimetype: info.mimetype,\n        name: info.name,\n        ext: [ext.split('.').slice(-1)[0]]\n      }\n    ).mime;\n  }\n\n  /**\n   * Returns a mime type for the given file path.\n   *\n   * #### Notes\n   * If a mime type cannot be found returns the default mime type `text/plain`, never `null`.\n   */\n  getMimeTypeByFilePath(path: string): string {\n    const ext = PathExt.extname(path);\n    if (ext === '.ipy') {\n      return 'text/x-python';\n    } else if (ext === '.md') {\n      return 'text/x-ipythongfm';\n    }\n    let mode = Mode.findByFileName(path) || Mode.findBest('');\n    return mode.mime;\n  }\n}\n"]}