{"version":3,"file":"mimedocument.js","sourceRoot":"","sources":["../../../../docregistry/src/mimedocument.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { showErrorMessage } from '@jupyterlab/apputils';\n\nimport { ActivityMonitor } from '@jupyterlab/coreutils';\n\nimport {\n  IRenderMime,\n  RenderMimeRegistry,\n  MimeModel\n} from '@jupyterlab/rendermime';\n\nimport { JSONObject, PromiseDelegate } from '@phosphor/coreutils';\n\nimport { Message, MessageLoop } from '@phosphor/messaging';\n\nimport { StackedLayout, Widget } from '@phosphor/widgets';\n\nimport { ABCWidgetFactory, DocumentWidget } from './default';\n\nimport { DocumentRegistry } from './registry';\n\n/**\n * A content widget for a rendered mimetype document.\n */\nexport class MimeContent extends Widget {\n  /**\n   * Construct a new widget.\n   */\n  constructor(options: MimeContent.IOptions) {\n    super();\n    this.addClass('jp-MimeDocument');\n    this.mimeType = options.mimeType;\n    this._dataType = options.dataType || 'string';\n    this._context = options.context;\n    this._renderer = options.renderer;\n\n    const layout = (this.layout = new StackedLayout());\n    layout.addWidget(this._renderer);\n\n    this._context.ready\n      .then(() => {\n        return this._render();\n      })\n      .then(() => {\n        // After rendering for the first time, send an activation request if we\n        // are currently focused.\n        if (this.node === document.activeElement) {\n          // We want to synchronously send (not post) the activate message, while\n          // we know this node still has focus.\n          MessageLoop.sendMessage(this._renderer, Widget.Msg.ActivateRequest);\n        }\n\n        // Throttle the rendering rate of the widget.\n        this._monitor = new ActivityMonitor({\n          signal: this._context.model.contentChanged,\n          timeout: options.renderTimeout\n        });\n        this._monitor.activityStopped.connect(this.update, this);\n\n        this._ready.resolve(undefined);\n      })\n      .catch(reason => {\n        // Dispose the document if rendering fails.\n        requestAnimationFrame(() => {\n          this.dispose();\n        });\n        showErrorMessage(`Renderer Failure: ${this._context.path}`, reason);\n      });\n  }\n\n  /**\n   * The mimetype for this rendered content.\n   */\n  readonly mimeType: string;\n\n  /**\n   * A promise that resolves when the widget is ready.\n   */\n  get ready(): Promise<void> {\n    return this._ready.promise;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    if (this._monitor) {\n      this._monitor.dispose();\n    }\n    this._monitor = null;\n    super.dispose();\n  }\n\n  /**\n   * Handle an `update-request` message to the widget.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this._context.isReady) {\n      this._render();\n    }\n  }\n\n  /**\n   * Render the mime content.\n   */\n  private async _render(): Promise<void> {\n    if (this.isDisposed) {\n      return;\n    }\n\n    // Since rendering is async, we note render requests that happen while we\n    // actually are rendering for a future rendering.\n    if (this._isRendering) {\n      this._renderRequested = true;\n      return;\n    }\n\n    // Set up for this rendering pass.\n    this._renderRequested = false;\n    let context = this._context;\n    let model = context.model;\n    let data: JSONObject = {};\n    if (this._dataType === 'string') {\n      data[this.mimeType] = model.toString();\n    } else {\n      data[this.mimeType] = model.toJSON();\n    }\n    let mimeModel = new MimeModel({ data, callback: this._changeCallback });\n\n    try {\n      // Do the rendering asynchronously.\n      this._isRendering = true;\n      await this._renderer.renderModel(mimeModel);\n      this._isRendering = false;\n\n      // If there is an outstanding request to render, go ahead and render\n      if (this._renderRequested) {\n        return this._render();\n      }\n    } catch (reason) {\n      // Dispose the document if rendering fails.\n      requestAnimationFrame(() => {\n        this.dispose();\n      });\n      showErrorMessage(`Renderer Failure: ${context.path}`, reason);\n    }\n  }\n\n  /**\n   * A bound change callback.\n   */\n  private _changeCallback = (\n    options: IRenderMime.IMimeModel.ISetDataOptions\n  ) => {\n    if (!options.data || !options.data[this.mimeType]) {\n      return;\n    }\n    let data = options.data[this.mimeType];\n    if (typeof data === 'string') {\n      this._context.model.fromString(data);\n    } else {\n      this._context.model.fromJSON(data);\n    }\n  };\n\n  private _context: DocumentRegistry.IContext<DocumentRegistry.IModel>;\n  private _renderer: IRenderMime.IRenderer;\n  private _monitor: ActivityMonitor<any, any> | null;\n  private _ready = new PromiseDelegate<void>();\n  private _dataType: 'string' | 'json';\n  private _isRendering = false;\n  private _renderRequested = false;\n}\n\n/**\n * The namespace for MimeDocument class statics.\n */\nexport namespace MimeContent {\n  /**\n   * The options used to initialize a MimeDocument.\n   */\n  export interface IOptions {\n    /**\n     * Context\n     */\n    context: DocumentRegistry.IContext<DocumentRegistry.IModel>;\n\n    /**\n     * The renderer instance.\n     */\n    renderer: IRenderMime.IRenderer;\n\n    /**\n     * The mime type.\n     */\n    mimeType: string;\n\n    /**\n     * The render timeout.\n     */\n    renderTimeout: number;\n\n    /**\n     * Preferred data type from the model.\n     */\n    dataType?: 'string' | 'json';\n  }\n}\n\n/**\n * A document widget for mime content.\n */\nexport class MimeDocument extends DocumentWidget<MimeContent> {}\n\n/**\n * An implementation of a widget factory for a rendered mimetype document.\n */\nexport class MimeDocumentFactory extends ABCWidgetFactory<MimeDocument> {\n  /**\n   * Construct a new markdown widget factory.\n   */\n  constructor(options: MimeDocumentFactory.IOptions) {\n    super(Private.createRegistryOptions(options));\n    this._rendermime = options.rendermime;\n    this._renderTimeout = options.renderTimeout || 1000;\n    this._dataType = options.dataType || 'string';\n    this._fileType = options.primaryFileType;\n  }\n\n  /**\n   * Create a new widget given a context.\n   */\n  protected createNewWidget(context: DocumentRegistry.Context): MimeDocument {\n    const ft = this._fileType;\n    const mimeType = ft.mimeTypes.length ? ft.mimeTypes[0] : 'text/plain';\n\n    const rendermime = this._rendermime.clone({\n      resolver: context.urlResolver\n    });\n    const renderer = rendermime.createRenderer(mimeType);\n\n    const content = new MimeContent({\n      context,\n      renderer,\n      mimeType,\n      renderTimeout: this._renderTimeout,\n      dataType: this._dataType\n    });\n\n    content.title.iconClass = ft.iconClass;\n    content.title.iconLabel = ft.iconLabel;\n\n    const widget = new MimeDocument({ content, context });\n\n    return widget;\n  }\n\n  private _rendermime: RenderMimeRegistry;\n  private _renderTimeout: number;\n  private _dataType: 'string' | 'json';\n  private _fileType: DocumentRegistry.IFileType;\n}\n\n/**\n * The namespace for MimeDocumentFactory class statics.\n */\nexport namespace MimeDocumentFactory {\n  /**\n   * The options used to initialize a MimeDocumentFactory.\n   */\n  export interface IOptions extends DocumentRegistry.IWidgetFactoryOptions {\n    /**\n     * The primary file type associated with the document.\n     */\n    primaryFileType: DocumentRegistry.IFileType;\n\n    /**\n     * The rendermime instance.\n     */\n    rendermime: RenderMimeRegistry;\n\n    /**\n     * The render timeout.\n     */\n    renderTimeout?: number;\n\n    /**\n     * Preferred data type from the model.\n     */\n    dataType?: 'string' | 'json';\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create the document registry options.\n   */\n  export function createRegistryOptions(\n    options: MimeDocumentFactory.IOptions\n  ): DocumentRegistry.IWidgetFactoryOptions {\n    return {\n      ...options,\n      readOnly: true\n    } as DocumentRegistry.IWidgetFactoryOptions;\n  }\n}\n"]}