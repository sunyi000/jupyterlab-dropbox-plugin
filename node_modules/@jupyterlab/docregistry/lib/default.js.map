{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../docregistry/src/default.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Mode } from '@jupyterlab/codemirror';\n\nimport { Contents } from '@jupyterlab/services';\n\nimport { JSONValue } from '@phosphor/coreutils';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { MainAreaWidget } from '@jupyterlab/apputils';\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n\nimport { IChangedArgs, PathExt } from '@jupyterlab/coreutils';\n\nimport { IModelDB } from '@jupyterlab/observables';\n\nimport { DocumentRegistry, IDocumentWidget } from './index';\n\n/**\n * The default implementation of a document model.\n */\nexport class DocumentModel extends CodeEditor.Model\n  implements DocumentRegistry.ICodeModel {\n  /**\n   * Construct a new document model.\n   */\n  constructor(languagePreference?: string, modelDB?: IModelDB) {\n    super({ modelDB });\n    this._defaultLang = languagePreference || '';\n    this.value.changed.connect(this.triggerContentChange, this);\n  }\n\n  /**\n   * A signal emitted when the document content changes.\n   */\n  get contentChanged(): ISignal<this, void> {\n    return this._contentChanged;\n  }\n\n  /**\n   * A signal emitted when the document state changes.\n   */\n  get stateChanged(): ISignal<this, IChangedArgs<any>> {\n    return this._stateChanged;\n  }\n\n  /**\n   * The dirty state of the document.\n   */\n  get dirty(): boolean {\n    return this._dirty;\n  }\n  set dirty(newValue: boolean) {\n    if (newValue === this._dirty) {\n      return;\n    }\n    let oldValue = this._dirty;\n    this._dirty = newValue;\n    this.triggerStateChange({ name: 'dirty', oldValue, newValue });\n  }\n\n  /**\n   * The read only state of the document.\n   */\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n  set readOnly(newValue: boolean) {\n    if (newValue === this._readOnly) {\n      return;\n    }\n    let oldValue = this._readOnly;\n    this._readOnly = newValue;\n    this.triggerStateChange({ name: 'readOnly', oldValue, newValue });\n  }\n\n  /**\n   * The default kernel name of the document.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get defaultKernelName(): string {\n    return '';\n  }\n\n  /**\n   * The default kernel language of the document.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get defaultKernelLanguage(): string {\n    return this._defaultLang;\n  }\n\n  /**\n   * Serialize the model to a string.\n   */\n  toString(): string {\n    return this.value.text;\n  }\n\n  /**\n   * Deserialize the model from a string.\n   *\n   * #### Notes\n   * Should emit a [contentChanged] signal.\n   */\n  fromString(value: string): void {\n    this.value.text = value;\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): JSONValue {\n    return JSON.parse(this.value.text || 'null');\n  }\n\n  /**\n   * Deserialize the model from JSON.\n   *\n   * #### Notes\n   * Should emit a [contentChanged] signal.\n   */\n  fromJSON(value: JSONValue): void {\n    this.fromString(JSON.stringify(value));\n  }\n\n  /**\n   * Initialize the model with its current state.\n   */\n  initialize(): void {\n    return;\n  }\n\n  /**\n   * Trigger a state change signal.\n   */\n  protected triggerStateChange(args: IChangedArgs<any>): void {\n    this._stateChanged.emit(args);\n  }\n\n  /**\n   * Trigger a content changed signal.\n   */\n  protected triggerContentChange(): void {\n    this._contentChanged.emit(void 0);\n    this.dirty = true;\n  }\n\n  private _defaultLang = '';\n  private _dirty = false;\n  private _readOnly = false;\n  private _contentChanged = new Signal<this, void>(this);\n  private _stateChanged = new Signal<this, IChangedArgs<any>>(this);\n}\n\n/**\n * An implementation of a model factory for text files.\n */\nexport class TextModelFactory implements DocumentRegistry.CodeModelFactory {\n  /**\n   * The name of the model type.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get name(): string {\n    return 'text';\n  }\n\n  /**\n   * The type of the file.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get contentType(): Contents.ContentType {\n    return 'file';\n  }\n\n  /**\n   * The format of the file.\n   *\n   * This is a read-only property.\n   */\n  get fileFormat(): Contents.FileFormat {\n    return 'text';\n  }\n\n  /**\n   * Get whether the model factory has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the model factory.\n   */\n  dispose(): void {\n    this._isDisposed = true;\n  }\n\n  /**\n   * Create a new model.\n   *\n   * @param languagePreference - An optional kernel language preference.\n   *\n   * @returns A new document model.\n   */\n  createNew(\n    languagePreference?: string,\n    modelDB?: IModelDB\n  ): DocumentRegistry.ICodeModel {\n    return new DocumentModel(languagePreference, modelDB);\n  }\n\n  /**\n   * Get the preferred kernel language given a file path.\n   */\n  preferredLanguage(path: string): string {\n    let mode = Mode.findByFileName(path);\n    return mode && mode.mode;\n  }\n\n  private _isDisposed = false;\n}\n\n/**\n * An implementation of a model factory for base64 files.\n */\nexport class Base64ModelFactory extends TextModelFactory {\n  /**\n   * The name of the model type.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get name(): string {\n    return 'base64';\n  }\n\n  /**\n   * The type of the file.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get contentType(): Contents.ContentType {\n    return 'file';\n  }\n\n  /**\n   * The format of the file.\n   *\n   * This is a read-only property.\n   */\n  get fileFormat(): Contents.FileFormat {\n    return 'base64';\n  }\n}\n\n/**\n * The default implementation of a widget factory.\n */\nexport abstract class ABCWidgetFactory<\n  T extends IDocumentWidget,\n  U extends DocumentRegistry.IModel = DocumentRegistry.IModel\n> implements DocumentRegistry.IWidgetFactory<T, U> {\n  /**\n   * Construct a new `ABCWidgetFactory`.\n   */\n  constructor(options: DocumentRegistry.IWidgetFactoryOptions) {\n    this._name = options.name;\n    this._readOnly = options.readOnly === undefined ? false : options.readOnly;\n    this._defaultFor = options.defaultFor ? options.defaultFor.slice() : [];\n    this._defaultRendered = (options.defaultRendered || []).slice();\n    this._fileTypes = options.fileTypes.slice();\n    this._modelName = options.modelName || 'text';\n    this._preferKernel = !!options.preferKernel;\n    this._canStartKernel = !!options.canStartKernel;\n  }\n\n  /**\n   * A signal emitted when a widget is created.\n   */\n  get widgetCreated(): ISignal<DocumentRegistry.IWidgetFactory<T, U>, T> {\n    return this._widgetCreated;\n  }\n\n  /**\n   * Get whether the model factory has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the document manager.\n   */\n  dispose(): void {\n    this._isDisposed = true;\n  }\n\n  /**\n   * Whether the widget factory is read only.\n   */\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n\n  /**\n   * The name of the widget to display in dialogs.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * The file types the widget can view.\n   */\n  get fileTypes(): string[] {\n    return this._fileTypes.slice();\n  }\n\n  /**\n   * The registered name of the model type used to create the widgets.\n   */\n  get modelName(): string {\n    return this._modelName;\n  }\n\n  /**\n   * The file types for which the factory should be the default.\n   */\n  get defaultFor(): string[] {\n    return this._defaultFor.slice();\n  }\n\n  /**\n   * The file types for which the factory should be the default for\n   * rendering a document model, if different from editing.\n   */\n  get defaultRendered(): string[] {\n    return this._defaultRendered.slice();\n  }\n\n  /**\n   * Whether the widgets prefer having a kernel started.\n   */\n  get preferKernel(): boolean {\n    return this._preferKernel;\n  }\n\n  /**\n   * Whether the widgets can start a kernel when opened.\n   */\n  get canStartKernel(): boolean {\n    return this._canStartKernel;\n  }\n\n  /**\n   * Create a new widget given a document model and a context.\n   *\n   * #### Notes\n   * It should emit the [widgetCreated] signal with the new widget.\n   */\n  createNew(context: DocumentRegistry.IContext<U>): T {\n    let widget = this.createNewWidget(context);\n    this._widgetCreated.emit(widget);\n    return widget;\n  }\n\n  /**\n   * Create a widget for a context.\n   */\n  protected abstract createNewWidget(context: DocumentRegistry.IContext<U>): T;\n\n  private _isDisposed = false;\n  private _name: string;\n  private _readOnly: boolean;\n  private _canStartKernel: boolean;\n  private _preferKernel: boolean;\n  private _modelName: string;\n  private _fileTypes: string[];\n  private _defaultFor: string[];\n  private _defaultRendered: string[];\n  private _widgetCreated = new Signal<DocumentRegistry.IWidgetFactory<T, U>, T>(\n    this\n  );\n}\n\n/**\n * The class name added to a dirty widget.\n */\nconst DIRTY_CLASS = 'jp-mod-dirty';\n\n/**\n * A document widget implementation.\n */\nexport class DocumentWidget<\n  T extends Widget = Widget,\n  U extends DocumentRegistry.IModel = DocumentRegistry.IModel\n> extends MainAreaWidget<T> implements IDocumentWidget<T, U> {\n  constructor(options: DocumentWidget.IOptions<T, U>) {\n    // Include the context ready promise in the widget reveal promise\n    options.reveal = Promise.all([options.reveal, options.context.ready]);\n    super(options);\n\n    this.context = options.context;\n\n    // Handle context path changes\n    this.context.pathChanged.connect(this._onPathChanged, this);\n    this._onPathChanged(this.context, this.context.path);\n\n    // Listen for changes in the dirty state.\n    this.context.model.stateChanged.connect(this._onModelStateChanged, this);\n    this.context.ready.then(() => {\n      this._handleDirtyState();\n    });\n  }\n\n  /**\n   * Handle a path change.\n   */\n  private _onPathChanged(\n    sender: DocumentRegistry.IContext<U>,\n    path: string\n  ): void {\n    this.title.label = PathExt.basename(sender.localPath);\n  }\n\n  /**\n   * Handle a change to the context model state.\n   */\n  private _onModelStateChanged(\n    sender: DocumentRegistry.IModel,\n    args: IChangedArgs<any>\n  ): void {\n    if (args.name === 'dirty') {\n      this._handleDirtyState();\n    }\n  }\n\n  /**\n   * Handle the dirty state of the context model.\n   */\n  private _handleDirtyState(): void {\n    if (this.context.model.dirty) {\n      this.title.className += ` ${DIRTY_CLASS}`;\n    } else {\n      this.title.className = this.title.className.replace(DIRTY_CLASS, '');\n    }\n  }\n\n  readonly context: DocumentRegistry.IContext<U>;\n}\n\nexport namespace DocumentWidget {\n  export interface IOptions<\n    T extends Widget = Widget,\n    U extends DocumentRegistry.IModel = DocumentRegistry.IModel\n  > extends MainAreaWidget.IOptions<T> {\n    context: DocumentRegistry.IContext<U>;\n  }\n\n  export interface IOptionsOptionalContent<\n    T extends Widget = Widget,\n    U extends DocumentRegistry.IModel = DocumentRegistry.IModel\n  > extends MainAreaWidget.IOptionsOptionalContent<T> {\n    context: DocumentRegistry.IContext<U>;\n  }\n}\n"]}