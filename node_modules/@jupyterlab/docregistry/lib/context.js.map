{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../docregistry/src/context.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  Contents,\n  ServiceManager,\n  ServerConnection\n} from '@jupyterlab/services';\n\nimport { JSONValue, PromiseDelegate } from '@phosphor/coreutils';\n\nimport { IDisposable, DisposableDelegate } from '@phosphor/disposable';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport {\n  showDialog,\n  ClientSession,\n  Dialog,\n  IClientSession\n} from '@jupyterlab/apputils';\n\nimport { PathExt } from '@jupyterlab/coreutils';\n\nimport { IModelDB, ModelDB } from '@jupyterlab/observables';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { DocumentRegistry } from './registry';\n\n/**\n * An implementation of a document context.\n *\n * This class is typically instantiated by the document manager.\n */\nexport class Context<T extends DocumentRegistry.IModel>\n  implements DocumentRegistry.IContext<T> {\n  /**\n   * Construct a new document context.\n   */\n  constructor(options: Context.IOptions<T>) {\n    let manager = (this._manager = options.manager);\n    this._factory = options.factory;\n    this._opener = options.opener || Private.noOp;\n    this._path = options.path;\n    const localPath = this._manager.contents.localPath(this._path);\n    let lang = this._factory.preferredLanguage(PathExt.basename(localPath));\n\n    let dbFactory = options.modelDBFactory;\n    if (dbFactory) {\n      const localPath = manager.contents.localPath(this._path);\n      this._modelDB = dbFactory.createNew(localPath);\n      this._model = this._factory.createNew(lang, this._modelDB);\n    } else {\n      this._model = this._factory.createNew(lang);\n    }\n\n    this._readyPromise = manager.ready.then(() => {\n      return this._populatedPromise.promise;\n    });\n\n    let ext = PathExt.extname(this._path);\n    this.session = new ClientSession({\n      manager: manager.sessions,\n      path: this._path,\n      type: ext === '.ipynb' ? 'notebook' : 'file',\n      name: PathExt.basename(localPath),\n      kernelPreference: options.kernelPreference || { shouldStart: false },\n      setBusy: options.setBusy\n    });\n    this.session.propertyChanged.connect(this._onSessionChanged, this);\n    manager.contents.fileChanged.connect(this._onFileChanged, this);\n\n    this.urlResolver = new RenderMimeRegistry.UrlResolver({\n      session: this.session,\n      contents: manager.contents\n    });\n  }\n\n  /**\n   * A signal emitted when the path changes.\n   */\n  get pathChanged(): ISignal<this, string> {\n    return this._pathChanged;\n  }\n\n  /**\n   * A signal emitted when the model is saved or reverted.\n   */\n  get fileChanged(): ISignal<this, Contents.IModel> {\n    return this._fileChanged;\n  }\n\n  /**\n   * A signal emitted on the start and end of a saving operation.\n   */\n  get saveState(): ISignal<this, DocumentRegistry.SaveState> {\n    return this._saveState;\n  }\n\n  /**\n   * A signal emitted when the context is disposed.\n   */\n  get disposed(): ISignal<this, void> {\n    return this._disposed;\n  }\n\n  /**\n   * Get the model associated with the document.\n   */\n  get model(): T {\n    return this._model;\n  }\n\n  /**\n   * The client session object associated with the context.\n   */\n  readonly session: ClientSession;\n\n  /**\n   * The current path associated with the document.\n   */\n  get path(): string {\n    return this._path;\n  }\n\n  /**\n   * The current local path associated with the document.\n   * If the document is in the default notebook file browser,\n   * this is the same as the path.\n   */\n  get localPath(): string {\n    return this._manager.contents.localPath(this._path);\n  }\n\n  /**\n   * The current contents model associated with the document.\n   *\n   * #### Notes\n   * The contents model will be null until the context is populated.\n   * It will have an  empty `contents` field.\n   */\n  get contentsModel(): Contents.IModel | null {\n    return this._contentsModel;\n  }\n\n  /**\n   * Get the model factory name.\n   *\n   * #### Notes\n   * This is not part of the `IContext` API.\n   */\n  get factoryName(): string {\n    return this.isDisposed ? '' : this._factory.name;\n  }\n\n  /**\n   * Test whether the context is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the context.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this.session.dispose();\n    if (this._modelDB) {\n      this._modelDB.dispose();\n    }\n    this._model.dispose();\n    this._disposed.emit(void 0);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Whether the context is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that is fulfilled when the context is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * The url resolver for the context.\n   */\n  readonly urlResolver: IRenderMime.IResolver;\n\n  /**\n   * Initialize the context.\n   *\n   * @param isNew - Whether it is a new file.\n   *\n   * @returns a promise that resolves upon initialization.\n   */\n  initialize(isNew: boolean): Promise<void> {\n    if (isNew) {\n      this._model.initialize();\n      return this._save();\n    }\n    if (this._modelDB) {\n      return this._modelDB.connected.then(() => {\n        if (this._modelDB.isPrepopulated) {\n          this._model.initialize();\n          this._save();\n          return void 0;\n        } else {\n          return this._revert(true);\n        }\n      });\n    } else {\n      return this._revert(true);\n    }\n  }\n\n  /**\n   * Save the document contents to disk.\n   */\n  save(): Promise<void> {\n    return this.ready.then(() => {\n      return this._save();\n    });\n  }\n\n  /**\n   * Save the document to a different path chosen by the user.\n   */\n  saveAs(): Promise<void> {\n    return this.ready\n      .then(() => {\n        return Private.getSavePath(this._path);\n      })\n      .then(newPath => {\n        if (this.isDisposed || !newPath) {\n          return;\n        }\n        if (newPath === this._path) {\n          return this.save();\n        }\n        // Make sure the path does not exist.\n        return this._manager.ready\n          .then(() => {\n            return this._manager.contents.get(newPath);\n          })\n          .then(() => {\n            return this._maybeOverWrite(newPath);\n          })\n          .catch(err => {\n            if (!err.response || err.response.status !== 404) {\n              throw err;\n            }\n            return this._finishSaveAs(newPath);\n          });\n      });\n  }\n\n  /**\n   * Revert the document contents to disk contents.\n   */\n  revert(): Promise<void> {\n    return this.ready.then(() => {\n      return this._revert();\n    });\n  }\n\n  /**\n   * Create a checkpoint for the file.\n   */\n  createCheckpoint(): Promise<Contents.ICheckpointModel> {\n    let contents = this._manager.contents;\n    return this._manager.ready.then(() => {\n      return contents.createCheckpoint(this._path);\n    });\n  }\n\n  /**\n   * Delete a checkpoint for the file.\n   */\n  deleteCheckpoint(checkpointId: string): Promise<void> {\n    let contents = this._manager.contents;\n    return this._manager.ready.then(() => {\n      return contents.deleteCheckpoint(this._path, checkpointId);\n    });\n  }\n\n  /**\n   * Restore the file to a known checkpoint state.\n   */\n  restoreCheckpoint(checkpointId?: string): Promise<void> {\n    let contents = this._manager.contents;\n    let path = this._path;\n    return this._manager.ready.then(() => {\n      if (checkpointId) {\n        return contents.restoreCheckpoint(path, checkpointId);\n      }\n      return this.listCheckpoints().then(checkpoints => {\n        if (this.isDisposed || !checkpoints.length) {\n          return;\n        }\n        checkpointId = checkpoints[checkpoints.length - 1].id;\n        return contents.restoreCheckpoint(path, checkpointId);\n      });\n    });\n  }\n\n  /**\n   * List available checkpoints for a file.\n   */\n  listCheckpoints(): Promise<Contents.ICheckpointModel[]> {\n    let contents = this._manager.contents;\n    return this._manager.ready.then(() => {\n      return contents.listCheckpoints(this._path);\n    });\n  }\n\n  /**\n   * Add a sibling widget to the document manager.\n   *\n   * @param widget - The widget to add to the document manager.\n   *\n   * @param options - The desired options for adding the sibling.\n   *\n   * @returns A disposable used to remove the sibling if desired.\n   *\n   * #### Notes\n   * It is assumed that the widget has the same model and context\n   * as the original widget.\n   */\n  addSibling(\n    widget: Widget,\n    options: DocumentRegistry.IOpenOptions = {}\n  ): IDisposable {\n    let opener = this._opener;\n    if (opener) {\n      opener(widget, options);\n    }\n    return new DisposableDelegate(() => {\n      widget.close();\n    });\n  }\n\n  /**\n   * Handle a change on the contents manager.\n   */\n  private _onFileChanged(\n    sender: Contents.IManager,\n    change: Contents.IChangedArgs\n  ): void {\n    if (change.type !== 'rename') {\n      return;\n    }\n    let oldPath = change.oldValue && change.oldValue.path;\n    let newPath = change.newValue && change.newValue.path;\n\n    if (newPath && this._path.indexOf(oldPath) === 0) {\n      let changeModel = change.newValue;\n      // When folder name changed, `oldPath` is `foo`, `newPath` is `bar` and `this._path` is `foo/test`,\n      // we should update `foo/test` to `bar/test` as well\n      if (oldPath !== this._path) {\n        newPath = this._path.replace(new RegExp(`^${oldPath}`), newPath);\n        oldPath = this._path;\n        // Update client file model from folder change\n        changeModel = {\n          last_modified: change.newValue.created,\n          path: newPath\n        };\n      }\n      this.session.setPath(newPath);\n      const updateModel = {\n        ...this._contentsModel,\n        ...changeModel\n      };\n      const localPath = this._manager.contents.localPath(newPath);\n      this.session.setName(PathExt.basename(localPath));\n      this._path = newPath;\n      this._updateContentsModel(updateModel as Contents.IModel);\n      this._pathChanged.emit(this._path);\n    }\n  }\n\n  /**\n   * Handle a change to a session property.\n   */\n  private _onSessionChanged(sender: IClientSession, type: string): void {\n    if (type !== 'path') {\n      return;\n    }\n    let path = this.session.path;\n    if (path !== this._path) {\n      this._path = path;\n      this._pathChanged.emit(path);\n    }\n  }\n\n  /**\n   * Update our contents model, without the content.\n   */\n  private _updateContentsModel(model: Contents.IModel): void {\n    let newModel: Contents.IModel = {\n      path: model.path,\n      name: model.name,\n      type: model.type,\n      content: undefined,\n      writable: model.writable,\n      created: model.created,\n      last_modified: model.last_modified,\n      mimetype: model.mimetype,\n      format: model.format\n    };\n    let mod = this._contentsModel ? this._contentsModel.last_modified : null;\n    this._contentsModel = newModel;\n    if (!mod || newModel.last_modified !== mod) {\n      this._fileChanged.emit(newModel);\n    }\n  }\n\n  /**\n   * Handle an initial population.\n   */\n  private _populate(): Promise<void> {\n    this._isPopulated = true;\n    this._isReady = true;\n    this._populatedPromise.resolve(void 0);\n\n    // Add a checkpoint if none exists and the file is writable.\n    return this._maybeCheckpoint(false).then(() => {\n      if (this.isDisposed) {\n        return;\n      }\n      // Update the kernel preference.\n      let name =\n        this._model.defaultKernelName || this.session.kernelPreference.name;\n      this.session.kernelPreference = {\n        ...this.session.kernelPreference,\n        name,\n        language: this._model.defaultKernelLanguage\n      };\n      this.session.initialize();\n    });\n  }\n\n  /**\n   * Save the document contents to disk.\n   */\n  private _save(): Promise<void> {\n    this._saveState.emit('started');\n    let model = this._model;\n    let content: JSONValue;\n    if (this._factory.fileFormat === 'json') {\n      content = model.toJSON();\n    } else {\n      content = model.toString();\n    }\n\n    let options = {\n      type: this._factory.contentType,\n      format: this._factory.fileFormat,\n      content\n    };\n\n    return this._manager.ready\n      .then(() => {\n        if (!model.modelDB.isCollaborative) {\n          return this._maybeSave(options);\n        }\n        return this._manager.contents.save(this._path, options);\n      })\n      .then(value => {\n        if (this.isDisposed) {\n          return;\n        }\n\n        model.dirty = false;\n        this._updateContentsModel(value);\n\n        if (!this._isPopulated) {\n          return this._populate();\n        }\n      })\n      .catch(err => {\n        // If the save has been canceled by the user,\n        // throw the error so that whoever called save()\n        // can decide what to do.\n        if (err.message === 'Cancel') {\n          throw err;\n        }\n\n        // Otherwise show an error message and throw the error.\n        const localPath = this._manager.contents.localPath(this._path);\n        const name = PathExt.basename(localPath);\n        this._handleError(err, `File Save Error for ${name}`);\n        throw err;\n      })\n      .then(\n        value => {\n          // Capture all success paths and emit completion.\n          this._saveState.emit('completed');\n          return value;\n        },\n        err => {\n          // Capture all error paths and emit failure.\n          this._saveState.emit('failed');\n          throw err;\n        }\n      )\n      .catch();\n  }\n\n  /**\n   * Revert the document contents to disk contents.\n   *\n   * @param initializeModel - call the model's initialization function after\n   * deserializing the content.\n   */\n  private _revert(initializeModel: boolean = false): Promise<void> {\n    let opts: Contents.IFetchOptions = {\n      format: this._factory.fileFormat,\n      type: this._factory.contentType,\n      content: true\n    };\n    let path = this._path;\n    let model = this._model;\n    return this._manager.ready\n      .then(() => {\n        return this._manager.contents.get(path, opts);\n      })\n      .then(contents => {\n        if (this.isDisposed) {\n          return;\n        }\n        let dirty = false;\n        if (contents.format === 'json') {\n          model.fromJSON(contents.content);\n          if (initializeModel) {\n            model.initialize();\n          }\n        } else {\n          let content = contents.content;\n          // Convert line endings if necessary, marking the file\n          // as dirty.\n          if (content.indexOf('\\r') !== -1) {\n            dirty = true;\n            content = content.replace(/\\r\\n|\\r/g, '\\n');\n          }\n          model.fromString(content);\n          if (initializeModel) {\n            model.initialize();\n          }\n        }\n        this._updateContentsModel(contents);\n        model.dirty = dirty;\n        if (!this._isPopulated) {\n          return this._populate();\n        }\n      })\n      .catch(err => {\n        const localPath = this._manager.contents.localPath(this._path);\n        const name = PathExt.basename(localPath);\n        if (err.message === 'Invalid response: 400 bad format') {\n          err = new Error('JupyterLab is unable to open this file type.');\n        }\n        this._handleError(err, `File Load Error for ${name}`);\n        throw err;\n      });\n  }\n\n  /**\n   * Save a file, dealing with conflicts.\n   */\n  private _maybeSave(\n    options: Partial<Contents.IModel>\n  ): Promise<Contents.IModel> {\n    let path = this._path;\n    // Make sure the file has not changed on disk.\n    let promise = this._manager.contents.get(path, { content: false });\n    return promise.then(\n      model => {\n        if (this.isDisposed) {\n          return Promise.reject(new Error('Disposed'));\n        }\n        // We want to check last_modified (disk) > last_modified (client)\n        // (our last save)\n        // In some cases the filesystem reports an inconsistent time,\n        // so we allow 0.5 seconds difference before complaining.\n        let modified = this.contentsModel && this.contentsModel.last_modified;\n        let tClient = new Date(modified);\n        let tDisk = new Date(model.last_modified);\n        if (modified && tDisk.getTime() - tClient.getTime() > 500) {\n          // 500 ms\n          return this._timeConflict(tClient, model, options);\n        }\n        return this._manager.contents.save(path, options);\n      },\n      err => {\n        if (err.response && err.response.status === 404) {\n          return this._manager.contents.save(path, options);\n        }\n        throw err;\n      }\n    );\n  }\n\n  /**\n   * Handle a save/load error with a dialog.\n   */\n  private _handleError(\n    err: Error | ServerConnection.ResponseError,\n    title: string\n  ): void {\n    let buttons = [Dialog.okButton()];\n\n    // Check for a more specific error message.\n    if (err instanceof ServerConnection.ResponseError) {\n      err.response.text().then(text => {\n        let body = '';\n        try {\n          body = JSON.parse(text).message;\n        } catch (e) {\n          body = text;\n        }\n        body = body || err.message;\n        showDialog({ title, body, buttons });\n      });\n    } else {\n      let body = err.message;\n      showDialog({ title, body, buttons });\n    }\n  }\n\n  /**\n   * Add a checkpoint the file is writable.\n   */\n  private _maybeCheckpoint(force: boolean): Promise<void> {\n    let writable = this._contentsModel && this._contentsModel.writable;\n    let promise = Promise.resolve(void 0);\n    if (!writable) {\n      return promise;\n    }\n    if (force) {\n      promise = this.createCheckpoint();\n    } else {\n      promise = this.listCheckpoints().then(checkpoints => {\n        writable = this._contentsModel && this._contentsModel.writable;\n        if (!this.isDisposed && !checkpoints.length && writable) {\n          return this.createCheckpoint().then(() => {\n            /* no-op */\n          });\n        }\n      });\n    }\n    return promise.catch(err => {\n      // Handle a read-only folder.\n      if (!err.response || err.response.status !== 403) {\n        throw err;\n      }\n    });\n  }\n\n  /**\n   * Handle a time conflict.\n   */\n  private _timeConflict(\n    tClient: Date,\n    model: Contents.IModel,\n    options: Partial<Contents.IModel>\n  ): Promise<Contents.IModel> {\n    let tDisk = new Date(model.last_modified);\n    console.warn(\n      `Last saving performed ${tClient} ` +\n        `while the current file seems to have been saved ` +\n        `${tDisk}`\n    );\n    let body =\n      `The file has changed on disk since the last time it ` +\n      `was opened or saved. ` +\n      `Do you want to overwrite the file on disk with the version ` +\n      ` open here, or load the version on disk (revert)?`;\n    let revertBtn = Dialog.okButton({ label: 'REVERT' });\n    let overwriteBtn = Dialog.warnButton({ label: 'OVERWRITE' });\n    return showDialog({\n      title: 'File Changed',\n      body,\n      buttons: [Dialog.cancelButton(), revertBtn, overwriteBtn]\n    }).then(result => {\n      if (this.isDisposed) {\n        return Promise.reject(new Error('Disposed'));\n      }\n      if (result.button.label === 'OVERWRITE') {\n        return this._manager.contents.save(this._path, options);\n      }\n      if (result.button.label === 'REVERT') {\n        return this.revert().then(() => {\n          return model;\n        });\n      }\n      return Promise.reject(new Error('Cancel')); // Otherwise cancel the save.\n    });\n  }\n\n  /**\n   * Handle a time conflict.\n   */\n  private _maybeOverWrite(path: string): Promise<void> {\n    let body = `\"${path}\" already exists. Do you want to replace it?`;\n    let overwriteBtn = Dialog.warnButton({ label: 'OVERWRITE' });\n    return showDialog({\n      title: 'File Overwrite?',\n      body,\n      buttons: [Dialog.cancelButton(), overwriteBtn]\n    }).then(result => {\n      if (this.isDisposed) {\n        return Promise.reject(new Error('Disposed'));\n      }\n      if (result.button.label === 'OVERWRITE') {\n        return this._manager.contents.delete(path).then(() => {\n          this._finishSaveAs(path);\n        });\n      }\n    });\n  }\n\n  /**\n   * Finish a saveAs operation given a new path.\n   */\n  private _finishSaveAs(newPath: string): Promise<void> {\n    this._path = newPath;\n    return this.session\n      .setPath(newPath)\n      .then(() => {\n        this.session.setName(newPath.split('/').pop()!);\n        return this.save();\n      })\n      .then(() => {\n        this._pathChanged.emit(this._path);\n        return this._maybeCheckpoint(true);\n      });\n  }\n\n  private _manager: ServiceManager.IManager;\n  private _opener: (\n    widget: Widget,\n    options?: DocumentRegistry.IOpenOptions\n  ) => void;\n  private _model: T;\n  private _modelDB: IModelDB;\n  private _path = '';\n  private _factory: DocumentRegistry.IModelFactory<T>;\n  private _contentsModel: Contents.IModel | null = null;\n  private _readyPromise: Promise<void>;\n  private _populatedPromise = new PromiseDelegate<void>();\n  private _isPopulated = false;\n  private _isReady = false;\n  private _isDisposed = false;\n  private _pathChanged = new Signal<this, string>(this);\n  private _fileChanged = new Signal<this, Contents.IModel>(this);\n  private _saveState = new Signal<this, DocumentRegistry.SaveState>(this);\n  private _disposed = new Signal<this, void>(this);\n}\n\n/**\n * A namespace for `Context` statics.\n */\nexport namespace Context {\n  /**\n   * The options used to initialize a context.\n   */\n  export interface IOptions<T extends DocumentRegistry.IModel> {\n    /**\n     * A service manager instance.\n     */\n    manager: ServiceManager.IManager;\n\n    /**\n     * The model factory used to create the model.\n     */\n    factory: DocumentRegistry.IModelFactory<T>;\n\n    /**\n     * The initial path of the file.\n     */\n    path: string;\n\n    /**\n     * The kernel preference associated with the context.\n     */\n    kernelPreference?: IClientSession.IKernelPreference;\n\n    /**\n     * An IModelDB factory method which may be used for the document.\n     */\n    modelDBFactory?: ModelDB.IFactory;\n\n    /**\n     * An optional callback for opening sibling widgets.\n     */\n    opener?: (widget: Widget) => void;\n\n    /**\n     * A function to call when the kernel is busy.\n     */\n    setBusy?: () => IDisposable;\n  }\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Get a new file path from the user.\n   */\n  export function getSavePath(path: string): Promise<string | undefined> {\n    let saveBtn = Dialog.okButton({ label: 'SAVE' });\n    return showDialog({\n      title: 'Save File As..',\n      body: new SaveWidget(path),\n      buttons: [Dialog.cancelButton(), saveBtn]\n    }).then(result => {\n      if (result.button.label === 'SAVE') {\n        return result.value;\n      }\n      return;\n    });\n  }\n\n  /**\n   * A no-op function.\n   */\n  export function noOp() {\n    /* no-op */\n  }\n\n  /*\n   * A widget that gets a file path from a user.\n   */\n  class SaveWidget extends Widget {\n    /**\n     * Construct a new save widget.\n     */\n    constructor(path: string) {\n      super({ node: createSaveNode(path) });\n    }\n\n    /**\n     * Get the value for the widget.\n     */\n    getValue(): string {\n      return (this.node as HTMLInputElement).value;\n    }\n  }\n\n  /**\n   * Create the node for a save widget.\n   */\n  function createSaveNode(path: string): HTMLElement {\n    let input = document.createElement('input');\n    input.value = path;\n    return input;\n  }\n}\n"]}