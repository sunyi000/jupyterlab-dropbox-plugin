{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../../../codeeditor/src/widget.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Message } from '@phosphor/messaging';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { CodeEditor } from './';\n\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n  /**\n   * Construct a new code editor widget.\n   */\n  constructor(options: CodeEditorWrapper.IOptions) {\n    super();\n    const editor = (this.editor = options.factory({\n      host: this.node,\n      model: options.model,\n      uuid: options.uuid,\n      config: options.config,\n      selectionStyle: options.selectionStyle\n    }));\n    editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n  }\n\n  /**\n   * Get the editor wrapped by the widget.\n   */\n  readonly editor: CodeEditor.IEditor;\n\n  /**\n   * Get the model used by the widget.\n   */\n  get model(): CodeEditor.IModel {\n    return this.editor.model;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    super.dispose();\n    this.editor.dispose();\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    this.editor.focus();\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   */\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    if (this.isVisible) {\n      this.update();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'after-show'` message.\n   */\n  protected onAfterShow(msg: Message): void {\n    this.update();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (msg.width >= 0 && msg.height >= 0) {\n      this.editor.setSize(msg);\n    } else if (this.isVisible) {\n      this.editor.resizeToFit();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    this.editor.refresh();\n  }\n\n  /**\n   * Handle a change in model selections.\n   */\n  private _onSelectionsChanged(): void {\n    const { start, end } = this.editor.getSelection();\n\n    if (start.column !== end.column || start.line !== end.line) {\n      // a selection was made\n      this.addClass(HAS_SELECTION_CLASS);\n      this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n    } else {\n      // the cursor was placed\n      this.removeClass(HAS_SELECTION_CLASS);\n\n      if (\n        this.editor\n          .getLine(end.line)\n          .slice(0, end.column)\n          .match(leadingWhitespaceRe)\n      ) {\n        this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n      } else {\n        this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n      }\n    }\n  }\n}\n\n/**\n * The namespace for the `CodeEditorWrapper` statics.\n */\nexport namespace CodeEditorWrapper {\n  /**\n   * The options used to initialize a code editor widget.\n   */\n  export interface IOptions {\n    /**\n     * A code editor factory.\n     *\n     * #### Notes\n     * The widget needs a factory and a model instead of a `CodeEditor.IEditor`\n     * object because it needs to provide its own node as the host.\n     */\n    factory: CodeEditor.Factory;\n\n    /**\n     * The model used to initialize the code editor.\n     */\n    model: CodeEditor.IModel;\n\n    /**\n     * The desired uuid for the editor.\n     */\n    uuid?: string;\n\n    /**\n     * The configuration options for the editor.\n     */\n    config?: Partial<CodeEditor.IConfig>;\n\n    /**\n     * The default selection style for the editor.\n     */\n    selectionStyle?: CodeEditor.ISelectionStyle;\n  }\n}\n"]}