{"version":3,"file":"widgetmanager.js","sourceRoot":"","sources":["../../../../docmanager/src/widgetmanager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ArrayExt,\n  each,\n  map,\n  find,\n  filter,\n  toArray\n} from '@phosphor/algorithm';\n\nimport { DisposableSet, IDisposable } from '@phosphor/disposable';\n\nimport { IMessageHandler, Message, MessageLoop } from '@phosphor/messaging';\n\nimport { AttachedProperty } from '@phosphor/properties';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { Time } from '@jupyterlab/coreutils';\n\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\n\nimport { DocumentRegistry, IDocumentWidget } from '@jupyterlab/docregistry';\n\nimport { Contents } from '@jupyterlab/services';\n\n/**\n * The class name added to document widgets.\n */\nconst DOCUMENT_CLASS = 'jp-Document';\n\n/**\n * A class that maintains the lifecycle of file-backed widgets.\n */\nexport class DocumentWidgetManager implements IDisposable {\n  /**\n   * Construct a new document widget manager.\n   */\n  constructor(options: DocumentWidgetManager.IOptions) {\n    this._registry = options.registry;\n  }\n\n  /**\n   * A signal emitted when one of the documents is activated.\n   */\n  get activateRequested(): ISignal<this, string> {\n    return this._activateRequested;\n  }\n\n  /**\n   * Test whether the document widget manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the widget manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.disconnectReceiver(this);\n  }\n\n  /**\n   * Create a widget for a document and handle its lifecycle.\n   *\n   * @param factory - The widget factory.\n   *\n   * @param context - The document context object.\n   *\n   * @returns A widget created by the factory.\n   *\n   * @throws If the factory is not registered.\n   */\n  createWidget(\n    factory: DocumentRegistry.WidgetFactory,\n    context: DocumentRegistry.Context\n  ): IDocumentWidget {\n    let widget = factory.createNew(context);\n    Private.factoryProperty.set(widget, factory);\n\n    // Handle widget extensions.\n    let disposables = new DisposableSet();\n    each(this._registry.widgetExtensions(factory.name), extender => {\n      disposables.add(extender.createNew(widget, context));\n    });\n    Private.disposablesProperty.set(widget, disposables);\n    widget.disposed.connect(this._onWidgetDisposed, this);\n\n    this.adoptWidget(context, widget);\n    context.fileChanged.connect(this._onFileChanged, this);\n    context.pathChanged.connect(this._onPathChanged, this);\n    context.ready.then(() => {\n      this.setCaption(widget);\n    });\n    return widget;\n  }\n\n  /**\n   * Install the message hook for the widget and add to list\n   * of known widgets.\n   *\n   * @param context - The document context object.\n   *\n   * @param widget - The widget to adopt.\n   */\n  adoptWidget(\n    context: DocumentRegistry.Context,\n    widget: IDocumentWidget\n  ): void {\n    let widgets = Private.widgetsProperty.get(context);\n    widgets.push(widget);\n    MessageLoop.installMessageHook(widget, this);\n    widget.addClass(DOCUMENT_CLASS);\n    widget.title.closable = true;\n    widget.disposed.connect(this._widgetDisposed, this);\n    Private.contextProperty.set(widget, context);\n  }\n\n  /**\n   * See if a widget already exists for the given context and widget name.\n   *\n   * @param context - The document context object.\n   *\n   * @returns The found widget, or `undefined`.\n   *\n   * #### Notes\n   * This can be used to use an existing widget instead of opening\n   * a new widget.\n   */\n  findWidget(\n    context: DocumentRegistry.Context,\n    widgetName: string\n  ): IDocumentWidget | undefined {\n    let widgets = Private.widgetsProperty.get(context);\n    if (!widgets) {\n      return undefined;\n    }\n    return find(widgets, widget => {\n      let factory = Private.factoryProperty.get(widget);\n      if (!factory) {\n        return false;\n      }\n      return factory.name === widgetName;\n    });\n  }\n\n  /**\n   * Get the document context for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The context associated with the widget, or `undefined`.\n   */\n  contextForWidget(widget: Widget): DocumentRegistry.Context | undefined {\n    return Private.contextProperty.get(widget);\n  }\n\n  /**\n   * Clone a widget.\n   *\n   * @param widget - The source widget.\n   *\n   * @returns A new widget or `undefined`.\n   *\n   * #### Notes\n   *  Uses the same widget factory and context as the source, or throws\n   *  if the source widget is not managed by this manager.\n   */\n  cloneWidget(widget: Widget): IDocumentWidget | undefined {\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return undefined;\n    }\n    let factory = Private.factoryProperty.get(widget);\n    if (!factory) {\n      return undefined;\n    }\n    let newWidget = this.createWidget(factory, context);\n    this.adoptWidget(context, newWidget);\n    return newWidget;\n  }\n\n  /**\n   * Close the widgets associated with a given context.\n   *\n   * @param context - The document context object.\n   */\n  closeWidgets(context: DocumentRegistry.Context): Promise<void> {\n    let widgets = Private.widgetsProperty.get(context);\n    return Promise.all(\n      toArray(map(widgets, widget => this.onClose(widget)))\n    ).then(() => undefined);\n  }\n\n  /**\n   * Dispose of the widgets associated with a given context\n   * regardless of the widget's dirty state.\n   *\n   * @param context - The document context object.\n   */\n  deleteWidgets(context: DocumentRegistry.Context): Promise<void> {\n    let widgets = Private.widgetsProperty.get(context);\n    return Promise.all(\n      toArray(map(widgets, widget => this.onDelete(widget)))\n    ).then(() => undefined);\n  }\n\n  /**\n   * Filter a message sent to a message handler.\n   *\n   * @param handler - The target handler of the message.\n   *\n   * @param msg - The message dispatched to the handler.\n   *\n   * @returns `false` if the message should be filtered, of `true`\n   *   if the message should be dispatched to the handler as normal.\n   */\n  messageHook(handler: IMessageHandler, msg: Message): boolean {\n    switch (msg.type) {\n      case 'close-request':\n        this.onClose(handler as Widget);\n        return false;\n      case 'activate-request':\n        let context = this.contextForWidget(handler as Widget);\n        if (context) {\n          this._activateRequested.emit(context.path);\n        }\n        break;\n      default:\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * Set the caption for widget title.\n   *\n   * @param widget - The target widget.\n   */\n  protected setCaption(widget: Widget): void {\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return;\n    }\n    let model = context.contentsModel;\n    if (!model) {\n      widget.title.caption = '';\n      return;\n    }\n    context\n      .listCheckpoints()\n      .then((checkpoints: Contents.ICheckpointModel[]) => {\n        if (widget.isDisposed) {\n          return;\n        }\n        let last = checkpoints[checkpoints.length - 1];\n        let checkpoint = last ? Time.format(last.last_modified) : 'None';\n        let caption = `Name: ${model.name}\\nPath: ${model.path}\\n`;\n        if (context.model.readOnly) {\n          caption += 'Read-only';\n        } else {\n          caption +=\n            `Last Saved: ${Time.format(model.last_modified)}\\n` +\n            `Last Checkpoint: ${checkpoint}`;\n        }\n        widget.title.caption = caption;\n      });\n  }\n\n  /**\n   * Handle `'close-request'` messages.\n   *\n   * @param widget - The target widget.\n   *\n   * @returns A promise that resolves with whether the widget was closed.\n   */\n  protected onClose(widget: Widget): Promise<boolean> {\n    // Handle dirty state.\n    return this._maybeClose(widget)\n      .then(result => {\n        if (widget.isDisposed) {\n          return true;\n        }\n        if (result) {\n          widget.dispose();\n        }\n        return result;\n      })\n      .catch(error => {\n        widget.dispose();\n        throw error;\n      });\n  }\n\n  /**\n   * Dispose of widget regardless of widget's dirty state.\n   *\n   * @param widget - The target widget.\n   */\n  protected onDelete(widget: Widget): Promise<void> {\n    widget.dispose();\n    return Promise.resolve(void 0);\n  }\n\n  /**\n   * Ask the user whether to close an unsaved file.\n   */\n  private _maybeClose(widget: Widget): Promise<boolean> {\n    // Bail if the model is not dirty or other widgets are using the model.)\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return Promise.resolve(true);\n    }\n    let widgets = Private.widgetsProperty.get(context);\n    if (!widgets) {\n      return Promise.resolve(true);\n    }\n    // Filter by whether the factories are read only.\n    widgets = toArray(\n      filter(widgets, widget => {\n        let factory = Private.factoryProperty.get(widget);\n        if (!factory) {\n          return false;\n        }\n        return factory.readOnly === false;\n      })\n    );\n    let factory = Private.factoryProperty.get(widget);\n    if (!factory) {\n      return Promise.resolve(true);\n    }\n    let model = context.model;\n    if (!model.dirty || widgets.length > 1 || factory.readOnly) {\n      return Promise.resolve(true);\n    }\n    let fileName = widget.title.label;\n    return showDialog({\n      title: 'Close without saving?',\n      body: `File \"${fileName}\" has unsaved changes, close without saving?`,\n      buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n    }).then(result => {\n      return result.button.accept;\n    });\n  }\n\n  /**\n   * Handle the disposal of a widget.\n   */\n  private _widgetDisposed(widget: Widget): void {\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return;\n    }\n    let widgets = Private.widgetsProperty.get(context);\n    if (!widgets) {\n      return;\n    }\n    // Remove the widget.\n    ArrayExt.removeFirstOf(widgets, widget);\n    // Dispose of the context if this is the last widget using it.\n    if (!widgets.length) {\n      context.dispose();\n    }\n  }\n\n  /**\n   * Handle the disposal of a widget.\n   */\n  private _onWidgetDisposed(widget: Widget): void {\n    let disposables = Private.disposablesProperty.get(widget);\n    disposables.dispose();\n  }\n\n  /**\n   * Handle a file changed signal for a context.\n   */\n  private _onFileChanged(context: DocumentRegistry.Context): void {\n    let widgets = Private.widgetsProperty.get(context);\n    each(widgets, widget => {\n      this.setCaption(widget);\n    });\n  }\n\n  /**\n   * Handle a path changed signal for a context.\n   */\n  private _onPathChanged(context: DocumentRegistry.Context): void {\n    let widgets = Private.widgetsProperty.get(context);\n    each(widgets, widget => {\n      this.setCaption(widget);\n    });\n  }\n\n  private _registry: DocumentRegistry;\n  private _activateRequested = new Signal<this, string>(this);\n  private _isDisposed = false;\n}\n\n/**\n * A namespace for document widget manager statics.\n */\nexport namespace DocumentWidgetManager {\n  /**\n   * The options used to initialize a document widget manager.\n   */\n  export interface IOptions {\n    /**\n     * A document registry instance.\n     */\n    registry: DocumentRegistry;\n  }\n}\n\n/**\n * A private namespace for DocumentManager data.\n */\nnamespace Private {\n  /**\n   * A private attached property for a widget context.\n   */\n  export const contextProperty = new AttachedProperty<\n    Widget,\n    DocumentRegistry.Context | undefined\n  >({\n    name: 'context',\n    create: () => undefined\n  });\n\n  /**\n   * A private attached property for a widget factory.\n   */\n  export const factoryProperty = new AttachedProperty<\n    Widget,\n    DocumentRegistry.WidgetFactory | undefined\n  >({\n    name: 'factory',\n    create: () => undefined\n  });\n\n  /**\n   * A private attached property for the widgets associated with a context.\n   */\n  export const widgetsProperty = new AttachedProperty<\n    DocumentRegistry.Context,\n    IDocumentWidget[]\n  >({\n    name: 'widgets',\n    create: () => []\n  });\n\n  /**\n   * A private attached property for a widget's disposables.\n   */\n  export const disposablesProperty = new AttachedProperty<\n    Widget,\n    DisposableSet\n  >({\n    name: 'disposables',\n    create: () => new DisposableSet()\n  });\n}\n"]}