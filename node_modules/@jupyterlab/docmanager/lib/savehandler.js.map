{"version":3,"file":"savehandler.js","sourceRoot":"","sources":["../../../../docmanager/src/savehandler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { Signal } from '@phosphor/signaling';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\n/**\n * A class that manages the auto saving of a document.\n *\n * #### Notes\n * Implements https://github.com/ipython/ipython/wiki/IPEP-15:-Autosaving-the-IPython-Notebook.\n */\nexport class SaveHandler implements IDisposable {\n  /**\n   * Construct a new save handler.\n   */\n  constructor(options: SaveHandler.IOptions) {\n    this._context = options.context;\n    let interval = options.saveInterval || 120;\n    this._minInterval = interval * 1000;\n    this._interval = this._minInterval;\n    // Restart the timer when the contents model is updated.\n    this._context.fileChanged.connect(this._setTimer, this);\n    this._context.disposed.connect(this.dispose, this);\n  }\n\n  /**\n   * The save interval used by the timer (in seconds).\n   */\n  get saveInterval(): number {\n    return this._interval / 1000;\n  }\n  set saveInterval(value: number) {\n    this._minInterval = this._interval = value * 1000;\n    if (this._isActive) {\n      this._setTimer();\n    }\n  }\n\n  /**\n   * Get whether the handler is active.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Get whether the save handler is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the save handler.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    clearTimeout(this._autosaveTimer);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Start the autosaver.\n   */\n  start(): void {\n    this._isActive = true;\n    this._setTimer();\n  }\n\n  /**\n   * Stop the autosaver.\n   */\n  stop(): void {\n    this._isActive = false;\n    clearTimeout(this._autosaveTimer);\n  }\n\n  /**\n   * Set the timer.\n   */\n  private _setTimer(): void {\n    clearTimeout(this._autosaveTimer);\n    if (!this._isActive) {\n      return;\n    }\n    this._autosaveTimer = window.setTimeout(() => {\n      this._save();\n    }, this._interval);\n  }\n\n  /**\n   * Handle an autosave timeout.\n   */\n  private _save(): void {\n    let context = this._context;\n\n    // Trigger the next update.\n    this._setTimer();\n\n    if (!context) {\n      return;\n    }\n\n    // Bail if the model is not dirty or the file is not writable, or the dialog\n    // is already showing.\n    let writable = context.contentsModel && context.contentsModel.writable;\n    if (!writable || !context.model.dirty || this._inDialog) {\n      return;\n    }\n\n    let start = new Date().getTime();\n    context\n      .save()\n      .then(() => {\n        if (this.isDisposed) {\n          return;\n        }\n        let duration = new Date().getTime() - start;\n        // New save interval: higher of 10x save duration or min interval.\n        this._interval = Math.max(\n          this._multiplier * duration,\n          this._minInterval\n        );\n        // Restart the update to pick up the new interval.\n        this._setTimer();\n      })\n      .catch(err => {\n        // If the user canceled the save, do nothing.\n        if (err.message === 'Cancel') {\n          return;\n        }\n        // Otherwise, log the error.\n        console.error('Error in Auto-Save', err.message);\n      });\n  }\n\n  private _autosaveTimer = -1;\n  private _minInterval = -1;\n  private _interval = -1;\n  private _context: DocumentRegistry.Context;\n  private _isActive = false;\n  private _inDialog = false;\n  private _isDisposed = false;\n  private _multiplier = 10;\n}\n\n/**\n * A namespace for `SaveHandler` statics.\n */\nexport namespace SaveHandler {\n  /**\n   * The options used to create a save handler.\n   */\n  export interface IOptions {\n    /**\n     * The context asssociated with the file.\n     */\n    context: DocumentRegistry.Context;\n\n    /**\n     * The minimum save interval in seconds (default is two minutes).\n     */\n    saveInterval?: number;\n  }\n}\n"]}