{"version":3,"file":"widgets.js","sourceRoot":"","sources":["../../../../rendermime/src/widgets.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { ReadonlyJSONObject } from '@phosphor/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport * as renderers from './renderers';\n\n/**\n * A common base class for mime renderers.\n */\nexport abstract class RenderedCommon extends Widget\n  implements IRenderMime.IRenderer {\n  /**\n   * Construct a new rendered common widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super();\n    this.mimeType = options.mimeType;\n    this.sanitizer = options.sanitizer;\n    this.resolver = options.resolver;\n    this.linkHandler = options.linkHandler;\n    this.latexTypesetter = options.latexTypesetter;\n    this.node.dataset['mimeType'] = this.mimeType;\n  }\n\n  /**\n   * The mimetype being rendered.\n   */\n  readonly mimeType: string;\n\n  /**\n   * The sanitizer used to sanitize untrusted html inputs.\n   */\n  readonly sanitizer: IRenderMime.ISanitizer;\n\n  /**\n   * The resolver object.\n   */\n  readonly resolver: IRenderMime.IResolver | null;\n\n  /**\n   * The link handler.\n   */\n  readonly linkHandler: IRenderMime.ILinkHandler | null;\n\n  /**\n   * The latexTypesetter.\n   */\n  readonly latexTypesetter: IRenderMime.ILatexTypesetter;\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  renderModel(model: IRenderMime.IMimeModel): Promise<void> {\n    // TODO compare model against old model for early bail?\n\n    // Toggle the trusted class on the widget.\n    this.toggleClass('jp-mod-trusted', model.trusted);\n\n    // Render the actual content.\n    return this.render(model);\n  }\n\n  /**\n   * Render the mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  abstract render(model: IRenderMime.IMimeModel): Promise<void>;\n}\n\n/**\n * A common base class for HTML mime renderers.\n */\nexport abstract class RenderedHTMLCommon extends RenderedCommon {\n  /**\n   * Construct a new rendered HTML common widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedHTMLCommon');\n  }\n}\n\n/**\n * A mime renderer for displaying HTML and math.\n */\nexport class RenderedHTML extends RenderedHTMLCommon {\n  /**\n   * Construct a new rendered HTML widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedHTML');\n  }\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  render(model: IRenderMime.IMimeModel): Promise<void> {\n    return renderers.renderHTML({\n      host: this.node,\n      source: String(model.data[this.mimeType]),\n      trusted: model.trusted,\n      resolver: this.resolver,\n      sanitizer: this.sanitizer,\n      linkHandler: this.linkHandler,\n      shouldTypeset: this.isAttached,\n      latexTypesetter: this.latexTypesetter\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   */\n  onAfterAttach(msg: Message): void {\n    if (this.latexTypesetter) {\n      this.latexTypesetter.typeset(this.node);\n    }\n  }\n}\n\n/**\n * A mime renderer for displaying LaTeX output.\n */\nexport class RenderedLatex extends RenderedCommon {\n  /**\n   * Construct a new rendered LaTeX widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedLatex');\n  }\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  render(model: IRenderMime.IMimeModel): Promise<void> {\n    return renderers.renderLatex({\n      host: this.node,\n      source: String(model.data[this.mimeType]),\n      shouldTypeset: this.isAttached,\n      latexTypesetter: this.latexTypesetter\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   */\n  onAfterAttach(msg: Message): void {\n    if (this.latexTypesetter) {\n      this.latexTypesetter.typeset(this.node);\n    }\n  }\n}\n\n/**\n * A mime renderer for displaying images.\n */\nexport class RenderedImage extends RenderedCommon {\n  /**\n   * Construct a new rendered image widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedImage');\n  }\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  render(model: IRenderMime.IMimeModel): Promise<void> {\n    let metadata = model.metadata[this.mimeType] as ReadonlyJSONObject;\n    return renderers.renderImage({\n      host: this.node,\n      mimeType: this.mimeType,\n      source: String(model.data[this.mimeType]),\n      width: metadata && (metadata.width as number | undefined),\n      height: metadata && (metadata.height as number | undefined),\n      unconfined: metadata && (metadata.unconfined as boolean | undefined)\n    });\n  }\n}\n\n/**\n * A mime renderer for displaying Markdown with embedded latex.\n */\nexport class RenderedMarkdown extends RenderedHTMLCommon {\n  /**\n   * Construct a new rendered markdown widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedMarkdown');\n  }\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  render(model: IRenderMime.IMimeModel): Promise<void> {\n    return renderers.renderMarkdown({\n      host: this.node,\n      source: String(model.data[this.mimeType]),\n      trusted: model.trusted,\n      resolver: this.resolver,\n      sanitizer: this.sanitizer,\n      linkHandler: this.linkHandler,\n      shouldTypeset: this.isAttached,\n      latexTypesetter: this.latexTypesetter\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   */\n  onAfterAttach(msg: Message): void {\n    if (this.latexTypesetter) {\n      this.latexTypesetter.typeset(this.node);\n    }\n  }\n}\n\n/**\n * A widget for displaying SVG content.\n */\nexport class RenderedSVG extends RenderedCommon {\n  /**\n   * Construct a new rendered SVG widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedSVG');\n  }\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  render(model: IRenderMime.IMimeModel): Promise<void> {\n    let metadata = model.metadata[this.mimeType] as ReadonlyJSONObject;\n    return renderers.renderSVG({\n      host: this.node,\n      source: String(model.data[this.mimeType]),\n      trusted: model.trusted,\n      unconfined: metadata && (metadata.unconfined as boolean | undefined)\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   */\n  onAfterAttach(msg: Message): void {\n    if (this.latexTypesetter) {\n      this.latexTypesetter.typeset(this.node);\n    }\n  }\n}\n\n/**\n * A widget for displaying plain text and console text.\n */\nexport class RenderedText extends RenderedCommon {\n  /**\n   * Construct a new rendered text widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedText');\n  }\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  render(model: IRenderMime.IMimeModel): Promise<void> {\n    return renderers.renderText({\n      host: this.node,\n      source: String(model.data[this.mimeType])\n    });\n  }\n}\n\n/**\n * A widget for displaying deprecated JavaScript output.\n */\nexport class RenderedJavaScript extends RenderedCommon {\n  /**\n   * Construct a new rendered text widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super(options);\n    this.addClass('jp-RenderedJavaScript');\n  }\n\n  /**\n   * Render a mime model.\n   *\n   * @param model - The mime model to render.\n   *\n   * @returns A promise which resolves when rendering is complete.\n   */\n  render(model: IRenderMime.IMimeModel): Promise<void> {\n    return renderers.renderText({\n      host: this.node,\n      source: 'JavaScript output is disabled in JupyterLab'\n    });\n  }\n}\n"]}