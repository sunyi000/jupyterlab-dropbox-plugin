{"version":3,"file":"attachmentmodel.js","sourceRoot":"","sources":["../../../../rendermime/src/attachmentmodel.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { IObservableJSON, ObservableJSON } from '@jupyterlab/observables';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport {\n  JSONExt,\n  JSONObject,\n  JSONValue,\n  ReadonlyJSONObject\n} from '@phosphor/coreutils';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { MimeModel } from './mimemodel';\n\n/**\n * The interface for an attachment model.\n */\nexport interface IAttachmentModel extends IRenderMime.IMimeModel {\n  /**\n   * A signal emitted when the attachment model changes.\n   */\n  readonly changed: ISignal<this, void>;\n\n  /**\n   * Dispose of the resources used by the attachment model.\n   */\n  dispose(): void;\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IMimeBundle;\n}\n\n/**\n * The namespace for IAttachmentModel sub-interfaces.\n */\nexport namespace IAttachmentModel {\n  /**\n   * The options used to create a notebook attachment model.\n   */\n  export interface IOptions {\n    /**\n     * The raw attachment value.\n     */\n    value: nbformat.IMimeBundle;\n  }\n}\n\n/**\n * The default implementation of a notebook attachment model.\n */\nexport class AttachmentModel implements IAttachmentModel {\n  /**\n   * Construct a new attachment model.\n   */\n  constructor(options: IAttachmentModel.IOptions) {\n    let { data } = Private.getBundleOptions(options);\n    this._data = new ObservableJSON({ values: data as JSONObject });\n    this._rawData = data;\n    // Make a copy of the data.\n    let value = options.value;\n    for (let key in value) {\n      // Ignore data and metadata that were stripped.\n      switch (key) {\n        case 'data':\n          break;\n        default:\n          this._raw[key] = Private.extract(value, key);\n      }\n    }\n  }\n\n  /**\n   * A signal emitted when the attachment model changes.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * Dispose of the resources used by the attachment model.\n   */\n  dispose(): void {\n    this._data.dispose();\n    Signal.clearData(this);\n  }\n\n  /**\n   * The data associated with the model.\n   */\n  get data(): ReadonlyJSONObject {\n    return this._rawData;\n  }\n\n  /**\n   * The metadata associated with the model.\n   */\n  get metadata(): ReadonlyJSONObject {\n    return undefined;\n  }\n\n  /**\n   * Set the data associated with the model.\n   *\n   * #### Notes\n   * Depending on the implementation of the mime model,\n   * this call may or may not have deferred effects,\n   */\n  setData(options: IRenderMime.IMimeModel.ISetDataOptions): void {\n    if (options.data) {\n      this._updateObservable(this._data, options.data);\n      this._rawData = options.data;\n    }\n    this._changed.emit(void 0);\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IMimeBundle {\n    let attachment: JSONValue = {};\n    for (let key in this._raw) {\n      attachment[key] = Private.extract(this._raw, key);\n    }\n    return attachment as nbformat.IMimeBundle;\n  }\n\n  // All attachments are untrusted\n  readonly trusted = false;\n\n  /**\n   * Update an observable JSON object using a readonly JSON object.\n   */\n  private _updateObservable(\n    observable: IObservableJSON,\n    data: ReadonlyJSONObject\n  ) {\n    let oldKeys = observable.keys();\n    let newKeys = Object.keys(data);\n\n    // Handle removed keys.\n    for (let key of oldKeys) {\n      if (newKeys.indexOf(key) === -1) {\n        observable.delete(key);\n      }\n    }\n\n    // Handle changed data.\n    for (let key of newKeys) {\n      let oldValue = observable.get(key);\n      let newValue = data[key];\n      if (oldValue !== newValue) {\n        observable.set(key, newValue as JSONValue);\n      }\n    }\n  }\n\n  private _changed = new Signal<this, void>(this);\n  private _raw: JSONObject = {};\n  private _rawData: ReadonlyJSONObject;\n  private _data: IObservableJSON;\n}\n\n/**\n * The namespace for AttachmentModel statics.\n */\nexport namespace AttachmentModel {\n  /**\n   * Get the data for an attachment.\n   *\n   * @params bundle - A kernel attachment MIME bundle.\n   *\n   * @returns - The data for the payload.\n   */\n  export function getData(bundle: nbformat.IMimeBundle): JSONObject {\n    return Private.getData(bundle);\n  }\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Get the data from a notebook attachment.\n   */\n  export function getData(bundle: nbformat.IMimeBundle): JSONObject {\n    return convertBundle(bundle);\n  }\n\n  /**\n   * Get the bundle options given attachment model options.\n   */\n  export function getBundleOptions(\n    options: IAttachmentModel.IOptions\n  ): MimeModel.IOptions {\n    let data = getData(options.value);\n    return { data };\n  }\n\n  /**\n   * Extract a value from a JSONObject.\n   */\n  export function extract(value: JSONObject, key: string): JSONValue {\n    let item = value[key];\n    if (JSONExt.isPrimitive(item)) {\n      return item;\n    }\n    return JSONExt.deepCopy(item);\n  }\n\n  /**\n   * Convert a mime bundle to mime data.\n   */\n  function convertBundle(bundle: nbformat.IMimeBundle): JSONObject {\n    let map: JSONObject = Object.create(null);\n    for (let mimeType in bundle) {\n      map[mimeType] = extract(bundle, mimeType);\n    }\n    return map;\n  }\n}\n"]}