{"version":3,"file":"renderers.js","sourceRoot":"","sources":["../../../../rendermime/src/renderers.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { default as AnsiUp } from 'ansi_up';\n\nimport marked from 'marked';\n\nimport { ISanitizer } from '@jupyterlab/apputils';\n\nimport { Mode, CodeMirrorEditor } from '@jupyterlab/codemirror';\n\nimport { URLExt } from '@jupyterlab/coreutils';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { toArray } from '@phosphor/algorithm';\n\nimport { removeMath, replaceMath } from './latex';\n\n/**\n * Render HTML into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderHTML(options: renderHTML.IOptions): Promise<void> {\n  // Unpack the options.\n  let {\n    host,\n    source,\n    trusted,\n    sanitizer,\n    resolver,\n    linkHandler,\n    shouldTypeset,\n    latexTypesetter\n  } = options;\n\n  let originalSource = source;\n\n  // Bail early if the source is empty.\n  if (!source) {\n    host.textContent = '';\n    return Promise.resolve(undefined);\n  }\n\n  // Sanitize the source if it is not trusted. This removes all\n  // `<script>` tags as well as other potentially harmful HTML.\n  if (!trusted) {\n    originalSource = `${source}`;\n    source = sanitizer.sanitize(source);\n  }\n\n  // Set the inner HTML of the host.\n  host.innerHTML = source;\n\n  if (host.getElementsByTagName('script').length > 0) {\n    // If output it trusted, eval any script tags contained in the HTML.\n    // This is not done automatically by the browser when script tags are\n    // created by setting `innerHTML`.\n    if (trusted) {\n      Private.evalInnerHTMLScriptTags(host);\n    } else {\n      const container = document.createElement('div');\n      const warning = document.createElement('pre');\n      warning.textContent =\n        'This HTML output contains inline scripts. Are you sure that you want to run arbitrary Javascript within your JupyterLab session?';\n      const runButton = document.createElement('button');\n      runButton.textContent = 'Run';\n      runButton.onclick = event => {\n        host.innerHTML = originalSource;\n        Private.evalInnerHTMLScriptTags(host);\n        host.removeChild(host.firstChild);\n      };\n      container.appendChild(warning);\n      container.appendChild(runButton);\n      host.insertBefore(container, host.firstChild);\n    }\n  }\n\n  // Handle default behavior of nodes.\n  Private.handleDefaults(host, resolver);\n\n  // Patch the urls if a resolver is available.\n  let promise: Promise<void>;\n  if (resolver) {\n    promise = Private.handleUrls(host, resolver, linkHandler);\n  } else {\n    promise = Promise.resolve(undefined);\n  }\n\n  // Return the final rendered promise.\n  return promise.then(() => {\n    if (shouldTypeset && latexTypesetter) {\n      latexTypesetter.typeset(host);\n    }\n  });\n}\n\n/**\n * The namespace for the `renderHTML` function statics.\n */\nexport namespace renderHTML {\n  /**\n   * The options for the `renderHTML` function.\n   */\n  export interface IOptions {\n    /**\n     * The host node for the rendered HTML.\n     */\n    host: HTMLElement;\n\n    /**\n     * The HTML source to render.\n     */\n    source: string;\n\n    /**\n     * Whether the source is trusted.\n     */\n    trusted: boolean;\n\n    /**\n     * The html sanitizer for untrusted source.\n     */\n    sanitizer: ISanitizer;\n\n    /**\n     * An optional url resolver.\n     */\n    resolver: IRenderMime.IResolver | null;\n\n    /**\n     * An optional link handler.\n     */\n    linkHandler: IRenderMime.ILinkHandler | null;\n\n    /**\n     * Whether the node should be typeset.\n     */\n    shouldTypeset: boolean;\n\n    /**\n     * The LaTeX typesetter for the application.\n     */\n    latexTypesetter: IRenderMime.ILatexTypesetter | null;\n  }\n}\n\n/**\n * Render an image into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderImage(\n  options: renderImage.IRenderOptions\n): Promise<void> {\n  // Unpack the options.\n  let { host, mimeType, source, width, height, unconfined } = options;\n\n  // Clear the content in the host.\n  host.textContent = '';\n\n  // Create the image element.\n  let img = document.createElement('img');\n\n  // Set the source of the image.\n  img.src = `data:${mimeType};base64,${source}`;\n\n  // Set the size of the image if provided.\n  if (typeof height === 'number') {\n    img.height = height;\n  }\n  if (typeof width === 'number') {\n    img.width = width;\n  }\n\n  if (unconfined === true) {\n    img.classList.add('jp-mod-unconfined');\n  }\n\n  // Add the image to the host.\n  host.appendChild(img);\n\n  // Return the rendered promise.\n  return Promise.resolve(undefined);\n}\n\n/**\n * The namespace for the `renderImage` function statics.\n */\nexport namespace renderImage {\n  /**\n   * The options for the `renderImage` function.\n   */\n  export interface IRenderOptions {\n    /**\n     * The image node to update with the content.\n     */\n    host: HTMLElement;\n\n    /**\n     * The mime type for the image.\n     */\n    mimeType: string;\n\n    /**\n     * The base64 encoded source for the image.\n     */\n    source: string;\n\n    /**\n     * The optional width for the image.\n     */\n    width?: number;\n\n    /**\n     * The optional height for the image.\n     */\n    height?: number;\n\n    /**\n     * Whether the image should be unconfined.\n     */\n    unconfined?: boolean;\n  }\n}\n\n/**\n * Render LaTeX into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderLatex(\n  options: renderLatex.IRenderOptions\n): Promise<void> {\n  // Unpack the options.\n  let { host, source, shouldTypeset, latexTypesetter } = options;\n\n  // Set the source on the node.\n  host.textContent = source;\n\n  // Typeset the node if needed.\n  if (shouldTypeset && latexTypesetter) {\n    latexTypesetter.typeset(host);\n  }\n\n  // Return the rendered promise.\n  return Promise.resolve(undefined);\n}\n\n/**\n * The namespace for the `renderLatex` function statics.\n */\nexport namespace renderLatex {\n  /**\n   * The options for the `renderLatex` function.\n   */\n  export interface IRenderOptions {\n    /**\n     * The host node for the rendered LaTeX.\n     */\n    host: HTMLElement;\n\n    /**\n     * The LaTeX source to render.\n     */\n    source: string;\n\n    /**\n     * Whether the node should be typeset.\n     */\n    shouldTypeset: boolean;\n\n    /**\n     * The LaTeX typesetter for the application.\n     */\n    latexTypesetter: IRenderMime.ILatexTypesetter | null;\n  }\n}\n\n/**\n * Render Markdown into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderMarkdown(\n  options: renderMarkdown.IRenderOptions\n): Promise<void> {\n  // Unpack the options.\n  let {\n    host,\n    source,\n    trusted,\n    sanitizer,\n    resolver,\n    linkHandler,\n    latexTypesetter,\n    shouldTypeset\n  } = options;\n\n  // Clear the content if there is no source.\n  if (!source) {\n    host.textContent = '';\n    return Promise.resolve(undefined);\n  }\n\n  // Separate math from normal markdown text.\n  let parts = removeMath(source);\n\n  // Render the markdown and handle sanitization.\n  return Private.renderMarked(parts['text'])\n    .then(content => {\n      // Restore the math content in the rendered markdown.\n      content = replaceMath(content, parts['math']);\n\n      let originalContent = content;\n\n      // Sanitize the content it is not trusted.\n      if (!trusted) {\n        originalContent = `${content}`;\n        content = sanitizer.sanitize(content);\n      }\n\n      // Set the inner HTML of the host.\n      host.innerHTML = content;\n\n      if (host.getElementsByTagName('script').length > 0) {\n        // If output it trusted, eval any script tags contained in the HTML.\n        // This is not done automatically by the browser when script tags are\n        // created by setting `innerHTML`.\n        if (trusted) {\n          Private.evalInnerHTMLScriptTags(host);\n        } else {\n          const container = document.createElement('div');\n          const warning = document.createElement('pre');\n          warning.textContent =\n            'This HTML output contains inline scripts. Are you sure that you want to run arbitrary Javascript within your JupyterLab session?';\n          const runButton = document.createElement('button');\n          runButton.textContent = 'Run';\n          runButton.onclick = event => {\n            host.innerHTML = originalContent;\n            Private.evalInnerHTMLScriptTags(host);\n            host.removeChild(host.firstChild);\n          };\n          container.appendChild(warning);\n          container.appendChild(runButton);\n          host.insertBefore(container, host.firstChild);\n        }\n      }\n\n      // Handle default behavior of nodes.\n      Private.handleDefaults(host, resolver);\n\n      // Apply ids to the header nodes.\n      Private.headerAnchors(host);\n\n      // Patch the urls if a resolver is available.\n      let promise: Promise<void>;\n      if (resolver) {\n        promise = Private.handleUrls(host, resolver, linkHandler);\n      } else {\n        promise = Promise.resolve(undefined);\n      }\n\n      // Return the rendered promise.\n      return promise;\n    })\n    .then(() => {\n      if (shouldTypeset && latexTypesetter) {\n        latexTypesetter.typeset(host);\n      }\n    });\n}\n\n/**\n * The namespace for the `renderMarkdown` function statics.\n */\nexport namespace renderMarkdown {\n  /**\n   * The options for the `renderMarkdown` function.\n   */\n  export interface IRenderOptions {\n    /**\n     * The host node for the rendered Markdown.\n     */\n    host: HTMLElement;\n\n    /**\n     * The Markdown source to render.\n     */\n    source: string;\n\n    /**\n     * Whether the source is trusted.\n     */\n    trusted: boolean;\n\n    /**\n     * The html sanitizer for untrusted source.\n     */\n    sanitizer: ISanitizer;\n\n    /**\n     * An optional url resolver.\n     */\n    resolver: IRenderMime.IResolver | null;\n\n    /**\n     * An optional link handler.\n     */\n    linkHandler: IRenderMime.ILinkHandler | null;\n\n    /**\n     * Whether the node should be typeset.\n     */\n    shouldTypeset: boolean;\n\n    /**\n     * The LaTeX typesetter for the application.\n     */\n    latexTypesetter: IRenderMime.ILatexTypesetter | null;\n  }\n}\n\n/**\n * Render SVG into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderSVG(options: renderSVG.IRenderOptions): Promise<void> {\n  // Unpack the options.\n  let { host, source, trusted, unconfined } = options;\n\n  // Clear the content if there is no source.\n  if (!source) {\n    host.textContent = '';\n    return Promise.resolve(undefined);\n  }\n\n  // Display a message if the source is not trusted.\n  if (!trusted) {\n    host.textContent =\n      'Cannot display an untrusted SVG. Maybe you need to run the cell?';\n    return Promise.resolve(undefined);\n  }\n\n  // Render in img so that user can save it easily\n  const img = new Image();\n  img.src = `data:image/svg+xml,${encodeURIComponent(source)}`;\n  host.appendChild(img);\n\n  if (unconfined === true) {\n    host.classList.add('jp-mod-unconfined');\n  }\n  return Promise.resolve();\n}\n\n/**\n * The namespace for the `renderSVG` function statics.\n */\nexport namespace renderSVG {\n  /**\n   * The options for the `renderSVG` function.\n   */\n  export interface IRenderOptions {\n    /**\n     * The host node for the rendered SVG.\n     */\n    host: HTMLElement;\n\n    /**\n     * The SVG source.\n     */\n    source: string;\n\n    /**\n     * Whether the source is trusted.\n     */\n    trusted: boolean;\n\n    /**\n     * Whether the svg should be unconfined.\n     */\n    unconfined?: boolean;\n  }\n}\n\n/**\n * Render text into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderText(options: renderText.IRenderOptions): Promise<void> {\n  // Unpack the options.\n  let { host, source } = options;\n\n  const ansiUp = new AnsiUp();\n  ansiUp.escape_for_html = true;\n  ansiUp.use_classes = true;\n\n  // Create the HTML content.\n  let content = ansiUp.ansi_to_html(source);\n\n  // Set the inner HTML for the host node.\n  host.innerHTML = `<pre>${content}</pre>`;\n\n  // Return the rendered promise.\n  return Promise.resolve(undefined);\n}\n\n/**\n * The namespace for the `renderText` function statics.\n */\nexport namespace renderText {\n  /**\n   * The options for the `renderText` function.\n   */\n  export interface IRenderOptions {\n    /**\n     * The host node for the text content.\n     */\n    host: HTMLElement;\n\n    /**\n     * The source text to render.\n     */\n    source: string;\n  }\n}\n\n/**\n * The namespace for module implementation details.\n */\nnamespace Private {\n  /**\n   * Eval the script tags contained in a host populated by `innerHTML`.\n   *\n   * When script tags are created via `innerHTML`, the browser does not\n   * evaluate them when they are added to the page. This function works\n   * around that by creating new equivalent script nodes manually, and\n   * replacing the originals.\n   */\n  export function evalInnerHTMLScriptTags(host: HTMLElement): void {\n    // Create a snapshot of the current script nodes.\n    let scripts = toArray(host.getElementsByTagName('script'));\n\n    // Loop over each script node.\n    for (let script of scripts) {\n      // Skip any scripts which no longer have a parent.\n      if (!script.parentNode) {\n        continue;\n      }\n\n      // Create a new script node which will be clone.\n      let clone = document.createElement('script');\n\n      // Copy the attributes into the clone.\n      let attrs = script.attributes;\n      for (let i = 0, n = attrs.length; i < n; ++i) {\n        let { name, value } = attrs[i];\n        clone.setAttribute(name, value);\n      }\n\n      // Copy the text content into the clone.\n      clone.textContent = script.textContent;\n\n      // Replace the old script in the parent.\n      script.parentNode.replaceChild(clone, script);\n    }\n  }\n\n  /**\n   * Render markdown for the specified content.\n   *\n   * @param content - The string of markdown to render.\n   *\n   * @return A promise which resolves with the rendered content.\n   */\n  export function renderMarked(content: string): Promise<string> {\n    initializeMarked();\n    return new Promise<string>((resolve, reject) => {\n      marked(content, (err: any, content: string) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(content);\n        }\n      });\n    });\n  }\n\n  /**\n   * Handle the default behavior of nodes.\n   */\n  export function handleDefaults(\n    node: HTMLElement,\n    resolver?: IRenderMime.IResolver\n  ): void {\n    // Handle anchor elements.\n    let anchors = node.getElementsByTagName('a');\n    for (let i = 0; i < anchors.length; i++) {\n      let path = anchors[i].href || '';\n      const isLocal =\n        resolver && resolver.isLocal\n          ? resolver.isLocal(path)\n          : URLExt.isLocal(path);\n      if (isLocal) {\n        anchors[i].target = '_self';\n      } else {\n        anchors[i].target = '_blank';\n      }\n    }\n\n    // Handle image elements.\n    let imgs = node.getElementsByTagName('img');\n    for (let i = 0; i < imgs.length; i++) {\n      if (!imgs[i].alt) {\n        imgs[i].alt = 'Image';\n      }\n    }\n  }\n\n  /**\n   * Resolve the relative urls in element `src` and `href` attributes.\n   *\n   * @param node - The head html element.\n   *\n   * @param resolver - A url resolver.\n   *\n   * @param linkHandler - An optional link handler for nodes.\n   *\n   * @returns a promise fulfilled when the relative urls have been resolved.\n   */\n  export function handleUrls(\n    node: HTMLElement,\n    resolver: IRenderMime.IResolver,\n    linkHandler: IRenderMime.ILinkHandler | null\n  ): Promise<void> {\n    // Set up an array to collect promises.\n    let promises: Promise<void>[] = [];\n\n    // Handle HTML Elements with src attributes.\n    let nodes = node.querySelectorAll('*[src]');\n    for (let i = 0; i < nodes.length; i++) {\n      promises.push(handleAttr(nodes[i] as HTMLElement, 'src', resolver));\n    }\n\n    // Handle anchor elements.\n    let anchors = node.getElementsByTagName('a');\n    for (let i = 0; i < anchors.length; i++) {\n      promises.push(handleAnchor(anchors[i], resolver, linkHandler));\n    }\n\n    // Handle link elements.\n    let links = node.getElementsByTagName('link');\n    for (let i = 0; i < links.length; i++) {\n      promises.push(handleAttr(links[i], 'href', resolver));\n    }\n\n    // Wait on all promises.\n    return Promise.all(promises).then(() => undefined);\n  }\n\n  /**\n   * Apply ids to headers.\n   */\n  export function headerAnchors(node: HTMLElement): void {\n    let headerNames = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n    for (let headerType of headerNames) {\n      let headers = node.getElementsByTagName(headerType);\n      for (let i = 0; i < headers.length; i++) {\n        let header = headers[i];\n        header.id = encodeURIComponent(header.innerHTML.replace(/ /g, '-'));\n        let anchor = document.createElement('a');\n        anchor.target = '_self';\n        anchor.textContent = '¶';\n        anchor.href = '#' + header.id;\n        anchor.classList.add('jp-InternalAnchorLink');\n        header.appendChild(anchor);\n      }\n    }\n  }\n\n  /**\n   * Handle a node with a `src` or `href` attribute.\n   */\n  function handleAttr(\n    node: HTMLElement,\n    name: 'src' | 'href',\n    resolver: IRenderMime.IResolver\n  ): Promise<void> {\n    let source = node.getAttribute(name) || '';\n    const isLocal = resolver.isLocal\n      ? resolver.isLocal(source)\n      : URLExt.isLocal(source);\n    if (!source || !isLocal) {\n      return Promise.resolve(undefined);\n    }\n    node.setAttribute(name, '');\n    return resolver\n      .resolveUrl(source)\n      .then(path => {\n        return resolver.getDownloadUrl(path);\n      })\n      .then(url => {\n        // Check protocol again in case it changed:\n        if (URLExt.parse(url).protocol !== 'data:') {\n          // Bust caching for local src attrs.\n          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n          url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n        }\n        node.setAttribute(name, url);\n      })\n      .catch(err => {\n        // If there was an error getting the url,\n        // just make it an empty link.\n        node.setAttribute(name, '');\n      });\n  }\n\n  /**\n   * Handle an anchor node.\n   */\n  function handleAnchor(\n    anchor: HTMLAnchorElement,\n    resolver: IRenderMime.IResolver,\n    linkHandler: IRenderMime.ILinkHandler | null\n  ): Promise<void> {\n    // Get the link path without the location prepended.\n    // (e.g. \"./foo.md#Header 1\" vs \"http://localhost:8888/foo.md#Header 1\")\n    let href = anchor.getAttribute('href') || '';\n    const isLocal = resolver.isLocal\n      ? resolver.isLocal(href)\n      : URLExt.isLocal(href);\n    // Bail if it is not a file-like url.\n    if (!href || !isLocal) {\n      return Promise.resolve(undefined);\n    }\n    // Remove the hash until we can handle it.\n    let hash = anchor.hash;\n    if (hash) {\n      // Handle internal link in the file.\n      if (hash === href) {\n        anchor.target = '_self';\n        return Promise.resolve(undefined);\n      }\n      // For external links, remove the hash until we have hash handling.\n      href = href.replace(hash, '');\n    }\n    // Get the appropriate file path.\n    return resolver\n      .resolveUrl(href)\n      .then(path => {\n        // Handle the click override.\n        if (linkHandler) {\n          linkHandler.handleLink(anchor, path, hash);\n        }\n        // Get the appropriate file download path.\n        return resolver.getDownloadUrl(path);\n      })\n      .then(url => {\n        // Set the visible anchor.\n        anchor.href = url + hash;\n      })\n      .catch(err => {\n        // If there was an error getting the url,\n        // just make it an empty link.\n        anchor.href = '';\n      });\n  }\n\n  let markedInitialized = false;\n\n  /**\n   * Support GitHub flavored Markdown, leave sanitizing to external library.\n   */\n  function initializeMarked(): void {\n    if (markedInitialized) {\n      return;\n    }\n    markedInitialized = true;\n    marked.setOptions({\n      gfm: true,\n      sanitize: false,\n      tables: true,\n      // breaks: true; We can't use GFM breaks as it causes problems with tables\n      langPrefix: `cm-s-${CodeMirrorEditor.defaultConfig.theme} language-`,\n      highlight: (code, lang, callback) => {\n        let cb = (err: Error | null, code: string) => {\n          if (callback) {\n            callback(err, code);\n          }\n          return code;\n        };\n        if (!lang) {\n          // no language, no highlight\n          return cb(null, code);\n        }\n        Mode.ensure(lang)\n          .then(spec => {\n            let el = document.createElement('div');\n            if (!spec) {\n              console.log(`No CodeMirror mode: ${lang}`);\n              return cb(null, code);\n            }\n            try {\n              Mode.run(code, spec.mime, el);\n              return cb(null, el.innerHTML);\n            } catch (err) {\n              console.log(`Failed to highlight ${lang} code`, err);\n              return cb(err, code);\n            }\n          })\n          .catch(err => {\n            console.log(`No CodeMirror mode: ${lang}`);\n            console.log(`Require CodeMirror mode error: ${err}`);\n            return cb(null, code);\n          });\n        return code;\n      }\n    });\n  }\n}\n"]}