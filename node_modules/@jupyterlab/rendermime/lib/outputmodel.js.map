{"version":3,"file":"outputmodel.js","sourceRoot":"","sources":["../../../../rendermime/src/outputmodel.ts"],"names":[],"mappings":";;AAAA;;;+EAG+E;AAC/E,mDAK6B;AAE7B,mDAAsD;AAEtD,qDAAiD;AAEjD,yDAA0E;AA6D1E;;GAEG;AACH;IACE;;OAEG;IACH,YAAY,OAA8B;QA6IlC,aAAQ,GAAG,IAAI,kBAAM,CAAa,IAAI,CAAC,CAAC;QACxC,SAAI,GAAe,EAAE,CAAC;QA7I5B,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACpE,IAAI,CAAC,KAAK,GAAG,IAAI,4BAAc,CAAC,EAAE,MAAM,EAAE,IAAkB,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,IAAI,4BAAc,CAAC,EAAE,MAAM,EAAE,QAAsB,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,2BAA2B;QAC3B,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC1B,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE;YACrB,+CAA+C;YAC/C,QAAQ,GAAG,EAAE;gBACX,KAAK,MAAM,CAAC;gBACZ,KAAK,UAAU;oBACb,MAAM;gBACR;oBACE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;aAChD;SACF;QACD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;QAC9B,IAAI,oBAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;YACnC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,eAAe,CAAC;SAC7C;aAAM;YACL,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC5B;IACH,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAiBD;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACzB,kBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CAAC,OAA+C;QACrD,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC;SAC9B;QACD,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC;SACtC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,IAAI,MAAM,GAAc,EAAE,CAAC;QAC3B,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;YACzB,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SAC/C;QACD,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,cAAc,CAAC;YACpB,KAAK,gBAAgB,CAAC;YACtB,KAAK,qBAAqB;gBACxB,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAkB,CAAC;gBACzC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,QAAsB,CAAC;gBACjD,MAAM;YACR;gBACE,MAAM;SACT;QACD,yBAAyB;QACzB,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3B,OAAO,MAA0B,CAAC;IACpC,CAAC;IAED;;OAEG;IACK,iBAAiB,CACvB,UAA2B,EAC3B,IAAwB;QAExB,IAAI,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhC,uBAAuB;QACvB,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC/B,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACxB;SACF;QAED,uBAAuB;QACvB,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,QAAQ,KAAK,QAAQ,EAAE;gBACzB,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,QAAqB,CAAC,CAAC;aAC5C;SACF;IACH,CAAC;CAQF;AAvJD,kCAuJC;AAED;;GAEG;AACH,WAAiB,WAAW;IAC1B;;;;;;OAMG;IACH,iBAAwB,MAAwB;QAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAFe,mBAAO,UAEtB,CAAA;IAED;;;;;;OAMG;IACH,qBAA4B,MAAwB;QAClD,OAAO,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAFe,uBAAW,cAE1B,CAAA;AACH,CAAC,EAtBgB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAsB3B;AAED;;GAEG;AACH,IAAU,OAAO,CAwEhB;AAxED,WAAU,OAAO;IACf;;OAEG;IACH,iBAAwB,MAAwB;QAC9C,IAAI,MAAM,GAAyB,EAAE,CAAC;QACtC,IACE,oBAAQ,CAAC,eAAe,CAAC,MAAM,CAAC;YAChC,oBAAQ,CAAC,aAAa,CAAC,MAAM,CAAC;YAC9B,oBAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,EAChC;YACA,MAAM,GAAI,MAAkC,CAAC,IAAI,CAAC;SACnD;aAAM,IAAI,oBAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACpC,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC5B,MAAM,CAAC,gCAAgC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;aACxD;iBAAM;gBACL,MAAM,CAAC,gCAAgC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;aACxD;SACF;aAAM,IAAI,oBAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACnC,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,MAAM,CAAC,gCAAgC,CAAC;gBACtC,SAAS,IAAI,GAAG,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,MAAM,EAAE,CAAC;SACpD;QACD,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IApBe,eAAO,UAoBtB,CAAA;IAED;;OAEG;IACH,qBAA4B,MAAwB;QAClD,IAAI,KAAK,GAAe,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,oBAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,oBAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YACtE,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE;gBAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;aAC5C;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IARe,mBAAW,cAQ1B,CAAA;IAED;;OAEG;IACH,0BACE,OAA8B;QAE9B,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QAChC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;IACrC,CAAC;IAPe,wBAAgB,mBAO/B,CAAA;IAED;;OAEG;IACH,iBAAwB,KAAiB,EAAE,GAAW;QACpD,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACtB,IAAI,mBAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1C,CAAC;IANe,eAAO,UAMtB,CAAA;IAED;;OAEG;IACH,uBAAuB,MAA4B;QACjD,IAAI,GAAG,GAAe,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1C,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE;YAC3B,GAAG,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC3C;QACD,OAAO,GAAG,CAAC;IACb,CAAC;AACH,CAAC,EAxES,OAAO,KAAP,OAAO,QAwEhB","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport {\n  JSONExt,\n  JSONObject,\n  JSONValue,\n  ReadonlyJSONObject\n} from '@phosphor/coreutils';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { IObservableJSON, ObservableJSON } from '@jupyterlab/observables';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { MimeModel } from './mimemodel';\n\n/**\n * The interface for an output model.\n */\nexport interface IOutputModel extends IRenderMime.IMimeModel {\n  /**\n   * A signal emitted when the output model changes.\n   */\n  readonly changed: ISignal<this, void>;\n\n  /**\n   * The output type.\n   */\n  readonly type: string;\n\n  /**\n   * The execution count of the model.\n   */\n  readonly executionCount: nbformat.ExecutionCount;\n\n  /**\n   * Whether the output is trusted.\n   */\n  trusted: boolean;\n\n  /**\n   * Dispose of the resources used by the output model.\n   */\n  dispose(): void;\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IOutput;\n}\n\n/**\n * The namespace for IOutputModel sub-interfaces.\n */\nexport namespace IOutputModel {\n  /**\n   * The options used to create a notebook output model.\n   */\n  export interface IOptions {\n    /**\n     * The raw output value.\n     */\n    value: nbformat.IOutput;\n\n    /**\n     * Whether the output is trusted.  The default is false.\n     */\n    trusted?: boolean;\n  }\n}\n\n/**\n * The default implementation of a notebook output model.\n */\nexport class OutputModel implements IOutputModel {\n  /**\n   * Construct a new output model.\n   */\n  constructor(options: IOutputModel.IOptions) {\n    let { data, metadata, trusted } = Private.getBundleOptions(options);\n    this._data = new ObservableJSON({ values: data as JSONObject });\n    this._rawData = data;\n    this._metadata = new ObservableJSON({ values: metadata as JSONObject });\n    this._rawMetadata = metadata;\n    this.trusted = trusted;\n    // Make a copy of the data.\n    let value = options.value;\n    for (let key in value) {\n      // Ignore data and metadata that were stripped.\n      switch (key) {\n        case 'data':\n        case 'metadata':\n          break;\n        default:\n          this._raw[key] = Private.extract(value, key);\n      }\n    }\n    this.type = value.output_type;\n    if (nbformat.isExecuteResult(value)) {\n      this.executionCount = value.execution_count;\n    } else {\n      this.executionCount = null;\n    }\n  }\n\n  /**\n   * A signal emitted when the output model changes.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * The output type.\n   */\n  readonly type: string;\n\n  /**\n   * The execution count.\n   */\n  readonly executionCount: nbformat.ExecutionCount;\n\n  /**\n   * Whether the model is trusted.\n   */\n  readonly trusted: boolean;\n\n  /**\n   * Dispose of the resources used by the output model.\n   */\n  dispose(): void {\n    this._data.dispose();\n    this._metadata.dispose();\n    Signal.clearData(this);\n  }\n\n  /**\n   * The data associated with the model.\n   */\n  get data(): ReadonlyJSONObject {\n    return this._rawData;\n  }\n\n  /**\n   * The metadata associated with the model.\n   */\n  get metadata(): ReadonlyJSONObject {\n    return this._rawMetadata;\n  }\n\n  /**\n   * Set the data associated with the model.\n   *\n   * #### Notes\n   * Depending on the implementation of the mime model,\n   * this call may or may not have deferred effects,\n   */\n  setData(options: IRenderMime.IMimeModel.ISetDataOptions): void {\n    if (options.data) {\n      this._updateObservable(this._data, options.data);\n      this._rawData = options.data;\n    }\n    if (options.metadata) {\n      this._updateObservable(this._metadata, options.metadata);\n      this._rawMetadata = options.metadata;\n    }\n    this._changed.emit(void 0);\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IOutput {\n    let output: JSONValue = {};\n    for (let key in this._raw) {\n      output[key] = Private.extract(this._raw, key);\n    }\n    switch (this.type) {\n      case 'display_data':\n      case 'execute_result':\n      case 'update_display_data':\n        output['data'] = this.data as JSONObject;\n        output['metadata'] = this.metadata as JSONObject;\n        break;\n      default:\n        break;\n    }\n    // Remove transient data.\n    delete output['transient'];\n    return output as nbformat.IOutput;\n  }\n\n  /**\n   * Update an observable JSON object using a readonly JSON object.\n   */\n  private _updateObservable(\n    observable: IObservableJSON,\n    data: ReadonlyJSONObject\n  ) {\n    let oldKeys = observable.keys();\n    let newKeys = Object.keys(data);\n\n    // Handle removed keys.\n    for (let key of oldKeys) {\n      if (newKeys.indexOf(key) === -1) {\n        observable.delete(key);\n      }\n    }\n\n    // Handle changed data.\n    for (let key of newKeys) {\n      let oldValue = observable.get(key);\n      let newValue = data[key];\n      if (oldValue !== newValue) {\n        observable.set(key, newValue as JSONValue);\n      }\n    }\n  }\n\n  private _changed = new Signal<this, void>(this);\n  private _raw: JSONObject = {};\n  private _rawMetadata: ReadonlyJSONObject;\n  private _rawData: ReadonlyJSONObject;\n  private _data: IObservableJSON;\n  private _metadata: IObservableJSON;\n}\n\n/**\n * The namespace for OutputModel statics.\n */\nexport namespace OutputModel {\n  /**\n   * Get the data for an output.\n   *\n   * @params output - A kernel output message payload.\n   *\n   * @returns - The data for the payload.\n   */\n  export function getData(output: nbformat.IOutput): JSONObject {\n    return Private.getData(output);\n  }\n\n  /**\n   * Get the metadata from an output message.\n   *\n   * @params output - A kernel output message payload.\n   *\n   * @returns - The metadata for the payload.\n   */\n  export function getMetadata(output: nbformat.IOutput): JSONObject {\n    return Private.getMetadata(output);\n  }\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Get the data from a notebook output.\n   */\n  export function getData(output: nbformat.IOutput): JSONObject {\n    let bundle: nbformat.IMimeBundle = {};\n    if (\n      nbformat.isExecuteResult(output) ||\n      nbformat.isDisplayData(output) ||\n      nbformat.isDisplayUpdate(output)\n    ) {\n      bundle = (output as nbformat.IExecuteResult).data;\n    } else if (nbformat.isStream(output)) {\n      if (output.name === 'stderr') {\n        bundle['application/vnd.jupyter.stderr'] = output.text;\n      } else {\n        bundle['application/vnd.jupyter.stdout'] = output.text;\n      }\n    } else if (nbformat.isError(output)) {\n      let traceback = output.traceback.join('\\n');\n      bundle['application/vnd.jupyter.stderr'] =\n        traceback || `${output.ename}: ${output.evalue}`;\n    }\n    return convertBundle(bundle);\n  }\n\n  /**\n   * Get the metadata from an output message.\n   */\n  export function getMetadata(output: nbformat.IOutput): JSONObject {\n    let value: JSONObject = Object.create(null);\n    if (nbformat.isExecuteResult(output) || nbformat.isDisplayData(output)) {\n      for (let key in output.metadata) {\n        value[key] = extract(output.metadata, key);\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Get the bundle options given output model options.\n   */\n  export function getBundleOptions(\n    options: IOutputModel.IOptions\n  ): MimeModel.IOptions {\n    let data = getData(options.value);\n    let metadata = getMetadata(options.value);\n    let trusted = !!options.trusted;\n    return { data, metadata, trusted };\n  }\n\n  /**\n   * Extract a value from a JSONObject.\n   */\n  export function extract(value: JSONObject, key: string): JSONValue {\n    let item = value[key];\n    if (JSONExt.isPrimitive(item)) {\n      return item;\n    }\n    return JSON.parse(JSON.stringify(item));\n  }\n\n  /**\n   * Convert a mime bundle to mime data.\n   */\n  function convertBundle(bundle: nbformat.IMimeBundle): JSONObject {\n    let map: JSONObject = Object.create(null);\n    for (let mimeType in bundle) {\n      map[mimeType] = extract(bundle, mimeType);\n    }\n    return map;\n  }\n}\n"]}